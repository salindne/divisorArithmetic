///////////////////////////////////////////////////////////////////////////////
//////////////////////// POLYNOMIAL TIMING UTILITIES. /////////////////////////
///////////////////////////////////////////////////////////////////////////////
//  
//-----------------------------------------------------------------------------
// OVERVIEW
//-----------------------------------------------------------------------------
// This file contains functions for timing ramified and split model divisor 
// arithmetic from reduced_basis_arithmetic.mag
//
///////////////////////////////////////////////////////////////////////////////

//AUX

//-----------------------------------------------------------------------------
// Coeff(poly,n)
//-----------------------------------------------------------------------------
// Input: poly: Polynomial over a field.
//           n: natural number.
//
// Return: The n-monomial's coefficient.
//-----------------------------------------------------------------------------
Coeff := function(poly,n)
    c:=Coefficients(poly); return n+1 le #c select c[n+1] else 0;
end function;

//-----------------------------------------------------------------------------
// ComputeVpl(f,h)
//-----------------------------------------------------------------------------
// Input: f,h: hyperelliptic polynomials of a split curve.
//
// Return: Unique Vpl polynomial of degree g+1 for which 
//         deg(f-h*Vpl-Vpl^2) <= g.
//-----------------------------------------------------------------------------
ComputeVpl := function(f,h,g)
    R<x>:=PolynomialRing(BaseRing(f));

    //g+1 coefficient of h, can be 0
    hl:= Coeff(h,g+1);
    //Leading coefficient of f, has to have degree 2g+2
    fl:= Coeff(f,2*g+2);

    //Leading term of Vpl is set to be a solution of the quadratic equation fl - hl*x - x^2
    Vl:= -Coeff(Factorization(fl - hl*x - x^2)[2][1],0);
    Vpl := Vl*x^(g+1);

    //Derivative of fl - hl*yl - yl^2, denominator in discovery of Vpl.
    dinv:= (2*Vl + hl)^-1;
    

    //Work down one term at a time, using first g+1 terms of f, and all of h
    i:=g;    
    while i ge 0 do
        Vpl +:= dinv*Coeff(f - h*Vpl - Vpl^2, g+1+i)*x^i;
        i-:=1;
    end while;
    assert Degree(f - h*Vpl - Vpl^2) le g;
    return Vpl;

end function;

//-----------------------------------------------------------------------------
// RandomCurveG2_RAM(q,hIsZero)
//-----------------------------------------------------------------------------
// Input:       
//              q: field parameter.
//        hIsZero: Boolean, if true then h polynomial is 0.
//
// Return: Random(ish) hyperelliptic polynomials of curve with one point at
//         infinity f and h in GF(q)[x] where f is seperable of degree 5 and 
//         polynomial h of degree <= 2.
//-----------------------------------------------------------------------------
RandomG2Curve_RAM := function(F,hIsZero)
    R<x>:=PolynomialRing(F);

    while true do
        //Randomly generate f and h for genus g
        f:= x^5 + R ! [Random(F): i in [0..4]];
        if hIsZero then
            h:= R ! 0;
        else
            h:= Random([1,0])*x^2 + R ! [Random(F): i in [0..1]];
        end if;

        //Check if f and h are hyperelliptic polynomials
        try
            C:=HyperellipticCurve(f,h);
            isHC:= true;
        catch e
            isHC:= false;
        end try;

        //If f and h are hyperelliptic polynomials, check to see if
        //the curve has one point at infinity and is genus g.
        if isHC then
            if (# PointsAtInfinity(C) eq 1) and (Degree(f) eq 5) then
                return f,h;
            end if;
        end if;
    end while;
end function;



//-----------------------------------------------------------------------------
// RandomCurveG2_SPLIT(q,hIsZero)
//-----------------------------------------------------------------------------
// Input:       
//              q: field parameter.
//        hIsZero: Boolean, if true then h polynomial is 0.
//
// Return: Random(ish) hyperelliptic polynomials of curve with two points at
//         infinity f and h in GF(q)[x] where f is seperable of degree 6 and 
//         polynomial h of degree <= 3.
//-----------------------------------------------------------------------------
RandomG2Curve_SPLIT := function(q,hIsZero)
    F:=GF(q);
    R<x>:=PolynomialRing(F);
    while true do
        //Randomly generate f and h for genus 2
        f:= R ! [Random(F): i in [0..6]];
        if hIsZero then
            h:= R ! 0;
        else
            h:= R ! [Random(F): i in [0..3]];
        end if;

        //Check if f and h are hyperelliptic polynomials
        try
            C:=HyperellipticCurve(f,h);
            isHC:= true;
        catch e
            isHC:= false;
        end try;
       
        //If f and h are hyperelliptic polynomials, check to see if
        //the curve has two points at infinity and is genus 2.
        if isHC then
            if (# PointsAtInfinity(C) eq 2) and (Degree(f) eq 6) then
                return f,h;
            end if;
        end if;
        
    end while;
end function;



//RAM

//-----------------------------------------------------------------------------
// Fibonacci_Add_RAM(D1,D2,f,h,len)
//-----------------------------------------------------------------------------
// Input: D1,D2: D1=(u1,v1) and D2=(u2,v2) divisors over 
//               HyperellipticCurve(f,h), to be composed together.
//          f,h: hyperelliptic polynomials corresponding to genus g curve.
//          len: Chain length.        
// 
// Return: Divisor Dpp at end of fibonacci style addition sequence using Cantor.
//-----------------------------------------------------------------------------
Fibonacci_Add_RAM := function(D1,D2,f,h,len)
    D   := D1;
    Dp  := D2;
    if D eq Dp then
        Dpp := DBL_RAM(D,f,h);
    else
        Dpp := ADD_RAM(D,Dp,f,h);
    end if;

    i := 0;
    while i lt len do
        i   := i + 1;
        D   := Dp;
        Dp  := Dpp;
        if D eq Dp then
            Dpp := DBL_RAM(D,f,h);
        else
            Dpp := ADD_RAM(D,Dp,f,h);
        end if;
    end while;
    
    return Dpp; 
end function;

//-----------------------------------------------------------------------------
// Fibonacci_Magma_RAM(D1,D2,f,h,len)
//-----------------------------------------------------------------------------
// Input: D1,D2: D1=(u1,v1) and D2=(u2,v2) divisors over 
//               HyperellipticCurve(f,h), to be composed together.
//          len: Chain length.        
// 
// Return: Divisor Dpp at end of fibonacci style addition sequence using NUCOMP.
//-----------------------------------------------------------------------------
Fibonacci_Magma_RAM := function(D1,D2,len)
    D   := D1;
    Dp  := D2;
    Dpp := D + Dp;
    i := 0;
    while i lt len do
        i   := i + 1;
        D   := Dp;
        Dp  := Dpp;
        Dpp := D + Dp;
    end while;
    return Dpp;
end function;

//-----------------------------------------------------------------------------
// DoubleChain_Dbl_RAM(D1,f,h,len)
//-----------------------------------------------------------------------------
// Input: D1: D1=(u1,v1) divisor over 
//               HyperellipticCurve(f,h), to be composed together.
//          f,h: hyperelliptic polynomials corresponding to genus g curve.
//          len: Chain length.        
// 
// Return: Divisor D at end of doubling chain using Cantor.
//-----------------------------------------------------------------------------
DoubleChain_Dbl_RAM := function(D1,f,h,len)
    i := 0;
    D := DBL_RAM(D1,f,h);

    while i lt len do
        i := i + 1;
        D  := DBL_RAM(D,f,h);
    end while;
    return D;
end function;

//-----------------------------------------------------------------------------
// DoubleChain_Magma_RAM(D1,f,h,len)
//-----------------------------------------------------------------------------
// Input: D1: D1=(u1,v1) divisor over 
//               HyperellipticCurve(f,h), to be composed together.
//          len: Chain length.        
// 
// Return: Divisor D at end of doubling chain using Nuduple.
//-----------------------------------------------------------------------------
DoubleChain_Magma_RAM := function(D1, len)
    i := 0;
    D := 2*D1;
    while i lt len do
        i := i + 1;
        D  +:= D;
    end while;
    return D;
end function;






//POS 

//-----------------------------------------------------------------------------
// Fibonacci_Add_SPLIT_POS(D1,D2,f,h,V,len)
//-----------------------------------------------------------------------------
// Input: D1,D2: D1=(u1,v1,n1) and D2=(u2,v2,n2) divisors over 
//               HyperellipticCurve(f,h), to be composed together.
//          f,h,V: hyperelliptic polynomials corresponding to genus g curve.
//          len: Chain length.        
// 
// Return: Divisor Dpp at end of fibonacci style addition sequence using Cantor.
//-----------------------------------------------------------------------------
Fibonacci_Add_SPLIT_POS := function(D1,D2,ccs,len)
    D   := D1;
    Dp  := D2;
    if D eq Dp then
        Dpp := DBL(D,ccs);
    else
        Dpp := ADD(D,Dp,ccs);
    end if;
    i := 1;
    while i lt len do
        i   := i + 1;
        D   := Dp;
        Dp  := Dpp;
        if D eq Dp then
            Dpp := DBL(D,ccs);
        else
            Dpp := ADD(D,Dp,ccs);
        end if;
    end while;
    return Dpp;
end function;

//-----------------------------------------------------------------------------
// Fibonacci_Magma_SPLIT_POS(D1,D2,len)
//-----------------------------------------------------------------------------
// Input: D1,D2: D1=(u1,v1,n1) and D2=(u2,v2,n2) divisors over 
//               HyperellipticCurve(f,h), to be composed together.
//          len: Chain length.        
// 
// Return: Divisor Dpp at end of fibonacci style addition sequence using Cantor.
//-----------------------------------------------------------------------------
Fibonacci_Magma_SPLIT_POS := function(D1,D2,len)
    D   := D1;
    Dp  := D2;
    Dpp := D + Dp;
    i := 1;
    while i lt len do
        i   := i + 1;
        D   := Dp;
        Dp  := Dpp;
        Dpp := D + Dp;
    end while;
    return Dpp;
end function;


//-----------------------------------------------------------------------------
// DoubleChain_Dbl_SPLIT_POS(D1,f,h,V,len)
//-----------------------------------------------------------------------------
// Input: D1: D1=(u1,v1,n1) divisor over 
//               HyperellipticCurve(f,h), to be composed together.
//          f,h,V: hyperelliptic polynomials corresponding to genus g curve.
//          len: Chain length.        
// 
// Return: Divisor D at end of doubling chain using Cantor.
//-----------------------------------------------------------------------------
DoubleChain_Dbl_SPLIT_POS := function(D1,ccs,len)
    i := 0;
    D := DBL(D1,ccs);
    while i lt len do
        i := i + 1;
        D  := DBL(D,ccs);
    end while;
    return D;
end function;

//-----------------------------------------------------------------------------
// DoubleChain_Magma_SPLIT_POS(D1,len)
//-----------------------------------------------------------------------------
// Input: D1: D1=(u1,v1,n1) divisor over 
//               HyperellipticCurve(f,h), to be composed together.
//          len: Chain length.        
// 
// Return: Divisor D at end of doubling chain using Cantor.
//-----------------------------------------------------------------------------
DoubleChain_Magma_SPLIT_POS := function(D1,len)
    i := 0;
    D := 2*D1;
    while i lt len do
        i := i + 1;
        D  +:= D;
    end while;
    return D;
end function;
