clear;
///////////////////////////////////////////////////////////////////////////////
////// TESTING RAMIFIED MODEL DIVISOR ARITHMETIC OVER ARBITRARY FIELDS ////////
///////////////////////////////////////////////////////////////////////////////
//
// Sebastian Lindner, 2019
//-----------------------------------------------------------------------------
// OVERVIEW
//-----------------------------------------------------------------------------
// This script tests divisor arithmetic functions from arb_ramifiedG2_DBL.mag, 
// and arb_ramifiedG2_ADD.mag.
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//LOAD FILES
///////////////////////////////////////////////////////////////////////////////
//DBL_DEBUG:= false;
//ADD_DEBUG:= false;
load "ramifiedUtilities.mag";
load "ramFormulas/arb_ramifiedG2_DBL.mag";
load "ramFormulas/arb_ramifiedG2_ADD.mag";
"     ";


///////////////////////////////////////////////////////////////////////////////
//GLOBAL TESTING VARIABLES
///////////////////////////////////////////////////////////////////////////////
//Field sizes below 20 for random testing
FIELDS:= {2,3,4,5,7,8,9,11,13,16,17,19};
DIVISORS:= 2500; //Number of divisor additions and doubling to test per curve
TRIALS:= #FIELDS;
DEBUG:= false;
TEST_DBL:= true;
TEST_ADD:= true;


/////////////////////////////////////////////////////////
///////////////////// TEST LOOPS ////////////////////////
/////////////////////////////////////////////////////////

printf "///////////////////////////////////////////////////////////////////////\n";
printf "//\n";
printf "// - Small finite field and curve picked at random for each trial. \n";
printf "// - %o total trials.            \n", TRIALS;
printf "// - %o divisor additions and doubles each per trial.            \n", DIVISORS;
printf "//";
trial:=1;
errorFlag:= false;
for F in FIELDS do
  printf "\n//    Trail # %o over FF(%o).", trial, F;
  trial+:=1;
  // Random finite field FF and polynomial ring over FF
  FF:=GF(F);
  R<x>:=PolynomialRing(FF);

  f,h:= RandomG2Curve(F);
  ef := Reverse(Coefficients(f));
  eh := [Coefficient(h,2), Coefficient(h,1), Coefficient(h,0)];
  C:= HyperellipticCurve(f,h);
  J:= Jacobian(C);

  if DEBUG then
    "\n";
    FF, "f is: ", f, "h is: ", h;
    " ";
  end if;



  divisor:= 1;
  while divisor le DIVISORS do
    divisor+:=1;
    
    /////////////////////////////////////////////////////
    ///RANDOM DIVISORS
    /////////////////////////////////////////////////////
    D1:= Random(J);
    if DEBUG then
      "Divisor D1 is: ", D1;
    end if;
    d1 := [Coefficient(D1[1],2), Coefficient(D1[1],1),Coefficient(D1[1],0), Coefficient(D1[2],1), Coefficient(D1[2],0)];
    D2:= Random(J);
    if DEBUG then
      "Divisor D2 is: ", D2;
    end if;
    d2 := [Coefficient(D2[1],2), Coefficient(D2[1],1),Coefficient(D2[1],0), Coefficient(D2[2],1), Coefficient(D2[2],0)];

    
    /////////////////////////////////////////////////////
    ///TEST FORMULAS ON DIVISORS
    /////////////////////////////////////////////////////
    if DEBUG then "  "; end if;
    if TEST_DBL then
      dn := DBL_RAM(d1,ef,eh);
      dn := J![R![dn[3],dn[2],dn[1]], R![dn[5],dn[4]]];
      cantor:= D1 + D1;
      if dn[1] ne cantor[1] or dn[2] ne cantor[2] then
        printf "//     Doubling %o failed over finite field FF(%o) where f = %o and h = %o \n", D1, F, f, h;
        errorFlag:= true;
      end if;
    end if;

    if TEST_ADD then
      if D1 ne D2 then
        dn := ADD_RAM(d1,d2,ef,eh);
        dn := J![R![dn[3],dn[2],dn[1]], R![dn[5],dn[4]]];
        cantor:= D1 + D2;
        if dn[1] ne cantor[1] or dn[2] ne cantor[2] then
          printf "//     Adding %o with %o failed over finite field FF(%o) where f = %o and h = %o \n", D1, D2, F, f, h;
          errorFlag:= true;
        end if; 
      end if;
    end if;     
  end while; 
end for;
printf "\n//";
if errorFlag then
  printf "\n// Errors occured.";
else
  printf "\n// No errors.";
end if;
printf "\n//";
printf "\n///////////////////////////////////////////////////////////////////////\n";
quit;