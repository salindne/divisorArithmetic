
Deg2ADD_onlyFreq_RAM:= function(u1,u0,v1,v0,up1,up0,vp1,vp0,f)
    m3 := up1 - u1;
    m4 := u0 - up0;
    m1 := m4 + up1*m3;
    m2 := -up0*m3;
    d  := m1*m4 - m2*m3;
    r0  := vp0 - v0;
    r1  := vp1 - v1;
    sp1 := r0*m3 + r1*m4;
    sp0 := r0*m1 + r1*m2;
    a := sp1*d;
    if IsZero(a) then
        R<x>:=Parent(f);
        u := x^2 + u1*x + u0;
        v := v1*x + v0;
        w := ExactQuotient(f-v^2,u);
        up := x^2 + up1*x + up0;
        vp := vp1*x + vp0;
        wp := ExactQuotient(f-vp^2,up);
        gen := Add_RAM(<u,v,w>,<up,vp,wp>,f,2);
        return <Coefficient(gen[1],2), Coefficient(gen[1],1), Coefficient(gen[1],0), Coefficient(gen[2],1),Coefficient(gen[2],0)>;
    end if;
    w1   := a^-1;
    w2   := w1*d;
    w3   := w2*d;
    w4   := w3^2;
    s1   := w1*(sp1^2);
    spp0 := sp0*w2;
    t1   := spp0 - m3;
    t2   := t1 - w4;
    t3   := w3*v1;
    upp1 := spp0 + t2;
    upp0 := spp0*(t1 - m3) + m1 + t3 + t3 + w4*(u1 + up1);
    t0   := upp0 - u0;
    t1   := u1 - upp1;
    vpp1 := s1*(t1*t2 + t0) - v1;
    vpp0 := s1*(spp0*t0 + upp0*t1) - v0;
    return <1,upp1,upp0,vpp1,vpp0>;
end function;


ADD_onlyFreq_RAM:= function(d1,d2,f)
    if IsOne(d1[1]) and IsOne(d2[1]) then
        return Deg2ADD_onlyFreq_RAM(d1[2],d1[3],d1[4],d1[5],d2[2],d2[3],d2[4],d2[5],f);
    else 
        R<x>:= Parent(f);
        u := d1[1]*x^2 + d1[2]*x + d1[3];
        v := d1[4]*x + d1[5];
        w := ExactQuotient(f-v^2,u);
        up := d2[1]*x^2 + d2[2]*x + d2[3];
        vp := d2[4]*x + d2[5];
        wp := ExactQuotient(f-vp^2,up);
        gen := Add_RAM(<u,v,w>,<up,vp,wp>,f,2);
        return <Coefficient(gen[1],2), Coefficient(gen[1],1), Coefficient(gen[1],0), Coefficient(gen[2],1),Coefficient(gen[2],0)>;
    end if;
end function;


Deg2DBL_onlyFreq_RAM:= function(u1,u0,v1,v0,f)
    m3 := -v1 - v1;
    m4 := v0 + v0;
    m1 := m4 + m3*u1;
    m2 := -m3*u0;
    d  := m4*m1 - m2*m3;
    t0 := u1^2;
    t1 := Coefficient(f,3) + t0;
    t2 := u0 + u0;
    t3 := t1 - t2;
    r1 := t0 + t0 + t3;
    r0 := u1*(t2 - t3) + Coefficient(f,2) - v1^2;
    sp0 := r0*m1 + r1*m2;
    sp1 := r0*m3 + r1*m4;
    a := d*sp1;
    if IsZero(a) then
        R<x>:=Parent(f);
        u := x^2 + u1*x + u0;
        v := v1*x + v0;
        w := ExactQuotient(f-v^2,u);
        gen := Double_RAM(<u,v,w>,f,2);
        return <Coefficient(gen[1],2), Coefficient(gen[1],1), Coefficient(gen[1],0), Coefficient(gen[2],1),Coefficient(gen[2],0)>;
    end if;
    w1   := a^-1;
    w2   := w1*d;
    w3   := w2*d;
    w4   := w3^2;
    s1   := w1*(sp1^2);
    spp0 := sp0*w2;
    t2   := spp0 - w4;
    t3   := w3*v1 + w4*u1;
    upp1 := spp0 + t2;
    upp0 := spp0^2 + t3 + t3;
    t0   := upp0 - u0;
    t1   := u1 - upp1;
    vpp1 := s1*(t1*t2 + t0) - v1;
    vpp0 := s1*(spp0*t0 + upp0*t1) - v0;
    return <1,upp1, upp0, vpp1, vpp0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// DBL():         
// Input: u, v :  Polynomial Mumford cooridnates for any divisor D
//        f,h:    Hyperelliptic polynomials f,h.
//
// Output: Mumford coordinates upp2, upp1, upp0, vpp1, vpp0 for D2 = D + D
//   
// Description: Computes explicit formula for the doubling of divisor D.
///////////////////////////////////////////////////////////////////////////////
DBL_onlyFreq_RAM:= function(d1,f)  
    if IsOne(d1[1]) then
        return Deg2DBL_onlyFreq_RAM(d1[2],d1[3],d1[4],d1[5],f);
    else 
        R<x>:= Parent(f);
        u := d1[2]*x + d1[3];
        v := R! d1[5];
        w := ExactQuotient(f-v^2,u);
        gen := Double_RAM(<u,v,w>,f,2);
        return <Coefficient(gen[1],2), Coefficient(gen[1],1), Coefficient(gen[1],0), Coefficient(gen[2],1),Coefficient(gen[2],0)>;
    end if;
end function;