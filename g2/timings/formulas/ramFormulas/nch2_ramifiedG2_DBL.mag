///////////////////////////////////////////////////////////////////////////////
// Author: Sebastian Lindner,2019                                                          
//                                                   
// Description: Explicit divisor doubling formulas for the 4 coordinate         
//              Mumford representation over not characteristic 2 fields 
//              where: 
//                             
//              h(x) = 0 and             
//              f(x) = x^5 + f3x^3 + f2x^2 + f1x + f0           
//                                                                      
///////////////////////////////////////////////////////////////////////////////

//Must keep next two lines in this format for latex conversion
//Constant: f3,f2,f1,f0


///////////////////////////////////////////////////////////////////////////////
// deg1DBL():         
// Input: u0, v0:         Mumford cooridnates for degree 1 divisor D.
//        f3,f2,f1:    Curve constants of hyperelliptic polynomials f,h.
//
// Output: Mumford coordinates upp2, upp1, upp0, vpp1, vpp0 for D2 = D + D           
//   
// Description: Computes explicit formula for the doubling of a degree one
//              divisor.                  
///////////////////////////////////////////////////////////////////////////////
Deg1DBL_RAM:= function(u0,v0,f)
    d := v0 + v0;
    if IsZero(d) then
        return <0,0,1,0,0>;
    end if;
    w1 := d^-1;
    upp1 := u0 + u0;
    upp0 := u0^2;
    t0   := upp0 + Coefficient(f,3);
    t1   := t0 + upp0;
    t2   := upp0*(t0 + t1 + t1) - Coefficient(f,2)*upp1 + Coefficient(f,1);
    vpp1 := t2*w1;
    vpp0 := vpp1*u0 + v0;
    return <1, upp1, upp0, vpp1, vpp0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// deg2DBL():         
// Input: u0, v0:      Mumford cooridnates for degree 2 divisor D.
//        f3,f2,f1:    Curve constants of hyperelliptic polynomials f,h.
//
// Output: Mumford coordinates upp2, upp1, upp0, vpp1, vpp0 for D2 = D + D           
//   
// Description: Computes explicit formula for the doubling of a degree two
//              divisor.                  
///////////////////////////////////////////////////////////////////////////////
Deg2DBL_RAM:= function(u1,u0,v1,v0,f)
    m3 := -v1 - v1;
    m4 := v0 + v0;
    m1 := m4 + m3*u1;
    m2 := -m3*u0;
    d  := m4*m1 - m2*m3;
    if IsZero(d) then
        if IsZero(m3) then
            return <0,0,1,0,0>;
        end if;
        b1 := -m3^-1;
        k1 := Coefficient(f,3) - u0 + u1^2;
        k0 := Coefficient(f,2) - v1^2 + u0*u1 - u1*k1;
        u0 := u1 - m4*b1;
        s0 := b1*(k0 - u0*(k1 + u0*(u1 + u0)));
        upp1 := u0 + u0;
        upp0 := u0^2;
        vpp1 := v1 + s0;
        vpp0 := v0 + u0*s0;
        return <1,upp1,upp0,vpp1,vpp0>;
    end if;
    t0 := u1^2;
    t1 := Coefficient(f,3) + t0;
    t2 := u0 + u0;
    t3 := t1 - t2;
    r1 := t0 + t0 + t3;
    r0 := u1*(t2 - t3) + Coefficient(f,2) - v1^2;
    sp0 := r0*m1 + r1*m2;
    sp1 := r0*m3 + r1*m4;
    if IsZero(sp1) then
        w1 := d^-1;
        s0 := sp0*w1;
        upp0 := -s0^2 - u1 - u1;
        t1   := s0*(u1 - upp0) + v1;
        vpp0 := upp0*t1 - s0*u0 - v0;
        return <0, 1, upp0, 0, vpp0>;
    end if;
    w1   := (d*sp1)^-1;
    w2   := w1*d;
    w3   := w2*d;
    w4   := w3^2;
    s1   := w1*(sp1^2);
    spp0 := sp0*w2;
    t2   := spp0 - w4;
    t3   := w3*v1 + w4*u1;
    upp1 := spp0 + t2;
    upp0 := spp0^2 + t3 + t3;
    t0   := upp0 - u0;
    t1   := u1 - upp1;
    vpp1 := s1*(t1*t2 + t0) - v1;
    vpp0 := s1*(spp0*t0 + upp0*t1) - v0;
    return <1,upp1, upp0, vpp1, vpp0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// DBL():         
// Input: u, v :  Polynomial Mumford cooridnates for any divisor D
//        f,h:    Hyperelliptic polynomials f,h.
//
// Output: Mumford coordinates upp2, upp1, upp0, vpp1, vpp0 for D2 = D + D
//   
// Description: Computes explicit formula for the doubling of divisor D.
///////////////////////////////////////////////////////////////////////////////
DBL_expl_RAM:= function(d1,f) 
    if IsOne(d1[1]) then
        return Deg2DBL_RAM(d1[2],d1[3],d1[4],d1[5],f);
    elif IsOne(d1[2]) then
        return Deg1DBL_RAM(d1[3],d1[5],f);
    else
        return <0,0,1,0,0>;
    end if;
end function;