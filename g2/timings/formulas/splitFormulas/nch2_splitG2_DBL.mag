
///////////////////////////////////////////////////////////////////////////////
// Deg1DBLDWN():         
// Input: u0,v0,n : Mumford coordinates for divisor D=<x + u0,v0,1> in reduced
//                  basis.
//            ccs : Table of curve constants and precomputations, see 
//                  Precompuation in nch23_splitG2_UTL.mag 
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dp ~ D + D.               
// Description: Explicit computation for doubling a degree 1 divisor.                 
///////////////////////////////////////////////////////////////////////////////
Deg1DBLDWN:= function(u0,v0,ccs)  
    
    f4:= ccs[1][5]; 
    y1:= ccs[2][2]; 
    
    u2 := u0^2;
    d  := v0 + v0 - u0*(f4 + u2 + u2);

    if IsZero(d) then
        return <0,0,1,y1,ccs[2][1],2>;
    end if;

    z0  := ccs[2][1] - v0;
    t1  := u0*z0;
    z1  := ccs[2][4] - t1;
    t2  := u0*(z1 + z1 - t1);
    sp0 := ccs[1][2] - f4*v0 - t2 - t2;

    if IsZero(sp0) then
        if IsZero(z0) then
            return <0,0,1,y1,ccs[2][1],0>;
        end if;

        w1   := z0^-1;
        upp0 := z1*w1 - u0;
        upp2 := upp0^2;
        vpp0 := upp0*(f4 + upp2 + upp2) - v0;

        return <0,1,upp0,y1,vpp0,0>;
    end if;
    
    w1   := (d*sp0)^-1;
    w2   := d^2*w1;
    s0   := w1*sp0^2;
    upp1 := -z0*w2 - u0;
    upp0 := y1 + s0/2 - z1*w2 - u0*upp1;

    t0   := upp1 + upp1;
    vpp1 := upp0 + upp0 - upp1*t0 - y1 - s0;
    vpp0 := -v0 - s0*u0 - upp0*t0;
        
    return <1,upp1,upp0,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg1DBLUP():         
// Input: u0,v0,n : Mumford coordinates for divisor D=<x + u0,v0,0> in reduced
//                  basis.
//            ccs : Table of curve constants and precomputations, see 
//                  Precompuation in nch23_splitG2_UTL.mag 
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dp ~ D + D.               
// Description: Explicit computation for doubling a degree 1 divisor.                 
///////////////////////////////////////////////////////////////////////////////
Deg1DBLUP:= function(u0,v0,ccs)

    f4:= ccs[1][5];
    y1:= ccs[2][2]; 

    u2 := u0^2;
    t0 := u0*(f4 + u2 + u2);
    v0 := v0 - t0;
    d := v0 + v0 + t0;

    if IsZero(d) then
        return <0,0,1,y1,ccs[2][1],0>;
    end if;

    z0  := ccs[2][1] + v0;
    t1  := u0*z0;
    z1  := ccs[2][4] - t1;
    t2  := u0*(z1 + z1 - t1);
    sp0 := ccs[1][2] + f4*v0 - t2 - t2;

    if IsZero(sp0) then
        if IsZero(z0) then
            return <0,0,1,y1,ccs[2][1],2>;
        end if;

        w1   := z0^-1;
        upp0 := z1*w1 - u0;

        return <0,1,upp0,y1,-v0,1>;
    end if;

    w1   := (d*sp0)^-1;
    w2   := d^2*w1;
    s0   := w1*sp0^2;
    upp1 := z0*w2 - u0;
    upp0 := y1 + z1*w2 - s0/2 - u0*upp1;
    vpp1 := y1 - s0;
    vpp0 := -v0 - s0*u0;

    return <1,upp1,upp0,vpp1,vpp0,0>;
    
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg2DBL():         
// Input: u1,u0,v1,v0 : Mumford coordinates for divisor D =
//                      <x^2 + u1x + u0, v1x + v0,n> in reduced basis where n=0
//                ccs : Table of curve constants and precomputations, see 
//                      Precompuation in nch23_splitG2_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dp ~ D + D.               
// Description: Explicit computation for doubling a degree 2 divisor.                 
///////////////////////////////////////////////////////////////////////////////
Deg2DBL:= function(u1,u0,v1,v0,ccs)
    
       
    t0  := u1^2;
    u12 := u1 + u1;
    t1  := u0 - t0;
    t2  := t1 - v1;
    m3  := t2 + t2; 
    m4  := v0 + v0 + u0*u12;
    m1  := m4 + m3*u1;
    m2  := -m3*u0;
    d   := m4*m1 - m2*m3;                            

    if IsZero(d) then
        f2:= ccs[1][3];  
        y0:= ccs[2][1]; 
        y1:= ccs[2][2];

        if IsZero(m3) then
            return <0,0,1,y1,y0,1>;
        end if;

        b1 := -m3^-1;
        t2 := y1 - v1;
        t3 := y0 - v0;
        k2 := t2 + t2;
        k1 := t3 + t3 - u1*k2;
        k0 := f2 - v1^2 - u0*k2 - u1*k1;
        u0 := u1 - m4*b1;
        s0 := b1*(k0 - u0*(k1 - u0*k2));
        upp1 := u0 + u0;
        upp0 := u0^2;
        vpp1 := v1 + s0;
        vpp0 := v0 + u0*s0;

        return <1,upp1,upp0,vpp1,vpp0,0>;
    end if;

    z0  := ccs[2][1] - v0;
    z1  := ccs[2][2] - v1;
    r1  := z0 - z1*u12;
    r0  := ccs[2][6] - (v1^2)/2 - u1*z0 - z1*(t1 + u0);
    sp0 := r0*m1 + r1*m2;
    sp1 := r0*m3 + r1*m4;
    D   := d^2;

    if IsZero(sp1) then
        y1:= ccs[2][2];
        y0:= ccs[2][1];

        if IsZero(sp0) then
            return <0,0,1,y1,y0,0>;
        end if;

        w2 := (d*sp0)^-1;
        s0 := sp0^2*w2;
        w3 := D*w2;
        t1   := z1/2;
        upp0 := w3*((s0 - u1)*s0 - t1);
        t0   := upp0*(s0*u1 + t1 + v1 - upp0*(s0 - upp0)) - s0*u0;
        vpp0 := t0 + t0 - v0;
        
        return <0, 1, upp0, y1, vpp0,0>;
    end if;

    w1  := sp1*(sp1 + d); 
    
    if IsZero(w1) then
        y1:= ccs[2][2];
        y0:= ccs[2][1]; 
        w0 := -sp0 - sp1*u1;

        if IsZero(w0) then
            return <0,0,1,y1,y0,2>;
        end if;

        w2   := (d*w0)^-1;
        s0   := sp0*w0*w2;
        w3   := D*w2;
        w4   := s0 - u1;
        t3   := z1/2;
        upp0 := w3*(w4*s0 + t2 - t3);
        t0   := upp0*(t3 + v1 + s0*u1 - u0 - upp0*w4) - s0*u0;
        vpp0 := t0 + t0 - v0;

        return <0, 1, upp0, y1, vpp0,1>;       
    end if;

    w2 := (d*w1)^-1;
    w3 := w2*w1;
    w4 := w2*d*D;
    s0 := w3*sp0;
    s1 := w3*sp1;
    t3 := s0 - u1;
    upp1 := w4*((s0 + t3)*s1 + s0);
    upp0 := w4*(t3*s0 - t2*s1 - z1/2);
    z0 := upp0 - u0;
    z1 := upp1 - u1;
    w0 := z0*s0;    
    w1 := z1*s1;    
    w2 := w1 + upp1;
    t1 := (s0 + s1)*(z0 + z1) - w0 - w1 + upp0 - w2*upp1;
    t0 := w0 - w2*upp0;
    vpp1 := t1 + t1 - v1;
    vpp0 := t0 + t0 - v0;

    return <1,upp1, upp0, vpp1, vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// DBL():
// Input: u,v,n: Polynomials u,v and number n representing an arbirtrary
//               divisor D over a split model HEC.
//          ccs: Table of curve constants and precomputations, see 
//               Precompuation in splitG2UTL.mag.
//
// Output: Mumford coordinates upp2,upp1,upp0,vpp1,vpp0 for 2*D               
// Description: Explicit computation for doubling any divisor in reduced basis.    
//              Handles all cases explicitly.               
///////////////////////////////////////////////////////////////////////////////
DBL:= function(d,ccs)
    if IsOne(d[1]) then
        return Deg2DBL(d[2],d[3],d[4],d[5],ccs);
    elif IsOne(d[2]) then
        if IsZero(d[6]) then
            return Deg1DBLUP(d[3],d[5],ccs);
        else    
            return Deg1DBLDWN(d[3],d[5],ccs);
        end if;
    else
        if d[6] eq 1 then
            return <0,0,1,ccs[2][2],ccs[2][1],1>;

        elif IsZero(d[6]) then
            return <ccs[3][3],ccs[3][2],ccs[3][1],ccs[2][2],ccs[2][1],2-ccs[3][4]>;

        else
            return <ccs[3][3],ccs[3][2],ccs[3][1],ccs[3][6],ccs[3][5],0>;
        end if;
    end if;
end function;

