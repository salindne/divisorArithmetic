SetAutoColumns(false);
SetColumns(1000);


//load "formulas/splitFormulas/nch2_splitG2_UTL.mag";
//load "formulas/splitFormulas/nch2_splitG2_ADD.mag";
//load "formulas/splitFormulas/nch2_splitG2_DBL.mag";


load "reduced_basis_arithmetic.mag";
load "formulas/previousBest/geo_2011.mag";
load "formulas/previousBest/geo_noTrade_2011.mag";
load "formulas/previousBest/lange_2005.mag";
load "formulas/previousBest/inf_2010.mag";
load "formulas/ramFormulas/nch2_ramifiedG2_ADD.mag";
load "formulas/ramFormulas/nch2_ramifiedG2_DBL.mag";
load "formulas/ramFormulas/nch2_ramifiedG2_genLange.mag";
load "formulas/ramFormulas/nch2_ramifiedG2_onlyFreq.mag";
load "formulas/splitFormulas/nch2_splitG2_ADD.mag";
load "formulas/splitFormulas/nch2_splitG2_DBL.mag";
load "formulas/splitFormulas/nch2_splitG2_UTL.mag";
load "formulas/splitFormulas/nch2_splitG2_ourInf.mag";

load "nch2_g2_timing_utilities.mag";
load "../../1024bit_primes.mag";

//SetOutputFile("outg2_complete.raw");
//SetNthreads(4);
length := 5000;
trials := 1;           //Max 3030  
BIT_TABLE := [<2, 1.0>, <4, 0.76>,  <8, 0.72>, <16, 0.72>, <32, 0.42>, <64, 0.38>, <128, 0.333>, <256, 0.27>, <512, 0.18>, <1024, 0.09>];

"# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
"# Raw timings for genus 2 compared to previous best";
"# Random generator seed and step: ", GetSeed();
"# Average over: ", trials;
"# Naming convention: first digit: O= Ours, P= Previous, M= Magma";
"#                   second digit: X= complete, L= Lange, G= Costello-Lauter, N= Costello-Lauter No Trades, E= Erickson, C= Cantor, G= Magma";
"#                    third digit: A= addition, D= doubling";
"#                   fourth digit: R= Ramified, S= Split";
"# fld_bit/length\t  OXAR\t  OLAR\t  PLAR\t  OGAR\t  PNAR\t  PGAR\t  CANR\t  MGAR\t  OXDR\t  OLDR\t  PLDR\t  OGDR\t  PNDR\t  PGDR\t  PCDR\t  MGDR\t  OXAS\t  OEAS\t  PEAS\t  PCAS\t  MGAS\t  OXDS\t  OEDS\t  PEDS\t  PCDS\t  MGDS";
"# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";

//Procedures
run_tests := function (fq, length) 
    //RAMIFIED
    FF:=GF(fq);
    R<x>:=PolynomialRing(FF);
    rf := RandomCurve_nch2_g2_RAM(fq);
    C := HyperellipticCurve(rf);
    J := Jacobian(C);

    //Generate Random Divisors
    mD1 := Random(J);
    while IsZero(mD1)  do
        mD1 := Random(J);
    end while;
    pD1 := Magma_to_poly_RAM(mD1,rf);
    eD1 := <Coefficient(mD1[1],2), Coefficient(mD1[1],1),Coefficient(mD1[1],0), Coefficient(mD1[2],1), Coefficient(mD1[2],0)>;
    gD1 := <eD1[1],eD1[2],eD1[3],eD1[4],eD1[5],eD1[2]^2,eD1[2]*eD1[3]>;
    
    mD2 := Random(J);
    while IsZero(mD2)  do
        mD2 := Random(J);
    end while;
    pD2 := Magma_to_poly_RAM(mD2,rf);
    eD2 := <Coefficient(mD2[1],2), Coefficient(mD2[1],1),Coefficient(mD2[1],0), Coefficient(mD2[2],1), Coefficient(mD2[2],0)>;
    gD2 := <eD2[1],eD2[2],eD2[3],eD2[4],eD2[5],eD2[2]^2,eD2[2]*eD2[3]>;

    //ADD
    //Time using fibonacci style addition chains
    fex_RAM := Cputime();
    exDr := Fibonacci_expl_RAM(eD1,eD2,rf,length);
    fex_RAM := Cputime(fex_RAM);

    fel_RAM := Cputime();
    elDr := Fibonacci_genLange_RAM(eD1,eD2,rf,length);
    fel_RAM := Cputime(fel_RAM);

    fla_RAM := Cputime();
    laDr := Fibonacci_lange_RAM(eD1,eD2,rf,length);
    fla_RAM := Cputime(fla_RAM);

    fof_RAM := Cputime();
    ofDr := Fibonacci_onlyFreq_RAM(eD1,eD2,rf,length);
    fof_RAM := Cputime(fof_RAM);

    fclnt_RAM := Cputime();
    clntDr := Fibonacci_coslau_nt_RAM(gD1,gD2,rf,length);
    fclnt_RAM := Cputime(fclnt_RAM);

    fcl_RAM := Cputime();
    clDr := Fibonacci_coslau_RAM(gD1,gD2,rf,length);
    fcl_RAM := Cputime(fcl_RAM);

    fca_RAM := Cputime();
    caDr := Fibonacci_polyCantor_RAM(pD1,pD2,rf,length);
    fca_RAM := Cputime(fca_RAM);

    fm_RAM := Cputime();
    mDr := Fibonacci_magma_RAM(mD1,mD2,length);
    fm_RAM := Cputime(fm_RAM);

    
    
    //Confirm equality of results
    clDr  := <clDr[1],clDr[2],clDr[3],clDr[4],clDr[5]>;
    clntDr:= <clntDr[1],clntDr[2],clntDr[3],clntDr[4],clntDr[5]>;
    mDr   := <Coefficient(R!mDr[1],2), Coefficient(R!mDr[1],1),Coefficient(R!mDr[1],0), Coefficient(R!mDr[2],1), Coefficient(R!mDr[2],0)>;
    caDr  := <Coefficient(caDr[1],2), Coefficient(caDr[1],1),Coefficient(caDr[1],0), Coefficient(caDr[2],1), Coefficient(caDr[2],0)>;
    
    assert exDr eq mDr and 
           elDr eq mDr and 
           laDr eq mDr and 
           ofDr eq mDr and 
           clDr eq mDr and
           caDr eq mDr and
           clntDr eq mDr;

    
    //DBL
    //Time using double chains
    dex_RAM := Cputime();
    exDr := DoubleChain_expl_RAM(eD1,rf,length);
    dex_RAM := Cputime(dex_RAM);

    del_RAM := Cputime();
    elDr := DoubleChain_genLange_RAM(eD1,rf,length);
    del_RAM := Cputime(del_RAM);

    dla_RAM := Cputime();
    laDr := DoubleChain_lange_RAM(eD1,rf,length);
    dla_RAM := Cputime(dla_RAM);

    dof_RAM := Cputime();
    ofDr := DoubleChain_onlyFreq_RAM(eD1,rf,length);
    dof_RAM := Cputime(dof_RAM);

    dclnt_RAM := Cputime();
    clntDr := DoubleChain_coslau_nt_RAM(gD1,rf,length);
    dclnt_RAM := Cputime(dclnt_RAM);

    dcl_RAM := Cputime();
    clDr := DoubleChain_coslau_RAM(gD1,rf,length);
    dcl_RAM := Cputime(dcl_RAM);

    dca_RAM := Cputime();
    caDr := DoubleChain_polyCantor_RAM(pD1,rf,length);
    dca_RAM := Cputime(dca_RAM);

    dm_RAM := Cputime();
    mDr := DoubleChain_magma_RAM(mD1,length);
    dm_RAM := Cputime(dm_RAM);

    //Confirm equality of results
    clDr  := <clDr[1],clDr[2],clDr[3],clDr[4],clDr[5]>;
    clntDr:= <clntDr[1],clntDr[2],clntDr[3],clntDr[4],clntDr[5]>;
    mDr   := <Coefficient(R!mDr[1],2), Coefficient(R!mDr[1],1),Coefficient(R!mDr[1],0), Coefficient(R!mDr[2],1), Coefficient(R!mDr[2],0)>;
    caDr  := <Coefficient(caDr[1],2), Coefficient(caDr[1],1),Coefficient(caDr[1],0), Coefficient(caDr[2],1), Coefficient(caDr[2],0)>;

    assert exDr eq mDr and 
           elDr eq mDr and 
           laDr eq mDr and 
           ofDr eq mDr and 
           clDr eq mDr and
           caDr eq mDr and
           clntDr eq mDr;
    





    //SPLIT
    sf := RandomCurve_nch2_g2_SPLIT(fq);
    Vp := ComputeVpl(sf,2);
    C := HyperellipticCurve(sf);
    J := Jacobian(C);
    ccs:= Precompute(sf,fq); 
    ccs_inf := Precompute_inf_SPLIT(sf,fq);
    ccs_ourInf := Precompute_ourInf(sf,fq);


    //Generate Random Divisors not the neutral element.
    mD1 := Random(J);
    while IsZero(mD1) do
        mD1 := Random(J);
    end while;
    pD1 := Magma_to_poly_SPLIT(mD1,sf,Vp);
    eD1 := <Coefficient(pD1[1],2), Coefficient(pD1[1],1),Coefficient(pD1[1],0), Coefficient(pD1[2],1), Coefficient(pD1[2],0), pD1[4]>;

    mD2 := Random(J);
    while IsZero(mD2) do
        mD2 := Random(J);
    end while;
    pD2 := Magma_to_poly_SPLIT(mD2,sf,Vp);
    eD2 := <Coefficient(pD2[1],2), Coefficient(pD2[1],1),Coefficient(pD2[1],0), Coefficient(pD2[2],1), Coefficient(pD2[2],0), pD2[4]>;


    //ADD
    //Time using fibonacci style addition chains
    fex_SPLIT := Cputime();
    exDs := Fibonacci_expl_SPLIT(eD1,eD2,ccs,length);
    fex_SPLIT := Cputime(fex_SPLIT);

    feo_SPLIT := Cputime();
    eoDs := Fibonacci_ourInf_SPLIT(eD1,eD2,ccs_ourInf,length);
    feo_SPLIT := Cputime(feo_SPLIT);

    fei_SPLIT := Cputime();
    eiDs := Fibonacci_inf_SPLIT(eD1,eD2,ccs_inf,length);
    fei_SPLIT := Cputime(fei_SPLIT);

    fca_SPLIT := Cputime();
    caDs := Fibonacci_polyCantor_SPLIT(pD1,pD2,sf,Vp,length);
    fca_SPLIT := Cputime(fca_SPLIT);

    fm_SPLIT := Cputime();
    mDs := Fibonacci_magma_SPLIT(mD1,mD2,length);
    fm_SPLIT := Cputime(fm_SPLIT);

    //Confirm equality of results
    exDs := Explicit_to_poly_SPLIT(exDs,sf,Vp);
    eoDs := Explicit_to_poly_SPLIT(eoDs,sf,Vp);
    eiDs := Explicit_to_poly_SPLIT(eiDs,sf,Vp);
    mDs  := Magma_to_poly_SPLIT(mDs,sf,Vp);
    assert exDs eq mDs and 
           eoDs eq mDs and
           eiDs eq mDs and
           caDs eq mDs;

    //DBL
    //Time using double chains
    dex_SPLIT := Cputime();
    exDs := DoubleChain_expl_SPLIT(eD1,ccs,length);
    dex_SPLIT := Cputime(dex_SPLIT);

    deo_SPLIT := Cputime();
    eoDs := DoubleChain_ourInf_SPLIT(eD1,ccs_ourInf,length);
    deo_SPLIT := Cputime(deo_SPLIT);

    dei_SPLIT := Cputime();
    eiDs := DoubleChain_inf_SPLIT(eD1,ccs_inf,length);
    dei_SPLIT := Cputime(dei_SPLIT);

    dca_SPLIT := Cputime();
    caDs := DoubleChain_polyCantor_SPLIT(pD1,sf,Vp,length);
    dca_SPLIT := Cputime(dca_SPLIT);

    dm_SPLIT := Cputime();
    mDs := DoubleChain_magma_SPLIT(mD1,length);
    dm_SPLIT := Cputime(dm_SPLIT);

    //Confirm equality of results
    exDs := Explicit_to_poly_SPLIT(exDs,sf,Vp);
    eoDs := Explicit_to_poly_SPLIT(eoDs,sf,Vp);
    eiDs := Explicit_to_poly_SPLIT(eiDs,sf,Vp);
    mDs  := Magma_to_poly_SPLIT(mDs,sf,Vp);
    assert exDs eq mDs and 
           eoDs eq mDs and
           eiDs eq mDs and
           caDs eq mDs;
    

    return [[fex_RAM, fel_RAM, fla_RAM, fof_RAM, fclnt_RAM, fcl_RAM, fca_RAM, fm_RAM,
             dex_RAM, del_RAM, dla_RAM, dof_RAM, dclnt_RAM, dcl_RAM, dca_RAM, dm_RAM],
            [fex_SPLIT, feo_SPLIT, fei_SPLIT, fca_SPLIT, fm_SPLIT,
             dex_SPLIT, deo_SPLIT, dei_SPLIT, dca_SPLIT, dm_SPLIT]];
end function;


//MAIN
for bit_tup in BIT_TABLE do
    bit := bit_tup[1];
    len := Floor(length*bit_tup[2]);
    fq := 2^bit;
 
    total_OXA_RAM := 0.0;
    total_OLA_RAM := 0.0;
    total_PLA_RAM := 0.0; 
    total_OGA_RAM := 0.0;
    total_PNA_RAM := 0.0;
    total_PGA_RAM := 0.0;
    total_PCA_RAM := 0.0;
    total_MGA_RAM := 0.0;

    total_OXD_RAM := 0.0;
    total_OLD_RAM := 0.0;
    total_PLD_RAM := 0.0;
    total_OGD_RAM := 0.0;
    total_PND_RAM := 0.0;
    total_PGD_RAM := 0.0;
    total_PCD_RAM := 0.0;
    total_MGD_RAM := 0.0;

    total_OXA_SPLIT := 0.0;
    total_OEA_SPLIT := 0.0;
    total_PEA_SPLIT := 0.0;
    total_PCA_SPLIT := 0.0;
    total_MGA_SPLIT := 0.0;

    total_OXD_SPLIT := 0.0;
    total_OED_SPLIT := 0.0;    
    total_PED_SPLIT := 0.0;
    total_PCD_SPLIT := 0.0;
    total_MGD_SPLIT := 0.0;

    i := 0;
    while i lt trials do
        i := i+1;
        if bit eq 2 then
            fq := 3;
        elif bit eq 4 then
            fq := Random([11,13]);
        elif bit eq 8 then
            fq := Random([131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,
                        191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251]);
        elif bit eq 1024 then
            fq := Random(PRIMES_1024BIT);
        else        //There are 3030 16 bit primes
            fq := PreviousPrime(fq);
        end if;

        results := run_tests(fq,len);  
        total_OXA_RAM := total_OXA_RAM + results[1][1];
        total_OLA_RAM := total_OLA_RAM + results[1][2];
        total_PLA_RAM := total_PLA_RAM + results[1][3];
        total_OGA_RAM := total_OGA_RAM + results[1][4];
        total_PNA_RAM := total_PNA_RAM + results[1][5];
        total_PGA_RAM := total_PGA_RAM + results[1][6];
        total_PCA_RAM := total_PCA_RAM + results[1][7];
        total_MGA_RAM := total_MGA_RAM + results[1][8];

        total_OXD_RAM := total_OXD_RAM + results[1][9];
        total_OLD_RAM := total_OLD_RAM + results[1][10];
        total_PLD_RAM := total_PLD_RAM + results[1][11];
        total_OGD_RAM := total_OGD_RAM + results[1][12];
        total_PND_RAM := total_PND_RAM + results[1][13];
        total_PGD_RAM := total_PGD_RAM + results[1][14];
        total_PCD_RAM := total_PCD_RAM + results[1][15];
        total_MGD_RAM := total_MGD_RAM + results[1][16];


        total_OXA_SPLIT := total_OXA_SPLIT + results[2][1];
        total_OEA_SPLIT := total_OEA_SPLIT + results[2][2];
        total_PEA_SPLIT := total_PEA_SPLIT + results[2][3];
        total_PCA_SPLIT := total_PCA_SPLIT + results[2][4];
        total_MGA_SPLIT := total_MGA_SPLIT + results[2][5];

        total_OXD_SPLIT := total_OXD_SPLIT + results[2][6];
        total_OED_SPLIT := total_OED_SPLIT + results[2][7];
        total_PED_SPLIT := total_PED_SPLIT + results[2][8];
        total_PCD_SPLIT := total_PCD_SPLIT + results[2][9];
        total_MGD_SPLIT := total_MGD_SPLIT + results[2][10];

    end while;
        
    avg_OXA_RAM := total_OXA_RAM/trials;
    avg_OLA_RAM := total_OLA_RAM/trials;
    avg_PLA_RAM := total_PLA_RAM/trials;
    avg_OGA_RAM := total_OGA_RAM/trials;
    avg_PNA_RAM := total_PNA_RAM/trials;
    avg_PGA_RAM := total_PGA_RAM/trials;
    avg_PCA_RAM := total_PCA_RAM/trials;
    avg_MGA_RAM := total_MGA_RAM/trials;

    avg_OXD_RAM := total_OXD_RAM/trials;
    avg_OLD_RAM := total_OLD_RAM/trials;
    avg_PLD_RAM := total_PLD_RAM/trials;
    avg_OGD_RAM := total_OGD_RAM/trials;
    avg_PND_RAM := total_PND_RAM/trials;
    avg_PGD_RAM := total_PGD_RAM/trials;
    avg_PCD_RAM := total_PCD_RAM/trials;
    avg_MGD_RAM := total_MGD_RAM/trials;

    avg_OXA_SPLIT := total_OXA_SPLIT/trials;
    avg_OEA_SPLIT := total_OEA_SPLIT/trials;
    avg_PEA_SPLIT := total_PEA_SPLIT/trials;
    avg_PCA_SPLIT := total_PCA_SPLIT/trials;
    avg_MGA_SPLIT := total_MGA_SPLIT/trials;

    avg_OXD_SPLIT := total_OXD_SPLIT/trials;
    avg_OED_SPLIT := total_OED_SPLIT/trials;
    avg_PED_SPLIT := total_PED_SPLIT/trials;
    avg_PCD_SPLIT := total_PCD_SPLIT/trials;
    avg_MGD_SPLIT := total_MGD_SPLIT/trials;

    if len gt 99999 then
        tab := "\t";
    else
        tab := "\t\t";
    end if;
 
    "#",bit, "\t", len, tab, avg_OXA_RAM,"\t", avg_OLA_RAM,"\t", avg_PLA_RAM,"\t", avg_OGA_RAM,"\t", avg_PNA_RAM, "\t", avg_PGA_RAM, "\t", avg_PCA_RAM, "\t", avg_MGA_RAM,
                       "\t", avg_OXD_RAM,"\t", avg_OLD_RAM,"\t", avg_PLD_RAM,"\t", avg_OGD_RAM,"\t", avg_PND_RAM, "\t", avg_PGD_RAM, "\t", avg_PCD_RAM, "\t", avg_MGD_RAM,
                       "\t", avg_OXA_SPLIT, "\t", avg_OEA_SPLIT, "\t", avg_PEA_SPLIT, "\t", avg_PCA_SPLIT, "\t", avg_MGA_SPLIT,
                       "\t", avg_OXD_SPLIT, "\t", avg_OED_SPLIT, "\t", avg_PED_SPLIT, "\t", avg_PCD_SPLIT, "\t", avg_MGD_SPLIT;
end for;
exit;