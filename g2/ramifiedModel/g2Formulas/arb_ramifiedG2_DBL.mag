///////////////////////////////////////////////////////////////////////////////
// Author: Sebastian Lindner,2019                                                          
//                                                   
// Description: Explicit divisor doubling formulas for the 4 coordinate         
//              Mumford representation over arbitrary fields where: 
//                             
//              h(x) = h2*x^2 + h1*x + h0 (h2 in {0,1}) and             
//              f(x) = x^5 + f4x^4 + f3x^3 + f2x^2 + f1x + f0           
//                                                                      
///////////////////////////////////////////////////////////////////////////////

//Must keep next two lines in this format for latex conversion
//Constant: f4,f3,f2,f1,f0,h1,h0
//Ignore: h2

///////////////////////////////////////////////////////////////////////////////
// Deg1DBL():         
// Input: u0, v0:         Mumford cooridnates for degree 1 divisor D
//        f4,f3,f2,f1,     
//        h2,h1,h0:       Curve constants of hyperelliptic polynomials f,h.
//
// Output: Mumford coordinates upp2, upp1, upp0, vpp1, vpp0 for D2 = D + D           
//   
// Description: Computes explicit formula for the doubling of a degree one
//              divisor.                  
///////////////////////////////////////////////////////////////////////////////
Deg1DBL:= function(u0,v0,f4,f3,f2,f1,h2,h1,h0)
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := x^5 + f4*x^4 + f3*x^3 + f2*x^2 + f1*x + f0;
    h := h2*x^2 + h1*x + h0;
    u := x + u0;
    v := R!v0;
    Q := quo<R | u>;

    //Formulation
    d := (v + v + h) mod u;    
    if IsZero(d) then
        return 0,0,1,0,0;
    end if;
    b1 := FF!d^-1;
    upp := u^2;
    k := ExactQuotient(f - v*(v + h),u);
    s := b1*k mod u;
    vpp := v + u*s mod upp;

    return Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,1),Coeff(vpp,0);
    */ //endIGNORE
    
    //d := (v + v + h) mod u; 
    upp0 := u0^2;
    d    := v0 + v0 + h2*upp0 - h1*u0 + h0;

    if IsZero(d) then
        
        if DBL_DEBUG then "DBL0"; end if;
        return 0,0,1,0,0;
    end if;//d
    //b1 := FF!d^-1;
    w1   := d^-1;

    //upp := u^2;
    upp1 := u0 + u0;

    //k := ExactQuotient(f - v*(v + h),u);
    //s := b1*k mod u;
    //vpp := v + u*s mod upp;
    t1   := upp0 + f3;
    t2   := t1 - f4*upp1 + upp0;
    vpp1 := w1*(upp0*(t2 + t2 + t1) - f2*upp1 + f1 - v0*(h1 - h2*upp1));
    vpp0 := vpp1*u0 + v0;

    if DBL_DEBUG then "DBL1"; end if;
    return 1, upp1, upp0, vpp1, vpp0;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg2DBL():         
// Input: u0, v0:         Mumford cooridnates for degree 2 divisor D
//        f4,f3,f2,f1,     
//        h2,h1,h0:       Curve constants of hyperelliptic polynomials f,h.
//
// Output: Mumford coordinates upp2, upp1, upp0, vpp1, vpp0 for D2 = D + D           
//   
// Description: Computes explicit formula for the doubling of a degree two
//              divisor.                  
///////////////////////////////////////////////////////////////////////////////
Deg2DBL:= function(u1,u0,v1,v0,f4,f3,f2,f1,h2,h1,h0)
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := x^5 + f4*x^4 + f3*x^3 + f2*x^2 + f1*x + f0;
    h := h2*x^2 + h1*x + h0;
    u := x^2 + u1*x + u0;
    v := v1*x + v0;
    Q := quo<R | u>;
    
    d := Resultant(u,v+v+h); // computed with 2x2 system
    if IsZero(d) then
        dw1 := (v+v+h) mod u; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up);
        if IsZero(dw1) then 
            return 0,0,1,0,0;
        end if;
        b1 := LeadingCoefficient(dw1)^-1;
        k := ExactQuotient(f - v*(v + h),u);
        u := ExactQuotient(u,dw1*b1);
        s := b1*k mod u;
        upp := u^2;
        vpp := (v + u*s) mod upp;
        return Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,1),Coeff(vpp,0);
    end if;
    dw1 := (v+v+h) mod u;
    b1 := R!(Q!dw1^-1);
    k := ExactQuotient(f - v*(v + h),u);
    s := b1*k mod u;   //2x2 system
    M2    := ExactQuotient(s*(v + v + h) - k, u);
    upp   := -s^2 - M2;
    upp   := upp/LeadingCoefficient(upp);
    vpp   := (-u*s - v - h) mod upp;
    
    return Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,1),Coeff(vpp,0);
    */ //endIGNORE

    //d := Resultant(u,v+v+h) computed with 2x2 system
    vh1 := v1 + h1;
    vh0 := v0 + h0;
    m3  := h2*u1 - v1 - vh1;
    m4  := v0 + vh0 - h2*u0;
    m1  := m4 + m3*u1;
    m2  := -m3*u0;
    d   := m4*m1 - m2*m3;

    //Test for special case
    if IsZero(d) then
        //dw1 := (v+v+h) mod u; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up);
        // dw1 = -m3x + m4;
        if IsZero(m3) then 
            
            if DBL_DEBUG then "DBL2"; end if;
            return 0,0,1,0,0;
        end if;//m3

        //b1 := LeadingCoefficient(dw1)^-1;
        b1 := -m3^-1;

        //k := ExactQuotient(f - v*(v + h),u);
        k2 := f4 - u1;
        k1 := f3 - v1*h2 - u0 - u1*k2;
        k0 := f2 - v1*vh1 - v0*h2 - u0*k2 - u1*k1;

        //u := ExactQuotient(u,dw1*b1);
        //s := b1*k mod u;
        u0 := u1 - m4*b1;
        s0 := b1*(k0 - u0*(k1 - u0*(k2 - u0)));

        //upp := u^2;
        upp1 := u0 + u0;
        upp0 := u0^2;

        //vpp := (v + u*s) mod upp;
        vpp1 := v1 + s0;
        vpp0 := v0 + u0*s0;

        if DBL_DEBUG then "DBL3"; end if;
        return 1,upp1,upp0,vpp1,vpp0;
    end if;//d

    t0 := u1^2;
    t1 := f3 + t0 - h2*v1;
    t2 := u0 + u0;
    t3 := f4*u1;
    t4 := f4*u0;
    t5 := t0 - t3;
    t6 := t1 - t2;
    r1 := t5 + t5 + t6;
    r0 := u1*(t2 - t6 + t3) + f2 - v1*vh1 - t4 - t4 - h2*v0;

    sp0 := r0*m1 + r1*m2;
    sp1 := r0*m3 + r1*m4;

    if IsZero(sp1) then
        w1 := d^-1;
        s0 := sp0*w1;
        upp0 := f4 - s0^2 - s0*h2 - u1 - u1;
        t1   := s0*(u1 - upp0) - h2^2*upp0 + vh1;
        vpp0 := upp0*t1 - vh0 - s0*u0;
 
        if DBL_DEBUG then "DBL4"; end if;
        return 0, 1, upp0, 0, vpp0;
    end if;//sp1
 
    w1   := (d*sp1)^-1;
    w2   := w1*d;
    w3   := w2*d;
    w4   := w3^2;
    s1   := w1*(sp1^2);
    spp0 := sp0*w2;

    t2   := spp0 - w4 + h2*w3;
    upp0 := spp0^2 + w3*(h2*(spp0 - u1) + v1 + vh1) + w4*(u1 + u1 - f4);
    upp1 := spp0 + t2;

    t0   := upp0 - u0;
    t1   := u1 - upp1;
    vpp1 := s1*(t1*t2 + t0) - vh1 + h2*upp1;
    vpp0 := s1*(spp0*t0 + upp0*t1) - vh0 + h2*upp0;

    if DBL_DEBUG then "DBL5"; end if;
    return 1,upp1, upp0, vpp1, vpp0;
end function;


///////////////////////////////////////////////////////////////////////////////
// DBL():         
// Input: u, v :  Polynomial Mumford cooridnates for any divisor D
//        f,h:    Hyperelliptic polynomials f,h.
//
// Output: Mumford coordinates upp2, upp1, upp0, vpp1, vpp0 for D2 = D + D
//   
// Description: Computes explicit formula for the doubling of divisor D.
///////////////////////////////////////////////////////////////////////////////
DBL:= function(u,v,f,h)//startIGNORE
    u2:= Coeff(u,2); u1:= Coeff(u,1); u0:= Coeff(u,0);
    v1:= Coeff(v,1); v0:= Coeff(v,0);
    f4:= Coeff(f,4); f3:= Coeff(f,3); f2:= Coeff(f,2); f1:= Coeff(f,1); //f0:= Coeff(f,0);
    h2:= Coeff(h,2); h1:= Coeff(h,1); h0:= Coeff(h,0);
    
    if IsOne(u2) then
        return Deg2DBL(u1,u0,v1,v0,f4,f3,f2,f1,h2,h1,h0);
    elif IsOne(u1) then
        return Deg1DBL(u0,v0,f4,f3,f2,f1,h2,h1,h0);
    else
        if DBL_DEBUG then "DBL6"; end if;
        return 0,0,1,0,0;
    end if;
end function;//endIGNORE