///////////////////////////////////////////////////////////////////////////////
// Author: Sebastian Lindner, 2019                                                        
//                                                   
// Description: Genus 2 divisor utility formulas for the 4 coordinate Mumford         
//              representation in reduced basis over arbitrary fields where:                
//              h(x) = x^3 + h1*x + h0 and             
//              f(x) = f6*x^6 + f2x^2 + f1x + f0           
//                                                                      
///////////////////////////////////////////////////////////////////////////////

//Must keep next two lines in this format for latex conversion
//Constant: f6,f5,f4,f3,f2,f1,f0,h3,h2,h1,h0,y3,y2,y1,y0,d4,d3,d2,d1,d0,c5,c4,c3,c2,c1,c0

///////////////////////////////////////////////////////////////////////////////
// Precompute():
// Input: f,h: hyperelliptic polynomials describing a split mdoel genus 2 HEC.
//          q: field parameter
//
// Output: Set of sets, where first two subsets have the coefficients of f and 
//         h respectively, the third subset has coefficeints of the unique 
//         monic V polynomial of degree 3 for which deg(f-h*V-V^2) <= 2, the 
//         fourth and fifth subset have precompuations used by the other 
//         operations, and the sixth subset carreis precomputed values for
//         adjusting degree 0 divisors.
///////////////////////////////////////////////////////////////////////////////
Precompute := function(f,h,q)
    f0:= Coeff(f,0); 
    f1:= Coeff(f,1); 
    f2:= Coeff(f,2); 
    f3:= Coeff(f,3); 
    f4:= Coeff(f,4); 
    f5:= Coeff(f,5); 
    f6:= Coeff(f,6);
    h0:= Coeff(h,0); 
    h1:= Coeff(h,1); 
    h2:= Coeff(h,2); 
    h3:= Coeff(h,3);

    R<x>:=PolynomialRing(GF(q));
    // V3 is a solution of quadratic equation x^2 + h3*x - f6
    // We pick the second solution from the factorization.
    y3 := -Coeff(Factorization(x^2 + x - f6)[2][1],0);
    // Compute rest following page 8 of "Explicit formulas for real hyperelliptic
    // curves of genus 2 in affine representation" by Erickson, Jacobson, Stein.
    
    //c3:= 1;                                             
    //d5:= 1;

    //d4:= h1*y3;                                            
    //d3:= h0*y3;                                            
    
    //y2:= 0;
    y1 := h1*y3;  
    y0 := h0*y3;
    
    c0 := y0 + h0;                                               
    c1 := y1 + h1;                                               
    //c2:= 0;                                             
    //c4:= 1;                                               
    //c5:= h1;                                               
    
    //d2:= f2;                                    
    d1 := f2 + y1*c1;                    
    d0 := f1 + h0*y1;
    //d6 := 0                      

    //Used for adding and doubling when Deg(D) = 0
    // f - V*h - V^2
    //k2:= d1;
    k1 := d0 + y0*h1;
    k0 := f0 + y0*c0;   
    //adv1x + adv0 = V - (2V+h) mod adu2x^2+adu1x+adu0 for DWN
    if IsZero(d1) then
        if IsZero(k1) then
            au2   := 0;
            au1   := 0;
            au0   := 1;
            audeg := 0;
            adv1  := y1;
            adv0  := y0;

            if UTL_DEBUG then "UTL0"; end if;
            return [[f0,f1,f2,f6],[h0,h1],[y0,y1,y3],[d0,d1],[c0,c1],[au0,au1,au2,audeg,adv0,adv1]];
        end if;//k1
        w1    := k1^-1;
        au2   := 0;
        au1   := 1;
        au0   := k0*w1;
        audeg := 1;

        adv1:= y1;
        adv0:= c0 + au0*(h1 + au0^2);

        if UTL_DEBUG then "UTL1"; end if;
        return [[f0,f1,f2,f6],[h0,h1],[y0,y1,y3],[d0,d1],[c0,c1],[au0,au1,au2,audeg,adv0,adv1]];
    end if;//d1
    
    w1    := d1^-1;
    au2   := 1;
    au1   := k1*w1;
    au0   := k0*w1;
    audeg := 2;

    adv1 := c1 + au0 + au1^2;
    adv0 := c0 + au0*au1;

    if UTL_DEBUG then "UTL2"; end if;
    return [[f0,f1,f2,f6],[h0,h1],[y0,y1,y3],[d0,d1],[c0,c1],[au0,au1,au2,audeg,adv0,adv1]];
end function;

//-----------------------------------------------------------------------------
// RandomChar2G2SplitCurve(q)
//-----------------------------------------------------------------------------
// Input:       q: field parameter.
//              
// Return: Random(ish) hyperelliptic polynomials of curve with two points at
//         infinity f and h in GF(q)[x] where f is seperable of degree 2g+2 and 
//         polynomial h of degree <= g+1. h3=1 and h2=y2=f5=f4=f3=0.
//-----------------------------------------------------------------------------
RandomChar2G2SplitCurve := function(q)//startIGNORE
    assert IsPrimePower(q);
    F:=GF(q);
    R<x>:=PolynomialRing(F);
    while true do
        //Randomly generate f and h for genus g
        beta:= Random(F);
        f:= (beta^2 + beta)*x^6 + Random(F)*x^2 + Random(F)*x + Random(F);
        h:= x^3 + Random(F)*x + Random(F);

        //Check if f and h are hyperelliptic polynomials
        try
            C:=HyperellipticCurve(f,h);
            isHC:= true;
        catch e
            isHC:= false;
        end try;

        //If f and h are hyperelliptic polynomials, check to see if
        //the curve has two points at infinity and is genus g.
        if isHC then
            pointsAtInf:= PointsAtInfinity(C);
            if (# pointsAtInf eq 2) and (Degree(f) eq 6) then
                return f,h;
            end if;
        end if;
        
    end while;
end function;//endIGNORE