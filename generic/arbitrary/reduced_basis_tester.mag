
load "reduced_basis_utilities.mag";

run_RAMg2_tests := procedure(fq)
    //g2 RAM
    rf,rh := RandomCurve_RAM(2,fq,false);
    rD1 := RandomDivisor_RAM(rf,rh,2);
    rD2 := RandomDivisor_RAM(rf,rh,2);

    a := Fibonacci_Add_RAM(rD1,rD2,rf,rh,2,1);
    b := Fibonacci_g2_Nucomp_RAM(rD1,rD2,rf,rh,1);
    if a ne b then     
        "Fq    ", fq;
        "Genus ", 2;
        "ADD RAM";
        a;
        b;
        exit;
    end if;
    
    
    a := DoubleChain_Dbl_RAM(rD1,rf,rh,2,1);
    b := DoubleChain_g2_Nuduple_RAM(rD1,rf,rh,1);
    if a ne b then
        "Fq    ", fq;
        "Genus ", 2;
        "DBL RAM";    
        a;
        b;
        exit;
    end if;
end procedure;

run_RAMg3_tests := procedure(fq)
    //g3 RAM
    rf,rh := RandomCurve_RAM(3,fq,false);
    rD1 := RandomDivisor_RAM(rf,rh,3);
    rD2 := RandomDivisor_RAM(rf,rh,3);

    a := Fibonacci_Add_RAM(rD1,rD2,rf,rh,3,1);
    b := Fibonacci_g3_Nucomp_RAM(rD1,rD2,rf,rh,1);
    if a ne b then     
        "Fq    ", fq;
        "Genus ", 3;
        "ADD RAM";
        a;
        b;
        exit;
    end if;
    
    
    a := DoubleChain_Dbl_RAM(rD1,rf,rh,3,1);
    b := DoubleChain_g3_Nuduple_RAM(rD1,rf,rh,1);
    if a ne b then
        "Fq    ", fq;
        "Genus ", 3;
        "DBL RAM";    
        a;
        b;
        exit;
    end if;
end procedure;

run_SPLITg2POS_tests := procedure (fq) 

    //g2 SPLIT POS
    sf,sh := RandomCurve_SPLIT(2,fq,false);
    sV := ComputeVpl(sf,sh,2);
    sD1 := RandomDivisor_SPLIT_POS(sf,sh,sV,2);
    sD2 := RandomDivisor_SPLIT_POS(sf,sh,sV,2);
    
    a := Fibonacci_Add_SPLIT_POS(sD1,sD2,sf,sh,sV,2,1);
    b := Fibonacci_g2_Nucomp_SPLIT_POS(sD1,sD2,sf,sh,sV,1);
    if a ne b then
        "Fq    ", fq;
        "Genus ", 2;
        "ADD SPLIT POS";   
        a;
        b;
        exit;
    end if;
    
    a := DoubleChain_Dbl_SPLIT_POS(sD1,sf,sh,sV,2,1);
    b := DoubleChain_g2_Nuduple_SPLIT_POS(sD1,sf,sh,sV,1);
    if a ne b then
        "Fq    ", fq;
        "Genus ", 2;
        "DBL SPLIT POS";  
        a;
        b;
        exit;
    end if;

end procedure;


run_SPLITg3NEG_tests := procedure (fq) 
    //g3 SPLIT NEG
    sf,sh := RandomCurve_SPLIT(3,fq,false);
    sV := -ComputeVpl(sf,sh,3) - sh;;
    sD1 := RandomDivisor_SPLIT_NEG(sf,sh,sV,3);
    sD2 := RandomDivisor_SPLIT_NEG(sf,sh,sV,3);

    
    a := Fibonacci_Add_SPLIT_NEG(sD1,sD2,sf,sh,sV,3,1);
    b := Fibonacci_g3_Nucomp_SPLIT_NEG(sD1,sD2,sf,sh,sV,1);
    if a ne b then
        "Fq    ", fq;
        "Genus ", 3;
        "ADD SPLIT NEG";   
        a;
        b;
        exit;
    end if;
    
    a := DoubleChain_Dbl_SPLIT_NEG(sD1,sf,sh,sV,3,1);
    b := DoubleChain_g3_Nuduple_SPLIT_NEG(sD1,sf,sh,sV,1);
    if a ne b then
        "Fq    ", fq;
        "Genus ", 3;
        "DBL SPLIT NEG";  
        a;
        b;
        exit;
    end if;
    
end procedure;



run_tests := procedure (fq,g) 
    //RAMIFIED
    rf,rh := RandomCurve_RAM(g,fq,false);
    rD1 := RandomDivisor_RAM(rf,rh,g);
    rD2 := RandomDivisor_RAM(rf,rh,g);

    a := Fibonacci_Add_RAM(rD1,rD2,rf,rh,g,1);
    b := Fibonacci_Nucomp_RAM(rD1,rD2,rf,rh,g,1);
    if a ne b then     
        "Fq    ", fq;
        "Genus ", g;
        "ADD RAM";
        a;
        b;
        exit;
    end if;
    
    
    a := DoubleChain_Dbl_RAM(rD1,rf,rh,g,1);
    b := DoubleChain_Nuduple_RAM(rD1,rf,rh,g,1);
    if a ne b then
        "Fq    ", fq;
        "Genus ", g;
        "DBL RAM";    
        a;
        b;
        exit;
    end if;

    
    //SPLIT NEG
    sf,sh := RandomCurve_SPLIT(g,fq,false);
    sV := -ComputeVpl(sf,sh,g) - sh;;
    sD1 := RandomDivisor_SPLIT_NEG(sf,sh,sV,g);
    sD2 := RandomDivisor_SPLIT_NEG(sf,sh,sV,g);

    
    a := Fibonacci_Add_SPLIT_NEG(sD1,sD2,sf,sh,sV,g,1);
    b := Fibonacci_Nucomp_SPLIT_NEG(sD1,sD2,sf,sh,sV,g,1);
    if a ne b then
        "Fq    ", fq;
        "Genus ", g;
        "ADD SPLIT NEG";   
        a;
        b;
        exit;
    end if;
    
    a := DoubleChain_Dbl_SPLIT_NEG(sD1,sf,sh,sV,g,1);
    b := DoubleChain_Nuduple_SPLIT_NEG(sD1,sf,sh,sV,g,1);
    if a ne b then
        "Fq    ", fq;
        "Genus ", g;
        "DBL SPLIT NEG";  
        a;
        b;
        exit;
    end if;

    //SPLIT POS
    sf,sh := RandomCurve_SPLIT(g,fq,false);
    sV := ComputeVpl(sf,sh,g);
    sD1 := RandomDivisor_SPLIT_POS(sf,sh,sV,g);
    sD2 := RandomDivisor_SPLIT_POS(sf,sh,sV,g);
    
    a := Fibonacci_Add_SPLIT_POS(sD1,sD2,sf,sh,sV,g,1);
    b := Fibonacci_Nucomp_SPLIT_POS(sD1,sD2,sf,sh,sV,g,1);
    if a ne b then
        "Fq    ", fq;
        "Genus ", g;
        "ADD SPLIT POS";   
        a;
        b;
        exit;
    end if;
    
    a := DoubleChain_Dbl_SPLIT_POS(sD1,sf,sh,sV,g,1);
    b := DoubleChain_Nuduple_SPLIT_POS(sD1,sf,sh,sV,g,1);
    if a ne b then
        "Fq    ", fq;
        "Genus ", g;
        "DBL SPLIT POS";  
        a;
        b;
        exit;
    end if;
    
end procedure;

iter := 25;
i := 0;
while i lt iter do
    i := i + 1;
    for g in [2..30] do
        for exp in [2,4,8,16] do
            fq := 2^exp;
            //run_tests(fq,g);
            fq := NextPrime(fq);
            //run_tests(fq,g);
            //run_low_g_tests(fq);
            //run_RAMg3_tests(fq);
            //run_RAMg2_tests(fq);
            //run_SPLITg2POS_tests(fq);
            run_SPLITg3NEG_tests(fq);
        end for;
    end for;
end while;

    "SUCCESS.";

exit;