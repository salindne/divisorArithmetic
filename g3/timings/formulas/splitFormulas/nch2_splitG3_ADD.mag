///////////////////////////////////////////////////////////////////////////////
// Author: Sebastian Lindner, 2019                                                        
//                                                   
// Description: Genus 3 divisor addition formulas for the 4 coordinate Mumford         
//              representation in reduced basis over arbitrary fields where:              
//              h(x) = 0 and             
//              f(x) = f8*x^8 + f7*x^7 + f6*x^6 + f5*x^5 + f4x^4 + 
//                   + f3x^3 + f2x^2 + f1x + f0           
//                                                                      
///////////////////////////////////////////////////////////////////////////////

//Must keep next two lines in this format for latex conversion
//Constant: f0,f1,f2,f3,f4,f5,f6,f7,f8,h0,h1,h2,h3,h4,y0,y1,-yn2,y3,y4,yn0,yn1,yn2,yn3,yn4,c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,d0,d1,d2,d3,d4,d5,d6,d7,d8,d1,d0,d11,d12,d13,d14,dn0,dn1,dn2,dn3,dn4,f3,d6,d7,d8,d1,d0

///////////////////////////////////////////////////////////////////////////////
// Deg01ADDDWN():         
// Input:     u0,v0: Mumford coordinates for divisor D=<x + u0,v0,2> in negative
//                   reduced basis.
// Implicitly 1,0,3: Mumford coordinates for divisor D=<1,0,3> in negative reduced 
//                   basis.       
//              ccs: Table of curve constants and precomputations, see 
//                   Precompuation in arb_splitG3_UTL.mag 
//      
// Output: Mumford coordinates up1,up0,vp1,vp0 and balance weight np for 
//         for negative reduceed and balanced Dp ~ D.               
// Description: Explicit computation for adding <1,0,3> and degree 1 divisor with n = 2.          
///////////////////////////////////////////////////////////////////////////////
Deg01ADDDWN:= function(u0,v0,ccs)  
    /*//startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    Vp := R!ccs[1][3];
    V := R!ccs[1][4];
    u := x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + v0;

    //Formulation
    v := Vp - ((Vp - v) mod u);
    upp := ExactQuotient(f-v*(v + h),u);
    upp := upp/LeadingCoefficient(upp);                 
    vpp := V - (v + h + V) mod upp;
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),npp>; 
    */ //endIGNORE

    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d6:= ccs[1][3][7];
    d7:= ccs[1][3][8];
    d8:= ccs[1][3][9];
    
    //v := Vp - ((Vp - v) mod u);
    u2 := u0^2;
    v0 := v0 + u0*(f5 - u0*(f6 + u2 + u2));

    //z := (f-v*(v + h))/c4;  
    z4 := -yn0 - v0;
    if IsZero(z4) then
        z3 := d8;
        if IsZero(z3) then
            z2 := d7 + v0*yn2;
            if IsZero(z2) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,0>;
            end if;//z2

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            w2 := z2^-1;
            upp0 := w2*(d6 + v0*yn1) - u0;

            //vpp := V - (v + h + V) mod upp;
            //vpp0 := -v0;

            
            return < 0,0,1,upp0,yn2,yn1,-v0,0>;
        end if;//z3

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        w2  := z3^-1;
        upp1 := w2*(d7 + v0*yn2) - u0;
        upp0 := w2*(d6 + v0*yn1) - u0*upp1;

        //vpp := V - (v + h + V) mod upp;
        //vpp1 := yn1;
        //vpp0 := -v0;

        
        return < 0,1,upp1,upp0,yn2,yn1,-v0,0>;
    end if;//z4

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w2  := z4^-1;
    upp2 := w2*d8 - u0;
    upp1 := w2*(d7 + v0*yn2) - u0*upp2;
    upp0 := w2*(d6 + v0*yn1) - u0*upp1;

    //vpp := V - (v + h + V) mod upp;
    //vpp2 := yn2;
    //vpp1 := yn1;
    //vpp0 := -v0;

    
    return < 1,upp2,upp1,upp0,yn2,yn1,-v0,0>; 
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg01ADDUP():         
// Input:     u0,v0: Mumford coordinates for divisor D=<x + u0,v0,n> in negative
//                   reduced basis.
// Implicitly 1,0,np: Mumford coordinates for divisor D=<1,0,0> if n=1, or 
//                    D=<1,0,1> if n = 0, in negative reduced basis.       
//              ccs: Table of curve constants and precomputations, see 
//                   Precompuation in arb_splitG3_UTL.mag 
//      
// Output: Mumford coordinates up1,up0,vp1,vp0 and balance weight np for 
//         for negative reduceed and balanced Dp ~ D.               
// Description: Explicit computation for adding <1,0,3> and degree 1 divisor with n = 2.          
///////////////////////////////////////////////////////////////////////////////
Deg01ADDUP:= function(u0,v0,ccs)  
    /*//startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + R!v0;

    //Formulation
    upp := ExactQuotient(f-v*(v + h),u);
    upp := upp/LeadingCoefficient(upp);                 
    vpp := V - (v + h + V) mod upp;
    npp:= 3 - Degree(upp);
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),npp>; 
    */ //endIGNORE

    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d6:= ccs[1][3][7];
    d7:= ccs[1][3][8];
    d8:= ccs[1][3][9];

    //z := (f-v*(v + h))/c4;  
    z4 := v0 - yn0;

    if IsZero(z4) then
        z3 := d8;
        if IsZero(z3) then
            z2 := d7 - v0*yn2;
            if IsZero(z2) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z2

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            w2 := z2^-1;
            upp0 := w2*(d6 - v0*yn1) - u0;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z3

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        w2  := z3^-1;
        upp1 := w2*(d7 - v0*yn2) - u0;
        upp0 := w2*(d6 - v0*yn1) - u0*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -yn1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -v0 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//z4

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w2  := z4^-1;
    upp2 := w2*d8 - u0;
    upp1 := w2*(d7 - v0*yn2) - u0*upp2;
    upp0 := w2*(d6 - v0*yn1) - u0*upp1;

    //vpp := V - (V + v + h) mod upp;
    t1 := upp2^2 - upp1;
    t2 := upp1*upp2 - upp0;
    t3 := upp0*upp2;
    vpp2 := -yn2 + t1 + t1;
    vpp1 := -yn1 + t2 + t2;
    vpp0 := -v0  + t3 + t3;
    
    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>; 
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg01ADDUP2():         
// Input:     u0,v0: Mumford coordinates for divisor D=<x + u0,v0,0> in negative
//                   reduced basis.
// Implicitly 1,0,0: Mumford coordinates for divisor D=<1,0,0> in negative 
//                   reduced basis.       
//              ccs: Table of curve constants and precomputations, see 
//                   Precompuation in arb_splitG3_UTL.mag 
//      
// Output: Mumford coordinates up1,up0,vp1,vp0 and balance weight np for 
//         for negative reduceed and balanced Dp ~ D.               
// Description: Explicit computation for adding <1,0,0> and degree 1 divisor with n = 0.          
///////////////////////////////////////////////////////////////////////////////
Deg01ADDUP2:= function(u0,v0,ccs)  
    /*//startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + v0;

    //Formulation
    upp := ExactQuotient(f-v*(v + h),u);
    upp := upp/LeadingCoefficient(upp);                 
    vpp := V - (v + h + V) mod upp;
    npp := 2 - Degree(upp);
    if Degree(upp) eq 3 then
        upp := ExactQuotient(f-vpp*(vpp + h),upp);
        upp := upp/LeadingCoefficient(upp);                 
        vpp := V - (vpp + h + V) mod upp;
        npp := 3 - Degree(upp);
    end if;
    //return < Coeff(u,3),Coeff(u,2),Coeff(u,1),Coeff(u,0),Coeff(v,2),Coeff(v,1),Coeff(v,0),n>;
    */ //endIGNORE
    f3:= ccs[1][1][4];
    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];    
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3];
    d5:= ccs[1][3][6];
    d6:= ccs[1][3][7];
    d7:= ccs[1][3][8];
    d8:= ccs[1][3][9];
    d1:= ccs[1][3][2];

    //z := (f-v*(v + h))/c4;  
    z4 := v0 - yn0;

    if IsZero(z4) then
        z3 := d8;
        if IsZero(z3) then
            z2 := d7 - v0*yn2;
            if IsZero(z2) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,2>;
            end if;//z2

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            w2 := z2^-1;
            upp0 := w2*(d6 - v0*yn1) - u0;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
        end if;//z3

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        w2  := z3^-1;
        upp1 := w2*(d7 - v0*yn2) - u0;
        upp0 := w2*(d6 - v0*yn1) - u0*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -yn1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -v0 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
    end if;//z4

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(ppp); 
    //Weight k4/c4 = W;
    W := z4;
    up2 := d8 - u0*W;
    up1 := d7 - v0*yn2 - u0*up2;
    up0 := d6 - v0*yn1 - u0*up1;

    //vpp := V - (V + v + h) mod upp;
    //Weight W^2;
    t0 := up2 + up2;      //z4
    t2 := -up1*t0;      //z4^2
    t3 := W + W;        //z4
    W2 := z4^2;
    vp2 := -yn2*W2 - (up1 + up2)*(t3 - t0) + t0*W + t2;
    vp1 := -yn1*W2 - up0*t3 - t2;
    vp0 := -W2*v0 + up0*t0;    

    //z := (f-v*(v + h))/c4;
    z6  := vp2 - W2*yn2;                                                  //W2
    
    if IsZero(z6) then
        z5  := vp1 - W2*yn1;
        if IsZero(z5) then
            W3 := W2^2;
            z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
            if IsZero(z4) then

                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z4

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);            
            w0 := (W2*z4)^-1;
            w1 := w0*W2;
            w2 := w0*z4;
            w3 := w2*W;
            upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z5

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        W3 := W2^2;
        w0 := (W2*z5)^-1;
        w2 := w0*z5;
        w3 := w2*W;
        u2 := up2*w3;
        upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
        upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -vp1*w2 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -vp0*w2 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//z6

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w0 := (W2*z6)^-1;
    w1 := w0*W2;
    w2 := w0*z6;
    w3 := w2*W;
    u2 := up2*w3;
    u1 := up1*w3;
    W3 := W2^2; 
    upp2 := w1*(vp1 - W2*yn1) - u2;
    upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
    upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

    //vpp := V - (V + v + h) mod upp;
    t1 := upp2^2 - upp1;
    t2 := upp1*upp2 - upp0;
    t3 := upp0*upp2;
    vpp2 := -vp2*w2 + t1 + t1;
    vpp1 := -vp1*w2 + t2 + t2;
    vpp0 := -vp0*w2  + t3 + t3;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg02ADDDWN():         
// Input: u1,u0,v1,v0: Mumford coordinates for divisor D=<x^2 + u1x + u0,v1x + v0,1> in negative
//                     reduced basis.
//   Implicitly 1,0,3: Mumford coordinates for divisor D=<1,0,3> in negative reduced 
//                     basis.       
//                ccs: Table of curve constants and precomputations, see 
//                     Precompuation in arb_splitG3_UTL.mag 
//      
// Output: Mumford coordinates up1,up0,vp1,vp0 and balance weight np for 
//         for negative reduceed and balanced Dp ~ D.               
// Description: Explicit computation for adding <1,0,3> and degree 2 divisor with n = 1.          
///////////////////////////////////////////////////////////////////////////////
Deg02ADDDWN:= function(u1,u0,v1,v0,ccs)  
    /*//startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    Vp := R!ccs[1][3];
    V := R!ccs[1][4];
    u := x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + v1*x + v0;

    //Formulation
    v := Vp - ((Vp - v) mod u);
    upp := ExactQuotient(f-v*(v + h),u);
    upp := upp/LeadingCoefficient(upp);                 
    vpp := V - (v + h + V) mod upp;

    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
    */ //endIGNORE

    f6:= ccs[1][1][7];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d1  := ccs[1][3][2];
    d0 := ccs[1][3][1];
    
    
    //v := Vp - (Vp - v) mod u;
    t0  := -u1 - u1;
    t1  := u1*t0; 
    t2  := f6 - u0 - u0 - t1;
    t3  := u0*t2;
    v1 := v1 + (u0 + u1)*(t0 + t2) - t1 - t3; 
    v0 := v0 + t3; 

    //z := (f-v*(v + h))/c4; 
    z5 := -yn1 - v1;

    if IsZero(z5) then
        z4 := -yn0 - v0;
        if IsZero(z4) then
            z3 := d1 + v1*yn2;
            if IsZero(z3) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,0>;
            end if;//z3

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            w2 := z3^-1;
            upp0 := w2*(d0 + v0*yn2 - v1^2/2) - u1;

            //vpp := V - (v + h + V) mod upp;
            //vpp0 := -v0;

            
            return < 0,0,1,upp0,yn2,yn1,-v0,0>;
        end if;//z4

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        w2  := z4^-1;
        upp1 := w2*(d1 + v1*yn2) - u1;
        upp0 := w2*(d0 + v0*yn2 - v1^2/2) - u0 - u1*upp1;

        //vpp := V - (v + h + V) mod upp;
        //vpp1 := -v1;
        //vpp0 := -v0;

        
        return < 0,1,upp1,upp0,yn2,-v1,-v0,0>;
    end if;//z5

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w2  := z5^-1;
    upp2 := -w2*(yn0 + v0) - u1;
    upp1 := w2*(d1 + v1*yn2) - u0 - u1*upp2;
    upp0 := w2*(d0 + v0*yn2 - v1^2/2) - u0*upp2 - u1*upp1;

    //vpp := V - (v + h + V) mod upp;
    //vpp2 := yn2;
    //vpp1 := -v1;
    //vpp0 := -v0;

    
    return < 1,upp2,upp1,upp0,yn2,-v1,-v0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg02ADDUP():         
// Input: u1,u0,v1,v0: Mumford coordinates for divisor D=<x^2 + u1x + u0,v1x + v0,n> in negative
//                     reduced basis.
//  Implicitly 1,0,np: Mumford coordinates for divisor D=<1,0,0> if n=1, or 
//                     D=<1,0,1> if n = 0, in negative reduced basis.       
//                ccs: Table of curve constants and precomputations, see 
//                     Precompuation in arb_splitG3_UTL.mag 
//      
// Output: Mumford coordinates up1,up0,vp1,vp0 and balance weight np for 
//         for negative reduceed and balanced Dp ~ D.               
// Description: Explicit computation for adding <1,0,0 or 1> and degree 2 divisor with n = 1 or 0.          
///////////////////////////////////////////////////////////////////////////////
Deg02ADDUP:= function(u1,u0,v1,v0,ccs) 
    /*//startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + v1*x + v0;

    //Formulation
    upp := ExactQuotient(f-v*(v + h),u);
    upp := upp/LeadingCoefficient(upp);                 
    vpp := V - (v + h + V) mod upp;
    npp := 3 - Degree(upp);
    
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),npp>;
    */ //endIGNORE

    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d1 := ccs[1][3][2];
    d0:= ccs[1][3][1];

    //z := (f-v*(v + h))/c4; 
    z5 := v1 - yn1;

    if IsZero(z5) then
        z4 := v0 - yn0;
        if IsZero(z4) then
            z3 := d1 - v1*yn2;
            if IsZero(z3) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z3

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            w2 := z3^-1;
            upp0 := w2*(d0 - v0*yn2 - v1^2/2) - u1;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z4

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        w2  := z4^-1;
        upp1 := w2*(d1 - v1*yn2) - u1;
        upp0 := w2*(d0 - v0*yn2 - v1^2/2) - u0 - u1*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -yn1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -v0 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//z5

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w2  := z5^-1;
    upp2 := w2*(v0 - yn0) - u1;
    upp1 := w2*(d1 - v1*yn2) - u0 - u1*upp2;
    upp0 := w2*(d0 - v0*yn2 - v1^2/2) - u0*upp2 - u1*upp1;

    //vpp := V - (V + v + h) mod upp;
    t1 := upp2^2 - upp1;
    t2 := upp1*upp2 - upp0;
    t3 := upp0*upp2;
    vpp2 := -yn2 + t1 + t1;
    vpp1 := -v1 + t2 + t2;
    vpp0 := -v0 + t3 + t3;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg02ADDUP2():         
// Input:u1,u0,v1,v0: Mumford coordinates for divisor D=<x^2 + u1x + u0,v1x + v0,0> in negative
//                    reduced basis.
// Implicitly 1,0,0:  Mumford coordinates for divisor D=<1,0,0> in negative 
//                    reduced basis.       
//              ccs:  Table of curve constants and precomputations, see 
//                    Precompuation in arb_splitG3_UTL.mag 
//      
// Output: Mumford coordinates up1,up0,vp1,vp0 and balance weight np for 
//         for negative reduceed and balanced Dp ~ D.               
// Description: Explicit computation for adding <1,0,0> and degree 2 divisor with n = 0.          
///////////////////////////////////////////////////////////////////////////////
Deg02ADDUP2:= function(u1,u0,v1,v0,ccs)  
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + v1*x + v0;

    //Formulation
    upp := ExactQuotient(f-v*(v + h),u);
    upp := upp/LeadingCoefficient(upp);                 
    vpp := V - (v + h + V) mod upp;
    npp := 2 - Degree(upp);
    if Degree(upp) eq 3 then
        upp := ExactQuotient(f-vpp*(vpp + h),upp);
        upp := upp/LeadingCoefficient(upp);                 
        vpp := V - (vpp + h + V) mod upp;
        npp := 3 - Degree(upp);
    end if;

    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),npp>;
    */ //endIGNORE
    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3];
    d5 := ccs[1][3][6];    
    d1 := ccs[1][3][2];
    d0:= ccs[1][3][1];

    //z := (f-v*(v + h))/c4; 
    z5 := v1 - yn1;

    if IsZero(z5) then
        z4 := v0 - yn0;
        if IsZero(z4) then
            z3 := d1 - v1*yn2;
            if IsZero(z3) then

                
                return < 0,0,0,1,yn2,yn1,yn0,2>;
            end if;//z3

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            w2 := z3^-1;
            upp0 := w2*(d0 - v0*yn2 - v1^2/2) - u1;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
        end if;//z4

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        w2  := z4^-1;
        upp1 := w2*(d1 - v1*yn2) - u1;
        upp0 := w2*(d0 - v0*yn2 - v1^2/2) - u0 - u1*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -v1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -v0 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
    end if;//z5

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(ppp); 
    //Weight k4/c4 = W;
    W := z5;
    up2 := v0 - yn0 - W*u1;
    up1 := d1 - v1*yn2 - u0*W - u1*up2;
    up0 := d0 - v0*yn2 - v1^2/2 - u0*up2 - u1*up1;

    //vpp := V - (V + v + h) mod upp;
    //Weight W^2;
    t1 := -up2 - up2;   //z4
    t2 := up1*t1;      //z4^2
    t3 := W + W;        //z4
    W2 := z5^2;
    yW2 := -yn2*W2;
    vp2 := yW2 - (up1 + up2)*(t3 + t1) - t1*W + t2;
    vp1 := -W2*v1 - up0*t3 - t2;
    vp0 := -W2*v0 - up0*t1;    

    //z := (f-v*(v + h))/c4;
    z6  := vp2 - W2*yn2;                                                  //W2
    
    if IsZero(z6) then
        z5  := vp1 - W2*yn1;
        if IsZero(z5) then
            W3 := W2^2;
            z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
            if IsZero(z4) then

                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z4

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);            
            w0 := (W2*z4)^-1;
            w1 := w0*W2;
            w2 := w0*z4;
            w3 := w2*W;
            upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z5

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        W3 := W2^2;
        w0 := (W2*z5)^-1;
        w2 := w0*z5;
        w3 := w2*W;
        u2 := up2*w3;
        upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
        upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -vp1*w2- (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -vp0*w2 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//z6

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w0 := (W2*z6)^-1;
    w1 := w0*W2;
    w2 := w0*z6;
    w3 := w2*W;
    u2 := up2*w3;
    u1 := up1*w3;
    W3 := W2^2;  
    upp2 := w1*(vp1 - W2*yn1) - u2;
    upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
    upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

    //vpp := V - (V + v + h) mod upp;
    t1 := upp2^2 - upp1;
    t2 := upp1*upp2 - upp0;
    t3 := upp0*upp2;
    vpp2 := -vp2*w2 + t1 + t1;
    vpp1 := -vp1*w2 + t2 + t2;
    vpp0 := -vp0*w2 + t3 + t3;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg03ADDDWN():         
// Input: u2,u1,u0,v2,v1,v0: Mumford coordinates for divisor D=<x^3 + u2x^2 + u1x + u0,v2x^2 + v1x + v0,1> in negative
//                           reduced basis.
//         Implicitly 1,0,3: Mumford coordinates for divisor D=<1,0,3> in negative reduced 
//                           basis.       
//                      ccs: Table of curve constants and precomputations, see 
//                           Precompuation in arb_splitG3_UTL.mag 
//      
// Output: Mumford coordinates up1,up0,vp1,vp0 and balance weight np for 
//         for negative reduceed and balanced Dp ~ D.               
// Description: Explicit computation for adding <1,0,3> and degree 3 divisor with n = 0.          
///////////////////////////////////////////////////////////////////////////////
Deg03ADDDWN:= function(u2,u1,u0,v2,v1,v0,ccs)  
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    Vp := R!ccs[1][3];
    u := x^3 + u2*x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + v2*x^2 + v1*x + v0;

    //Formulation
    v := Vp - ((Vp - v) mod u);
    upp := ExactQuotient(f-v*(v + h),u);
    upp := upp/LeadingCoefficient(upp);                 
    vpp := V - (v + h + V) mod upp;
    
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>; 
    */ //endIGNORE

    
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d5 := ccs[1][3][6];
    d1 := ccs[1][3][2];


    //v := Vp - (Vp - v) mod u;
    t1 := u1 - u2^2;
    t2 := u0 - u1*u2;
    t3 := -u0*u2;
    v2 := v2 + t1 + t1;
    v1 := v1 + t2 + t2;
    v0 := v0 + t3 + t3;

    //z := (f-v*(v + h))/c4; 
    z6 := -yn2 - v2;

    if IsZero(z6) then
        z5 := -yn1 - v1;
        if IsZero(z5) then
            z4 := -yn0 - v0 - v2^2/2 - d5;
            if IsZero(z4) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,0>;
            end if;//z4

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            w2 := z4^-1;
            upp0 := w2*(d1 - v2*v1) - u2;

            //vpp := V - (v + h + V) mod upp;
            //vpp0 := -v0;

            
            return < 0,0,1,upp0,yn2,yn1,-v0,0>;
        end if;//z5

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        w2  := z5^-1;
        upp1 := w2*(-yn0 - v0 - v2^2/2 - d5) - u2;
        upp0 := w2*(d1 - v2*v1) - u1 - u2*upp1;

        //vpp := V - (v + h + V) mod upp;
        //vpp1 := -v1;
        //vpp0 := -v0;

        
        return < 0,1,upp1,upp0,yn2,-v1,-v0,0>;
    end if;//z6

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w2  := z6^-1;
    t1  := -yn1 - v1;
    upp2 := w2*t1 - u2;
    upp1 := -w2*(yn0 + v0) + (v2 - yn2)/2 - u1 - u2*upp2;
    upp0 := w2*(d1 - v2*v1) - u0 - u1*upp2 - u2*upp1;

    //vpp := V - (v + h + V) mod upp;
    //vpp2 := -v1;
    //vpp1 := -v1;
    //vpp0 := -v0;

    
    return < 1,upp2,upp1,upp0,-v2,-v1,-v0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg03ADDUP():         
// Input: u2,u1,u0,v2,v1,v0: Mumford coordinates for divisor D=<x^3 + u2x^2 + u1x + u0,v2x^2 + v1x + v0,0> in negative
//                           reduced basis.
//        Implicitly 1,0,np: Mumford coordinates for divisor D=<1,0,1> in negative 
//                           reduced basis.       
//                      ccs: Table of curve constants and precomputations, see 
//                           Precompuation in arb_splitG3_UTL.mag 
//      
// Output: Mumford coordinates up1,up0,vp1,vp0 and balance weight np for 
//         for negative reduceed and balanced Dp ~ D.               
// Description: Explicit computation for adding <1,0,1> and degree 3 divisor with n= 0.          
///////////////////////////////////////////////////////////////////////////////
Deg03ADDUP:= function(u2,u1,u0,v2,v1,v0,ccs)  
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x^3 + u2*x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + v2*x^2 + v1*x + v0;

    //Formulation
    upp := ExactQuotient(f-v*(v + h),u);
    upp := upp/LeadingCoefficient(upp);                 
    vpp := V - (v + h + V) mod upp;
    npp := 3 - Degree(upp);
    
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),npp>; 
    */ //endIGNORE

    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d5 := ccs[1][3][6];
    d1 := ccs[1][3][2];

    //z := (f-v*(v + h))/c4; 
    z6 := v2 - yn2;

    if IsZero(z6) then
        z5 := v1 - yn1;
        if IsZero(z5) then
            z4 := v0 - yn0 - v2^2/2 - d5;
            if IsZero(z4) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z4

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            w2 := z4^-1;
            upp0 := w2*(d1 - v2*v1) - u2;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z5

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        w2  := z5^-1;
        upp1 := w2*(v0 - yn0 - v2^2/2 - d5) - u2;
        upp0 := w2* (d1 - v2*v1) - u1 - u2*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -v1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -v0 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//z6

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w2  := z6^-1;
    t1  := v1 - yn1;
    upp2 := w2*t1 - u2;
    upp1 := w2*(v0 - yn0) - (v2 + yn2)/2 - u1 - u2*upp2;
    upp0 := w2*(d1 - v2*v1) - u0 - u1*upp2 - u2*upp1;

    //vpp := V - (V + v + h) mod upp;
    t1 := upp2^2 - upp1;
    t2 := upp1*upp2 - upp0;
    t3 := upp0*upp2;
    vpp2 := -v2 + t1 + t1;
    vpp1 := -v1 + t2 + t2;
    vpp0 := -v0 + t3 + t3;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg03ADDUP2():         
// Input:u2,u1,u0,v2,v1,v0: Mumford coordinates for divisor D=<x^3 + u2x^2 + u1x + u0,v2x^2 + v1x + v0,0> in negative
//                          reduced basis.
//       Implicitly 1,0,0:  Mumford coordinates for divisor D=<1,0,0> in negative 
//                          reduced basis.       
//                    ccs:  Table of curve constants and precomputations, see 
//                          Precompuation in arb_splitG3_UTL.mag 
//      
// Output: Mumford coordinates up1,up0,vp1,vp0 and balance weight np for 
//         for negative reduceed and balanced Dp ~ D.               
// Description: Explicit computation for adding <1,0,0> and degree 3 divisor with n = 0.          
///////////////////////////////////////////////////////////////////////////////
Deg03ADDUP2:= function(u2,u1,u0,v2,v1,v0,ccs)  
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x^3 + u2*x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + v2*x^2 + v1*x + v0;

    //Formulation
    upp := ExactQuotient(f-v*(v + h),u);
    upp := upp/LeadingCoefficient(upp);                 
    vpp := V - (v + h + V) mod upp;
    npp := 2 - Degree(upp);
    if Degree(upp) eq 3 then
        upp := ExactQuotient(f-vpp*(vpp + h),upp);
        upp := upp/LeadingCoefficient(upp);                 
        vpp := V - (vpp + h + V) mod upp;
        npp := 3 - Degree(upp);
    end if;

    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),npp>;
    */ //endIGNORE

    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d5 := ccs[1][3][6];
    d1 := ccs[1][3][2];


    //z := (f-v*(v + h))/c4; 
    z6 := v2 - yn2;

    if IsZero(z6) then
        z5 := v1 - yn1;
        if IsZero(z5) then
            z4 := v0 - yn0 - v2^2/2 - d5;
            if IsZero(z4) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,2>;
            end if;//z4

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            w2 := z4^-1;
            upp0 := w2* (d1 - v2*v1) - u2;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
        end if;//z5

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        w2  := z5^-1;
        upp1 := w2*(v0 - yn0 - v2^2/2 - d5) - u2;
        upp0 := w2* (d1 - v2*v1) - u1 - u2*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -v1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -v0 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
    end if;//z6

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    W  := z6;
    t1  := v1 - yn1;
    up2 := t1 - u2*W;
    up1 := v0 - yn0 - v2^2/2 - d5 - u1*W - u2*up2;
    up0 := d1 - v2*v1 - u0*W - u1*up2 - u2*up1;

    //vpp := V - (V + v + h) mod upp;
    //Weight W^2;
    t1 := -up2 - up2;   //z6
    t2 := up1*t1;      //z6^2
    t3 := W + W;        //z6
    W2 := z6^2;
    vp2 := -W2*v2 - (up1 + up2)*(t3 + t1) - t1*W + t2;
    vp1 := -W2*v1 - up0*t3 - t2;
    vp0 := -W2*v0 - up0*t1;    

    //z := (f-v*(v + h))/c4;
    z6  := vp2 - W2*yn2;                                                  //W2
    
    if IsZero(z6) then
        z5  := vp1 - W2*yn1;
        if IsZero(z5) then
            W3 := W2^2;
            z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
            if IsZero(z4) then

                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z4

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);            
            w0 := (W2*z4)^-1;
            w1 := w0*W2;
            w2 := w0*z4;
            w3 := w2*W;
            upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z5

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        W3 := W2^2;
        w0 := (W2*z5)^-1;
        w2 := w0*z5;
        w3 := w2*W;
        u2 := up2*w3;
        upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
        upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -vp1*w2- (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -vp0*w2 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//z6

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w0 := (W2*z6)^-1;
    w1 := w0*W2;
    w2 := w0*z6;
    w3 := w2*W;
    u2 := up2*w3;
    u1 := up1*w3;
    W3 := W2^2; 
    upp2 := w1*(vp1 - W2*yn1)  - u2;
    upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
    upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

    //vpp := V - (V + v + h) mod upp;
    t1 := upp2^2 - upp1;
    t2 := upp1*upp2 - upp0;
    t3 := upp0*upp2;
    vpp2 := -vp2*w2 + t1 + t1;
    vpp1 := -vp1*w2 + t2 + t2;
    vpp0 := -vp0*w2 + t3 + t3;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg1ADD():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,n> in reduced
//                basis where 0<=n<=2 and n + np = [2,3]
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,np> in reduced
//                basis where 0<=np<=2 and n + np = [2,3]
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors.                 
///////////////////////////////////////////////////////////////////////////////
Deg1ADD:= function(u0,v0,up0,vp0,npp,ccs)
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + v0;
    up := x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + vp0;
    Q := quo<R | up>;

    //Formulation
    d := u mod up;
    if IsZero(d) then
        dw := (vp + v + h) mod up; 
        if IsZero(dw) then
            return < 0,0,0,1,Coeff(V,2),Coeff(V,1),Coeff(V,0),npp+1>;
        end if;
        k := ExactQuotient(f-v*(v + h),u);
        s := k*R!(Q!dw^-1) mod up;
        upp := u^2;
        vpp := V - (V - v - u*s) mod upp;
        return < 0,1,Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),npp>;
    end if;
    s := (vp - v)*R!(Q!d^-1) mod up;
    upp := u*up;
    vpp := V - (V - v - u*s) mod upp;
    //return < 0,1,Coeff(upp,1),Coeff(upp,0),Coeff(V,2),Coeff(vpp,1),Coeff(vpp,0),npp>;
    */ //endIGNORE

    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d8  := ccs[1][3][9];
    d7  := ccs[1][3][8];
    d6  := ccs[1][3][7];

    //d = u mod up
    d := u0 - up0;

    if IsZero(d) then
        //dw := ((vp + v + h) mod u);
        upp0 := u0^2;
        dw := (v0 + vp0)/2 - u0*yn1 + upp0*(yn2 - upp0);
        if IsZero(dw) then
            npp := npp+1;

            
            return < 0,0,0,1,yn2,yn1,yn0,npp>;
        end if;//dw

        //upp := u^2;
        upp1 := u0 + u0;

        //k := ExactQuotient(f - v*(v + h), u);
        //s0 := k/dw mod u;
        k3 := v0 - yn0;
        t0 := u0*k3;
        k2 := d8 - t0;
        k1 := d7 - yn2*v0 - u0*k2;
        t1 := u0*k1;
        k0 := d6 - yn1*v0 - t1;
        kp0:= k0 - t1 + upp0*(k2 - t0);
        s0 := kp0*dw^-1;
        
        //vpp := V - (V - v - su) mod upp;
        vpp1 := yn1 + s0;
        vpp0 := v0 + s0*u0;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,npp>;
    end if;//d

    //s0 = (vp - v)/d
    s0 := (vp0 - v0)*d^-1;

    //upp = u*up
    upp1 := u0 + up0;
    upp0 := u0*up0;
    
    //vpp := V - (V - v - su) mod upp;
    vpp1 := yn1 + s0;
    vpp0 := v0 + s0*u0;
                                                        
    
    return < 0,1, upp1, upp0,yn2, vpp1, vpp0, npp>;
    
end function;

///////////////////////////////////////////////////////////////////////////////
// Deg1ADDDWN():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,2> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,2> in reduced
//                basis.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with down adjust.                
///////////////////////////////////////////////////////////////////////////////
Deg1ADDDWN:= function(u0,v0,up0,vp0,ccs)
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    Vp := R!ccs[1][3];
    V := R!ccs[1][4];
    u := x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + v0;
    up := x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + vp0;
    Q := quo<R | up>;
    
    //Formulation
    d := u mod up;
    if IsZero(d) then
        return < 0,0,0,1,Coeff(V,2),Coeff(V,1),Coeff(V,0),3>;
    end if;
    v := Vp - ((Vp - v) mod u);
    s := R!(Q!d^-1)*(vp - v) mod up;
    k := ExactQuotient(f-v*(v + h),u);
    upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (V + u*s + v + h) mod upp;
    
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
    */ //endIGNORE
    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d8  := ccs[1][3][9];
    d7  := ccs[1][3][8];

    //d := u mod up;
    d := u0 - up0;
    if IsZero(d) then
        
        
        return < 0,0,0,1,yn2,yn1,yn0,3>;
    end if;//d

    //v := Vp - ((Vp - v) mod u);
    u2 := u0^2;
    v0 := v0 + u0*(f5 - u0*(f6 + u2 + u2));

    //sp := (vp - v) mod up;
    up2 := up0^2;
    sp0 := vp0 - v0 + up0*(f5 - up0*(f6 + up2 + up2));
    
    //k := ExactQuotient(f-v*(v + h),u);;
    //z := k/c4;
    z3 := -yn0 - v0;
    z2 := d8 - u0*z3;
    
    if IsZero(sp0) then
        if IsZero(z3) then
            if IsZero(z2) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,0>;
            end if;//z2

            //upp := ExactQuotient(k, u);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z2^-1;
            upp0 := w1*(d7 + yn2*v0 - u0*z2) - up0;
            
            //vp  := V - (V + v + h) mod upp;
            //vpp0 := -v0;

            
            return < 0,0,1,upp0,yn2,yn1,-v0,0>;
        end if;//z3

        //upp := ExactQuotient(k, u);
        //upp  := upp/LeadingCoefficient(upp);
        w1   := z3^-1;
        upp1 := w1*z2 - up0;
        upp0 := w1*(d7 + yn2*v0 - u0*z2) - up0*upp1;
        
        //vp  := V  - (V + v + h) mod upp;
        //vpp1 := yn1;
        //vpp0 := -v0;

        
        return < 0,1,upp1,upp0,yn2,yn1,-v0,0>;
    end if;//sp0

    //s0 := ((vp - v)/d) mod up and 1/s0;
    w0 := (sp0*d)^-1; //1/s0*d^2
    w1 := w0*d^2;      //1/s0
    s0 := w0*sp0^2; 

    //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    //upp := upp/LeadingCoefficient(upp);
    upp2 := -w1*z3 - up0;
    upp1 := -yn2 - w1*z2 - up0*upp2;
    upp0 := -yn1 - w1*(d7 + yn2*v0 - u0*z2) + s0/2 - up0*upp1;

    //vpp  := V - ((V - (-s*u - v - h)) mod upp);
    //vpp2 := yn2;
    vpp1 := yn1 - s0;
    vpp0 := -v0 - s0*u0;

    
    return < 1,upp2,upp1,upp0,yn2,vpp1,vpp0,0>;
end function;

///////////////////////////////////////////////////////////////////////////////
// Deg1ADDUP():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,n> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,np> in reduced
//                basis where n + np = 1.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with up adjust.                
///////////////////////////////////////////////////////////////////////////////
Deg1ADDUP:= function(u0,v0,up0,vp0,ccs)
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + v0;
    up := x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + vp0;
    Q := quo<R | up>;
    
    //Formulation
    d := u mod up;
    if IsZero(d) then
        dw := (vp + v + h) mod up;
        if IsZero(dw) then
            return < 0,0,0,1,Coeff(V,2),Coeff(V,1),Coeff(V,0),0>;
        end if;
        k := ExactQuotient(f-v*(v + h),u);
        s := R!(Q!dw^-1)*k mod up;
        M2:= ExactQuotient(s*(2*v + h) - k, u);
        upp := s^2 + M2;
        upp := upp/LeadingCoefficient(upp);
        vpp := V - (s*u + v + h + V) mod upp;
        npp := 3-Degree(upp);
        return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),npp>;
    end if;
    s := R!(Q!d^-1)*(vp - v) mod up;
    k := ExactQuotient(f - v*(v + h), u);
    upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); //M1 := ExactQuotient(u1*s-v2+v1,u2); M2:=ExactQuotient(s*(v2+v1+h)-k,u2); u:=-s*M1-M2;
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (V + u*s + v + h) mod upp;
    npp := 3-Degree(upp);

    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),npp>;
    */ //endIGNORE
    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d8  := ccs[1][3][9];
    d7  := ccs[1][3][8];
    d6  := ccs[1][3][7];

    //d := u mod up;
    d := u0 - up0;
    if IsZero(d) then
        //dw := (vp + v + h) mod up;
        up2 := up0^2;
        dw := (v0 + vp0)/2 - up0*yn1 + up2*(yn2 - up2);
        if IsZero(dw) then
           
            
            return < 0,0,0,1,yn2,yn1,yn0,0>;
        end if;//dw

        //k := ExactQuotient(f - v*(v + h), u);
        //z := k/c4;
        z3 := v0 - yn0;
        t0 := u0*z3;
        z2 := d8 - t0;
        z1 := d7 - yn2*v0 - u0*z2;
        t1 := u0*z1;
        z0 := d6 - yn1*v0 - t1;

        //s := R!(Q!dw^-1)*z mod up;
        sp0:= z0 - t1 + up2*(z2 - t0);

        if IsZero(sp0) then
            if IsZero(z3) then
                if IsZero(z2) then
                    
                    
                    return < 0,0,0,1,yn2,yn1,yn0,3>;
                end if;//z2

                //upp := ExactQuotient(k, u);
                //upp  := upp/LeadingCoefficient(upp);
                w1   := z2^-1;
                upp0 := w1*z1 - up0;
                
                //vpp := V - (V + v + h) mod upp;
                upp2 := upp0^2;
                vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
            end if;//z3

            //upp := ExactQuotient(k, u);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z3^-1;
            upp1 := w1*z2 - up0;
            upp0 := w1*z1 - up0*upp1;
            
            //vpp := V - (v + h + V) mod upp;
            t1 := -upp1 - upp1;
            t2 := upp1*t1;
            t3 := f6 - upp0 - upp0 - t2;
            t4 := upp0*t3;
            vpp1 := -yn1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
            vpp0 := -v0 - t4;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//sp0
        
        //M2:= ExactQuotient(s*(2*v + h) - k, u);
        //upp := s^2 + M2;
        //upp := upp/LeadingCoefficient(upp);
        w1 := (sp0*dw)^-1;
        w2 := w1*dw^2;  //1/s0
        s0 := sp0^2*w1;  
        upp2 := z3*w2 - u0;
        upp1 := -yn2 + z2*w2 - u0*upp2;
        upp0 := -yn1 + z1*w2 - s0/2 - u0*upp1;
        
        //vpp := V - (u*s + v + h + V) mod upp;
        t1 := upp2^2 - upp1;
        t2 := upp1*upp2 - upp0;
        t3 := upp0*upp2;
        vpp2 := -yn2 + t1 + t1;
        vpp1 := -yn1 - s0 + t2 + t2;
        vpp0 := -v0 - s0*u0 + t3 + t3;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d
    
    //k := ExactQuotient(f - v*(v + h), u);
    //z := k/c4;
    z3 := v0 - yn0;
    z2 := d8 - u0*z3;

    //sp := (vp - v) mod up;
    sp0 := vp0 - v0;

    if IsZero(sp0) then
        if IsZero(z3) then
            if IsZero(z2) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z2

            //upp := ExactQuotient(k, u);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z2^-1;
            upp0 := w1*(d7 - yn2*v0 - u0*z2) - up0;
            
            //vpp := V - (V + v + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z3

        //upp := ExactQuotient(k, u);
        //upp  := upp/LeadingCoefficient(upp);
        w1   := z3^-1;
        upp1 := w1*z2 - up0;
        upp0 := w1*(d7 - yn2*v0 - u0*z2) - up0*upp1;
        
        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -yn1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -v0 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//sp0

    //s := R!(Q!d^-1)*(vp - v) mod up;
    //s0 := ((vp - v)/d) mod up and 1/s0;
    w0 := (sp0*d)^-1; //1/s0*d^2
    w1 := w0*d^2;      //1/s0
    s0 := w0*sp0^2; 

    //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    //upp := upp/LeadingCoefficient(upp);
    upp2 := w1*z3 - up0;
    upp1 := -yn2 + w1*z2 - up0*upp2;
    upp0 := -yn1 + w1*(d7 - yn2*v0 - u0*z2) - s0/2 - up0*upp1;

    //vpp := V - (u*s + v + h + V) mod upp;
    t1 := upp2^2 - upp1;
    t2 := upp1*upp2 - upp0;
    t3 := upp0*upp2;
    vpp2 := -yn2 + t1 + t1;
    vpp1 := -yn1 - s0 + t2 + t2;
    vpp0 := -v0 - s0*u0 + t3 + t3;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;

///////////////////////////////////////////////////////////////////////////////
// Deg1ADDUP2():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,0> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,0> in reduced
//                basis.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with two up adjusts.                
///////////////////////////////////////////////////////////////////////////////
Deg1ADDUP2:= function(u0,v0,up0,vp0,ccs)
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + R!v0;
    up := x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + R!vp0;
    Q := quo<R | up>;
    

    d := u mod up;
    if IsZero(d) then
        return < ccs[2][1][4],ccs[2][1][3],ccs[2][1][2],ccs[2][1][1],ccs[2][1][8],ccs[2][1][7],ccs[2][1][6],ccs[2][1][5]>;
    end if;
    s := R!(Q!d^-1)*(vp - v) mod up;
    k := ExactQuotient(f - v*(v + h),u);
    upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); //M1 := ExactQuotient(u1*s-v2+v1,u2); M2:=ExactQuotient(s*(v2+v1+h)-k,u2); u:=-s*M1-M2;
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (V + u*s + v + h) mod upp;
    npp := 2 - Degree(upp);
    if Degree(upp) eq 3 then
        upp := ExactQuotient(f-vpp*(vpp + h),upp);
        upp := upp/LeadingCoefficient(upp);                 
        vpp := V - (vpp + h + V) mod upp;
        npp := 3 - Degree(upp);
    end if;
    
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),npp>;
    */ //endIGNORE
    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d5  := ccs[1][3][6];
    d1  := ccs[1][3][2];
    d8  := ccs[1][3][9];
    d7  := ccs[1][3][8];
    d6  := ccs[1][3][7];

    //d := u mod up;
    d := u0 - up0;
    if IsZero(d) then
        
        
        return < ccs[2][1][4],ccs[2][1][3],ccs[2][1][2],ccs[2][1][1],ccs[2][1][8],ccs[2][1][7],ccs[2][1][6],ccs[2][1][5]>;
    end if;//d

    //k := ExactQuotient(f - v*(v + h), u);
    //z := k/c4;
    z3 := v0 - yn0;
    z2 := d8 - u0*z3;

    //sp := (vp - v) mod up;
    sp0 := vp0 - v0;

    if IsZero(sp0) then
        if IsZero(z3) then
            if IsZero(z2) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,2>;
            end if;//z2

            //upp := ExactQuotient(k, u);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z2^-1;
            upp0 := w1*(d7 - yn2*v0 - u0*z2) - up0;
            
            //vpp := V - (V + v + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
        end if;//z3

        //upp := ExactQuotient(k, u);
        //upp  := upp/LeadingCoefficient(upp);
        w1   := z3^-1;
        upp1 := w1*z2 - up0;
        upp0 := w1*(d7 - yn2*v0 - u0*z2) - up0*upp1;
        
        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -yn1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -v0 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
    end if;//sp0

    //s := R!(Q!d^-1)*(vp - v) mod up;
    //s0 := ((vp - v)/d) mod up and 1/s0;
    //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    //upp := upp/LeadingCoefficient(upp);
    W := sp0*d;
    D := d^2;
    sp2:= sp0^2;
    up2 := -W*up0 + D*z3;
    up1 := -W*yn2 + D*z2 - up0*up2;
    up0 := -W*yn1 + D*(d7 - yn2*v0 - u0*z2) - sp2/2 - up0*up1;

    //vpp := V - (V + v + h) mod upp;
    //Weight W^2;
    t0 := up2 + up2;      //z4
    t2 := -up1*t0;      //z4^2
    t3 := W + W;        //z4
    W2 := W^2;
    s0pp := W*sp2;
    yW2 := -yn2*W2;
    vp2 := yW2 - (up1 + up2)*(t3 - t0) + t0*W + t2;
    vp1 := -W2*yn1 - s0pp - up0*t3 - t2;
    vp0 := -W2*v0 - s0pp*u0 + up0*t0;    

    //z := (f-v*(v + h))/c4;
    z6  := vp2 - W2*yn2;                                                  //W2
    
    if IsZero(z6) then
        z5  := vp1 - W2*yn1;
        if IsZero(z5) then
            W3 := W2^2;
            z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
            if IsZero(z4) then

                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z4

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);            
            w0 := (W2*z4)^-1;
            w1 := w0*W2;
            w2 := w0*z4;
            w3 := w2*W;
            upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z5

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        W3 := W2^2;
        w0 := (W2*z5)^-1;
        w2 := w0*z5;
        w3 := w2*W;
        u2 := up2*w3;
        upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
        upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -vp1*w2- (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -vp0*w2 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//z6

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w0 := (W2*z6)^-1;
    w1 := w0*W2;
    w2 := w0*z6;
    w3 := w2*W;
    u2 := up2*w3;
    u1 := up1*w3;
    W3 := W2^2; 
    upp2 := w1*(vp1 - W2*yn1) - u2;
    upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
    upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

    //vpp := V - (V + v + h) mod upp;
    t1 := upp2^2 - upp1;
    t2 := upp1*upp2 - upp0;
    t3 := upp0*upp2;
    vpp2 := -vp2*w2 + t1 + t1;
    vpp1 := -vp1*w2 + t2 + t2;
    vpp0 := -vp0*w2 + t3 + t3;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg12ADD():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,n> in reduced
//                basis where 0<=n<=2 and n + np = 2
// up1,up0,vp1,vp0: Mumford coordinates for divisor Dp=<x^2 + up1x + up0,vp1x + vp0,np> in reduced
//                basis where 0<=np<=2 and n + np = 2
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding a degree 1 with a degree 2 divisor.                 
///////////////////////////////////////////////////////////////////////////////
Deg12ADD:= function(u1,u0,v1,v0,up0,vp0,ccs)
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + v1*x + v0;
    up := x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + vp0;
    Q := quo<R | up>;
    
    //Formulation
    d := u mod up;
    if IsZero(d) then
        dw := (vp + v + h) mod up; 
        if IsZero(dw) then
            upp := ExactQuotient(u,up);
            vpp := V - (V - v) mod upp;
            return < 0,0,1,Coeff(upp,0),Coeff(V,2),Coeff(V,1),Coeff(vpp,0),1>;
        end if;
        k := ExactQuotient(f-v*(v + h),u);
        s := k*R!(Q!dw^-1) mod up;
        upp := u*up;
        vpp := V - (V - v - u*s) mod upp;
    return < 1,Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
    end if;
    s := (vp - v)*R!(Q!d^-1) mod up;
    upp := u*up;
    vpp := V - (V - v - u*s) mod upp;

    return < 1,Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
    */ //endIGNORE

    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d0 := ccs[1][3][1];
    d1 := ccs[1][3][2];

    //d := u mod up;
    t0 := up0*u1;
    up2 := up0^2;
    d  := u0 - t0 + up2;
    if IsZero(d) then
        //dw := (vp + v + h) mod up; 
        dw := (vp0 + v0 - up0*(v1 + yn1))/2 + up2*(yn2 - up2);
        if IsZero(dw) then
            //upp := ExactQuotient(u,up);
            upp0 := u1 - up0;
            //vpp := V - (V - v) mod upp;
            vpp0 := v0 + upp0*(yn1 - v1);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
        end if;//dw
        //k := ExactQuotient(f-v*(v + h),u);
        //z := k/c4;
        z3 := v1 - yn1;
        t1 := u1*z3;
        z2 := v0 - yn0 - t1;
        t2 := u0*z2;
        z1 := d1 - yn2*v1 - (u0 + u1)*(z3 + z2) + t1 + t2;
        z0 := d0 - v0*yn2 - v1^2/2 - t2 - u1*z1;

        //s := z*R!(Q!dw^-1) mod up;
        w0 := z0 - up0*(z1 - up0*(z2 - up0*z3));
        s0  := w0*dw^-1;

        //upp := u*up;
        upp2 := u1 + up0;
        upp1 := u0 + t0;
        upp0 := u0*up0; 

        //vpp := V - (V - v - u*s) mod upp;
        vpp2 := yn2 + s0;
        vpp1 := v1 + s0*u1;
        vpp0 := v0 + s0*u0;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d

    //s := (vp - v)*R!(Q!d^-1) mod up;
    w0 := vp0 - v0 - up0*(yn1 - v1); 
    s0 := d^-1*w0;
    
    //upp := u*up;
    upp2 := u1 + up0;
    upp1 := u0 + t0;
    upp0 := u0*up0; 

    //vpp := V - (V - v - u*s) mod upp;
    vpp2 := yn2 + s0;
    vpp1 := v1 + s0*u1;
    vpp0 := v0 + s0*u0;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg12ADDDWN():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,2> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,2> in reduced
//                basis.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with down adjust.                
///////////////////////////////////////////////////////////////////////////////
Deg12ADDDWN:= function(u1,u0,v1,v0,up0,vp0,ccs)
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    Vp := R!ccs[1][3];
    V := R!ccs[1][4];
    u := x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + v1*x + v0;
    up := x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + vp0;
    Q := quo<R | up>;
    
    //Formulation
    d := u mod up;
    if IsZero(d) then
        dw := (vp + v + h) mod up; 
        if IsZero(dw) then
            upp := ExactQuotient(u,up);
            vpp := V - (V - v) mod upp;
            return < 0,0,1,Coeff(upp,0),Coeff(V,2),Coeff(V,1),Coeff(vpp,0),2>;
        end if;
        v := Vp - ((Vp - v) mod u);
        k := ExactQuotient(f-v*(v + h),u);
        s := k*R!(Q!dw^-1) mod up;
        //M1:=ExactQuotient(u1*s-v2+v1,u2); M2:=ExactQuotient(s*(v2+v1+h)-k,u2); u:=-s*M1-M2;
        upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
        upp := upp/LeadingCoefficient(upp);
        vpp := V - (V + u*s + v + h) mod upp;
        return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
    end if;
    v := Vp - ((Vp - v) mod u);
    s := R!(Q!d^-1)*(vp - v) mod up;
    k := ExactQuotient(f-v*(v + h),u);
    //M1:=ExactQuotient(u1*s-v2+v1,u2); M2:=ExactQuotient(s*(v2+v1+h)-k,u2); u:=-s*M1-M2;
    upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (V + u*s + v + h) mod upp;
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
    */ //endIGNORE
    f6:= ccs[1][1][7];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d1 := ccs[1][3][2];
    d0 := ccs[1][3][1];

    //d := u mod up;
    t0 := up0*u1;
    up2 := up0^2;
    d  := u0 - t0 + up2;
    if IsZero(d) then
        //dw := (vp + v + h) mod up;
        dw := (vp0 + v0- up0*(v1 + yn1))/2 + up2*(yn2 - up2);
        if IsZero(dw) then
            //upp := ExactQuotient(u,up);
            upp0 := u1 - up0;
            //vpp := V - (V - v) mod upp;
            vpp0 := v0 + upp0*(yn1 - v1);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//dw

        //v := Vp - (Vp - v) mod u;
        t0  := -u1 - u1;
        t1  := u1*t0; 
        t2  := f6 - u0 - u0 - t1;
        t3  := u0*t2;
        v1 := v1 + (u0 + u1)*(t0 + t2) - t1 - t3; 
        v0 := v0 + t3; 

        //k := ExactQuotient(f-v*(v + h),u);
        //z := k/c4;
        z3 := -yn1 - v1;
        t0 := z3*u1;
        z2 := -yn0 - v0 - t0;
        t1 := z2*u0;
        z1 := d1 + yn2*v1 - (u0 + u1 )*(z3 + z2) + t0 + t1;
        z0 := d0 + yn2*v0 - v1^2/2 - t1 - u1*z1;

        //s := z*R!(Q!(dw)^-1) mod up;
        sp0 := z0 - up0*(z1 - up0*(z2 - up0*z3));

        if IsZero(sp0) then
            if IsZero(z3) then
                if IsZero(z2) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,0>;
                end if;//z2

                //upp := ExactQuotient(k, u);
                //upp  := upp/LeadingCoefficient(upp);
                w1   := z2^-1;
                upp0 := w1*z1 - up0;
                
                //vp  := V - (V + v + h) mod upp;
                vpp0 := -v0;

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
            end if;//z3

            //upp := ExactQuotient(k, u);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z3^-1;
            upp1 := w1*z2 - up0;
            upp0 := w1*z1 - up0*upp1;
            
            //vp  := V  - (V + v + h) mod upp;
            //vpp1 := -v1;
            //vpp0 := -v0;

            
            return < 0,1,upp1,upp0,yn2,-v1,-v0,0>;
        end if;//sp0

        //s := sp0*dw^-1;
        w0 := (sp0*dw)^-1; //1/s0*d^2
        w1 := w0*dw^2;      //1/s0
        s0 := w0*sp0^2; 

        //M1:=ExactQuotient(u1*s-v2+v1,u2); M2:=ExactQuotient(s*(v2+v1+h)-k,u2); u:=-s*M1-M2;
        //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
        //upp := upp/LeadingCoefficient(upp);
        t0 := s0/2;
        t1 := t0*u1;
        upp2 := -w1*z3 - up0;
        upp1 := -yn2 + t0 - w1*z2 - up0*upp2;
        upp0 := t1 + v1 - w1*z1 - up0*upp1;

        //vpp := V - (V + u*s + v + h) mod upp;
        vpp2 := yn2 - s0;
        vpp1 := -v1 - t1 - t1;
        vpp0 := -v0 - s0*u0;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d

    //v := Vp - (Vp - v) mod u;
    t0  := -u1 - u1;
    t1  := u1*t0; 
    t2  := f6 - u0 - u0 - t1;
    t3  := u0*t2;
    v1 := v1 + (u0 + u1)*(t0 + t2) - t1 - t3; 
    v0 := v0 + t3;     
    
    //k := ExactQuotient(f-v*(v + h),u);
    //z := k/c4;
    z3 := -yn1 - v1;
    z2 := -yn0 - v0 - z3*u1;

    //s := R!(Q!d^-1)*(vp - v) mod up;
    up2 := up0^2;
    sp0 := vp0 - v0 - up0*(yn1 - v1 + up0*(f6 + up2 + up2));

    if IsZero(sp0) then
        if IsZero(z3) then
            if IsZero(z2) then

                
                return < 0,0,0,1,yn2,yn1,yn0,0>;
            end if;//z2

            //upp := ExactQuotient(k, u);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z2^-1;
            upp0 := w1*(d1 + yn2*v1 - z3*u0 - z2*u1) - up0;
            
            //vp  := V - (V + v + h) mod upp;
            //vpp0 := -v0;

            
            return < 0,0,1,upp0,yn2,yn1,-v0,0>;
        end if;//z3

        //upp := ExactQuotient(k, u);
        //upp  := upp/LeadingCoefficient(upp);
        w1   := z3^-1;
        upp1 := w1*z2 - up0;
        upp0 := w1*(d1 + yn2*v1 - z3*u0 - z2*u1) - up0*upp1;
        
        //vp  := V  - (V + v + h) mod upp;
        //vpp1 := -v1;
        //vpp0 := -v0;

        
        return < 0,1,upp1,upp0,yn2,-v1,-v0,0>;
    end if;//sp0

    //s := sp0*dw^-1;
    w0 := (sp0*d)^-1; //1/s0*d^2
    w1 := w0*d^2;      //1/s0
    s0 := w0*sp0^2; 

    //M1:=ExactQuotient(u1*s-v2+v1,u2); M2:=ExactQuotient(s*(v2+v1+h)-k,u2); u:=-s*M1-M2;
    //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    //upp := upp/LeadingCoefficient(upp);
    t0 := s0/2;
    t1 := t0*u1;
    upp2 := -w1*z3 - up0;
    upp1 := -yn2 + t0 - w1*z2 - up0*upp2;
    upp0 := t1 + v1 - w1*(d1 + yn2*v1 - z3*u0 - z2*u1) - up0*upp1;

    //vpp := V - (V + u*s + v + h) mod upp;
    vpp2 := yn2 - s0;
    vpp1 := -v1 - t1 - t1;
    vpp0 := -v0 - s0*u0;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg12ADDUP():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,n> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,np> in reduced
//                basis where n + np = 1.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with up adjust.                
///////////////////////////////////////////////////////////////////////////////
Deg12ADDUP:= function(u1,u0,v1,v0,up0,vp0,ccs)
    /*//startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + v1*x + v0;
    up := x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + vp0;
    Q := quo<R | up>;
    
    //Formulation
    d := u mod up;
    if IsZero(d) then
        dw := (vp + v + h) mod up; 
        if IsZero(dw) then
            upp := ExactQuotient(u,up);
            vpp := V - (V - v) mod upp;
            return < 0,0,1,Coeff(upp,0),Coeff(V,2),Coeff(V,1),Coeff(vpp,0),0>;
        end if;
        k := ExactQuotient(f-v*(v + h),u);
        s := k*R!(Q!dw^-1) mod up;
        upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); //M1:=ExactQuotient(u1*s-v2+v1,u2); M2:=ExactQuotient(s*(v2+v1+h)-k,u2); u:=-s*M1-M2;
        upp := upp/LeadingCoefficient(upp);
        vpp := V - (V + u*s + v + h) mod upp;
        npp := 3-Degree(upp);
        return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),npp>;
    end if;
    k := ExactQuotient(f - v*(v + h), u);
    s := R!(Q!d^-1)*(vp - v) mod up;
    upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); //M1:=ExactQuotient(u1*s-v2+v1,u2); M2:=ExactQuotient(s*(v2+v1+h)-k,u2); u:=-s*M1-M2;
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (V + u*s + v + h) mod upp;
    npp := 3-Degree(upp);

    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),npp>;
    */ //endIGNORE
    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d0 := ccs[1][3][1];
    d1 := ccs[1][3][2];

    //d := u mod up;
    t0 := up0*u1;
    up2 := up0^2;
    d  := u0 - t0 + up2;
    if IsZero(d) then
        //dw := (vp + v + h) mod up;
        dw := (vp0 + v0 - up0*(v1 + yn1))/2 + up2*(yn2 - up2);
        if IsZero(dw) then
            //upp := ExactQuotient(u,up);
            upp0 := u1 - up0;
            //vpp := V - (V - v) mod upp;
            vpp0 := v0 + upp0*(yn1 - v1);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
        end if;//dw

        //k := ExactQuotient(f-v*(v + h),u);
        //z := k/c4;
        z3 := v1 - yn1;
        t0 := z3*u1;
        z2 := v0 - yn0 - t0;
        t1 := z2*u0;
        z1 := d1 - yn2*v1 - (u0 + u1)*(z2 + z3) + t0 + t1;
        z0 := d0 - v0*yn2 - v1^2/2 - t1 - u1*z1;

        //s := k*R!(Q!(dw*c4)^-1) mod up;
        sp0 := z0 - up0*(z1 - up0*(z2 - up0*z3));
        
        if IsZero(sp0) then
            if IsZero(z3) then
                if IsZero(z2) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,3>;
                end if;//z2

                //upp := ExactQuotient(k, u);
                //upp  := upp/LeadingCoefficient(upp);
                w1   := z2^-1;
                upp0 := w1*z1 - up0;
                
                //vpp := V - (V + v + h) mod upp;
                upp2 := upp0^2;
                vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
            end if;//z3

            //upp := ExactQuotient(k, u);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z3^-1;
            upp1 := w1*z2 - up0;
            upp0 := w1*z1 - up0*upp1;
            
            //vpp := V - (V + v + h) mod upp;
            t1 := -upp1 - upp1;
            t2 := upp1*t1;
            t3 := f6 - upp0 - upp0 - t2;
            t4 := upp0*t3;
            vpp1 := -v1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
            vpp0 := -v0 - t4;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//sp0

        //s := sp0*dw^-1;
        w0 := (sp0*dw)^-1; //1/s0*d^2
        w1 := w0*dw^2;      //1/s0
        s0 := w0*sp0^2; 

        //M1:=ExactQuotient(u1*s-v2+v1,u2); M2:=ExactQuotient(s*(v2+v1+h)-k,u2); u:=-s*M1-M2;
        //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
        //upp := upp/LeadingCoefficient(upp);
        t0 := s0/2;
        t1 := t0*u1;
        upp2 := w1*z3 - up0;
        upp1 := -yn2 - t0 + w1*z2 - up0*upp2;
        upp0 := -t1 - v1 + w1*z1 - up0*upp1;

        //vpp := V - (V + u*s + v + h) mod upp;
        t2 := upp2^2 - upp1;
        t3 := upp1*upp2 - upp0 - t1;
        t4 := upp0*upp2;
        vpp2 := -yn2 - s0 + t2 + t2;
        vpp1 := -v1 + t3 + t3;
        vpp0 := -v0 - s0*u0 + t4 + t4;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d

    //k := ExactQuotient(f-v*(v + h),u);
    //z := k/c4;
    z3 := v1 - yn1;
    z2 := v0 - yn0 - z3*u1;

    //s := R!(Q!d^-1)*(vp - v) mod up;
    sp0 := vp0 - v0 - up0*(yn1 - v1); 

    if IsZero(sp0) then
        if IsZero(z3) then
            if IsZero(z2) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z2

            //upp := ExactQuotient(k, u);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z2^-1;
            upp0 := w1*(d1 - yn2*v1 - z3*u0 - z2*u1) - up0;
            
            //vpp := V - (V + v + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z3

        //upp := ExactQuotient(k, u);
        //upp  := upp/LeadingCoefficient(upp);
        w1   := z3^-1;
        upp1 := w1*z2 - up0;
        upp0 := w1*(d1 - yn2*v1 - z3*u0 - z2*u1) - up0*upp1;
        
        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -v1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -v0 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//sp0

    //s := sp0*d^-1;
    w0 := (sp0*d)^-1; //1/s0*d^2
    w1 := w0*d^2;      //1/s0
    s0 := w0*sp0^2; 

    //M1:=ExactQuotient(u1*s-v2+v1,u2); M2:=ExactQuotient(s*(v2+v1+h)-k,u2); u:=-s*M1-M2;
    //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    //upp := upp/LeadingCoefficient(upp);
    t0 := s0/2;
    t1 := t0*u1;
    upp2 := w1*z3 - up0;
    upp1 := -yn2 - t0 + w1*z2 - up0*upp2;
    upp0 := -t1 - v1 + w1*(d1 - yn2*v1 - z3*u0 - z2*u1) - up0*upp1;

    //vpp := V - (V + u*s + v + h) mod upp;
    t2 := upp2^2 - upp1;
    t3 := upp1*upp2 - upp0 - t1;
    t4 := upp0*upp2;
    vpp2 := -yn2 - s0 + t2 + t2;
    vpp1 := -v1 + t3 + t3;
    vpp0 := -v0 - s0*u0 + t4 + t4;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg12ADDUP2():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,0> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,0> in reduced
//                basis.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with two up adjusts.                
///////////////////////////////////////////////////////////////////////////////
Deg12ADDUP2:= function(u1,u0,v1,v0,up0,vp0,ccs)
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + v1*x + v0;
    up := x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + vp0;
    Q := quo<R | up>;
        
    d := u mod up;
    if IsZero(d) then
        dw := (vp + v + h) mod up; 
        if IsZero(dw) then
            upp := ExactQuotient(u,up);
            vpp := V - (V - v) mod upp;
            upp := ExactQuotient(f-vpp*(vpp + h),upp);
            upp := upp/LeadingCoefficient(upp);                 
            vpp := V - (vpp + h + V) mod upp;
            n := 3 - Degree(upp);
            return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
        end if;
        k := ExactQuotient(f - v*(v + h),u);
        s := R!(Q!dw^-1)*k mod up;
        upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); //M1 := ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        upp := upp/LeadingCoefficient(upp);
        vpp := V - (V + u*s + v + h) mod upp;
        n := 2 - Degree(upp);
        if n lt 0 then
            upp := ExactQuotient(f-vpp*(vpp + h),upp);
            upp := upp/LeadingCoefficient(upp);                 
            vpp := V - (vpp + h + V) mod upp;
            n := 3 - Degree(upp);
        end if;
        return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    end if;
    k := ExactQuotient(f - v*(v + h),u);
    s := R!(Q!d^-1)*(vp - v) mod up;
    upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); //M1 := ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (V + u*s + v + h) mod upp;
    n := 2 - Degree(upp);
    if Degree(upp) eq 3 then
        upp := ExactQuotient(f-vpp*(vpp + h),upp);
        upp := upp/LeadingCoefficient(upp);                 
        vpp := V - (vpp + h + V) mod upp;
        n := 3 - Degree(upp);
    end if;
    
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    */ //endIGNORE
    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d0 := ccs[1][3][1];
    d1 := ccs[1][3][2];
    d8 := ccs[1][3][9];
    d7 := ccs[1][3][8];
    d6 := ccs[1][3][7];
    d5 := ccs[1][3][6];


    
    //d := u mod up;
    t0 := up0*u1;
    up2 := up0^2;
    d  := u0 - t0 + up2;
    if IsZero(d) then
        //dw := (vp + v + h) mod up;
        dw := (vp0 + v0 - up0*(v1 + yn1))/2 + up2*(yn2 - up2);
        if IsZero(dw) then
            //upp := ExactQuotient(u,up);
            u0 := u1 - up0;

            //vpp := V - (V - v) mod upp;
            v0 := v0 + u0*(yn1 - v1);

            //z := (f-v*(v + h))/c4;  
            z4 := v0 - yn0;
            
            if IsZero(z4) then
                z3 := d8;
                if IsZero(z3) then
                    z2 := d7 - v0*yn2;
                    if IsZero(z2) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,3>;
                    end if;//z2

                    //upp := ExactQuotient(f-v*(v + h),u);
                    //upp := upp/LeadingCoefficient(upp);
                    w2 := z2^-1;
                    upp0 := w2*(d6 - v0*yn1) - u0;

                    //vpp := V - (V + vpp + h) mod upp;
                    upp2 := upp0^2;
                    vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//z3

                //upp := ExactQuotient(f-v*(v + h),u);
                //upp := upp/LeadingCoefficient(upp);
                w2  := z3^-1;
                upp1 := w2*(d7 - v0*yn2) - u0;
                upp0 := w2*(d6 - v0*yn1) - u0*upp1;

                //vpp := V - (v + h + V) mod upp;
                t1 := -upp1 - upp1;
                t2 := upp1*t1;
                t3 := f6 - upp0 - upp0 - t2;
                t4 := upp0*t3;
                vpp1 := -yn1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
                vpp0 := -v0 - t4;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//z4

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp); 
            w2  := z4^-1;
            upp2 := w2*d8 - u0;
            upp1 := w2*(d7 - v0*yn2) - u0*upp2;
            upp0 := w2*(d6 - v0*yn1) - u0*upp1;

            //vpp := V - (V + v + h) mod upp;
            t1 := upp2^2 - upp1;
            t2 := upp1*upp2 - upp0;
            t3 := upp0*upp2;
            vpp2 := -yn2 + t1 + t1;
            vpp1 := -yn1 + t2 + t2;
            vpp0 := -v0  + t3 + t3;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>; 
        end if;//dw
        
        //k := ExactQuotient(f-v*(v + h),u);
        //z := k/c4;
        z3 := v1 - yn1;
        t0 := z3*u1;
        z2 := v0 - yn0 - t0;
        t1 := z2*u0;
        z1 := d1 - yn2*v1 - (u0 + u1)*(z2 + z3) + t0 + t1;
        z0 := d0 - v0*yn2 - v1^2/2 - t1 - u1*z1;

        //s := k*R!(Q!(dw*c4)^-1) mod up;
        sp0 := z0 - up0*(z1 - up0*(z2 - up0*z3));
         
        if IsZero(sp0) then
            if IsZero(z3) then
                if IsZero(z2) then
                    
                    
                    return < 0,0,0,1,yn2,yn1,yn0,2>;
                end if;//z2

                //upp := ExactQuotient(k, u);
                //upp  := upp/LeadingCoefficient(upp);
                w1   := z2^-1;
                upp0 := w1*z1 - up0;
                
                //vpp := V - (V + v + h) mod upp;
                upp2 := upp0^2;
                vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
            end if;//z3

            //upp := ExactQuotient(k, u);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z3^-1;
            upp1 := w1*z2 - up0;
            upp0 := w1*z1 - up0*upp1;
            
            //vpp := V - (V + v + h) mod upp;
            t1 := -upp1 -upp1;
            t2 := upp1*t1;
            t3 := f6 - upp0 - upp0 - t2;
            t4 := upp0*t3;
            vpp1 := -v1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
            vpp0 := -v0 - t4;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
        end if;//sp0

        //s := sp0*dw^-1;
        W  := sp0*dw;       //s0*dw^2
        W2 := W^2;
        D  := dw^2;
        //M1:=ExactQuotient(u1*s-v2+v1,u2); M2:=ExactQuotient(s*(v2+v1+h)-k,u2); u:=-s*M1-M2;
        //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
        //upp := upp/LeadingCoefficient(upp);
        sp2 := sp0^2;
        t1 := sp2/2;
        t0 := t1*u1;    
        up2 := -W*up0 + D*z3;
        up1 := -W*yn2 - t1 + D*z2 - up0*up2;
        up0 := -W*v1 - t0 + D*z1 - up0*up1;

        //vpp := V - (V + u*s + v + h) mod upp;
        t1  := up2 + up2;
        cW4 := W + W;
        t2  := up1*cW4;
        t3  := up0*t1;
        yW2 := -yn2*W2;
        t4 := sp2*W;
        vp2 := yW2 - t4 - t2 + up2*t1;
        vp1 := -W2*v1 - W*(t0 + t0) + (up1 - up0)*(cW4 + t1) - t2 + t3;
        vp0 := -W2*v0 - t4*u0 + t3;

        //z := (f-v*(v + h))/c4;
        z6  := vp2 - W2*yn2;                                                  //W2
        
        if IsZero(z6) then
            z5  := vp1 - W2*yn1;
            if IsZero(z5) then
                W3 := W2^2;
                z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
                if IsZero(z4) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,3>;
                end if;//z4

                //upp := ExactQuotient(f-v*(v + h),u);
                //upp := upp/LeadingCoefficient(upp);            
                w0 := (W2*z4)^-1;
                w1 := w0*W2;
                w2 := w0*z4;
                w3 := w2*W;
                upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

                //vpp := V - (V + vpp + h) mod upp;
                upp2 := upp0^2;
                vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
            end if;//z5

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            W3 := W2^2;
            w0 := (W2*z5)^-1;
            w2 := w0*z5;
            w3 := w2*W;
            u2 := up2*w3;
            upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
            upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

            //vpp := V - (v + h + V) mod upp;
            t1 := -upp1 - upp1;
            t2 := upp1*t1;
            t3 := f6 - upp0 - upp0 - t2;
            t4 := upp0*t3;
            vpp1 := -vp1*w2- (upp1 + upp0)*(t1 + t3) + t2 + t4;
            vpp0 := -vp0*w2 - t4;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//z6

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp); 
        w0 := (W2*z6)^-1;
        w1 := w0*W2;
        w2 := w0*z6;
        w3 := w2*W;
        u2 := up2*w3;
        u1 := up1*w3;
        W3 := W2^2; 

        upp2 := w1*(vp1 - W2*yn1) - u2;
        upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
        upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

        //vpp := V - (V + v + h) mod upp;
        t1 := upp2^2 - upp1;
        t2 := upp1*upp2 - upp0;
        t3 := upp0*upp2;
        vpp2 := -vp2*w2 + t1 + t1;
        vpp1 := -vp1*w2 + t2 + t2;
        vpp0 := -vp0*w2 + t3 + t3;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d

    //k := ExactQuotient(f - v*(v + h),u);
    //z := k/c4;
    z3 := v1 - yn1;
    z2 := v0 - yn0 - z3*u1;

    //s := R!(Q!d^-1)*(vp - v) mod up;
    sp0 := vp0 - v0 - up0*(yn1 - v1); 

    if IsZero(sp0) then
        if IsZero(z3) then
            if IsZero(z2) then

                
                return < 0,0,0,1,yn2,yn1,yn0,2>;
            end if;//z2

            //upp := ExactQuotient(k, u);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z2^-1;
            upp0 := w1*(d1 - yn2*v1 - z3*u0 - z2*u1) - up0;
            
            //vpp := V - (V + v + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
        end if;//z3

        //upp := ExactQuotient(k, u);
        //upp  := upp/LeadingCoefficient(upp);
        w1   := z3^-1;
        upp1 := w1*z2 - up0;
        upp0 := w1*(d1 - yn2*v1 - z3*u0 - z2*u1) - up0*upp1;
        
        //vpp := V - (V + v + h) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -v1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -v0 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
    end if;//sp0

    //s := sp0*dw^-1;
    W  := sp0*d;       //s0*d^2
    W2 := W^2;
    D  := d^2;

    //M1:=ExactQuotient(u1*s-v2+v1,u2); M2:=ExactQuotient(s*(v2+v1+h)-k,u2); u:=-s*M1-M2;
    //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    //upp := upp/LeadingCoefficient(upp);
    sp2 := sp0^2;
    t1 := sp2/2;
    t0 := t1*u1;       
    up2 := -W*up0 + D*z3;
    up1 := -W*yn2 - t1 + D*z2 - up0*up2;
    up0 := -W*v1 - t0 + D*(d1 - yn2*v1 - z3*u0 - z2*u1) - up0*up1;

    //vpp := V - (V + u*s + v + h) mod upp;
    t1  := up2 + up2;
    cW4 := W + W;
    t2  := up1*cW4;
    t3  := up0*t1;
    yW2 := -yn2*W2;
    t4 := sp2*W;
    vp2 := yW2 - t4 - t2 + up2*t1;
    vp1 := -W2*v1 - W*(t0 + t0) + (up1 - up0)*(cW4 + t1) - t2 + t3;
    vp0 := -W2*v0 - t4*u0 + t3;

    //z := (f-v*(v + h))/c4;
    z6  := vp2 - W2*yn2;                                                  //W2
    
    if IsZero(z6) then
        z5  := vp1 - W2*yn1;
        if IsZero(z5) then
            W3 := W2^2;
            
            z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
            if IsZero(z4) then

                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z4

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);            
            w0 := (W2*z4)^-1;
            w1 := w0*W2;
            w2 := w0*z4;
            w3 := w2*W;
            upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z5

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        W3 := W2^2;
        
        w0 := (W2*z5)^-1;
        w2 := w0*z5;
        w3 := w2*W;
        u2 := up2*w3;
        upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
        upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -vp1*w2- (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -vp0*w2 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//z6

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w0 := (W2*z6)^-1;
    w1 := w0*W2;
    w2 := w0*z6;
    w3 := w2*W;
    u2 := up2*w3;
    u1 := up1*w3;
    W3 := W2^2; 
    
    upp2 := w1*(vp1 - W2*yn1) - u2;
    upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
    upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

    //vpp := V - (V + v + h) mod upp;
    t1 := upp2^2 - upp1;
    t2 := upp1*upp2 - upp0;
    t3 := upp0*upp2;
    vpp2 := -vp2*w2 + t1 + t1;
    vpp1 := -vp1*w2 + t2 + t2;
    vpp0 := -vp0*w2 + t3 + t3;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg13ADD():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,2> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,2> in reduced
//                basis.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with down adjust.                
///////////////////////////////////////////////////////////////////////////////
Deg13ADD:= function(u2,u1,u0,v2,v1,v0,up0,vp0,ccs)
    /*//startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    Vp := R!ccs[1][3];
    V := R!ccs[1][4];
    u := x^3 + u2*x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + v2*x^2 + v1*x + R!v0;
    up := x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + R!vp0;
    Q := quo<R | up>;
    
    //Formulation
    d := u mod up;
    if IsZero(d) then
        dw := (vp + v + h) mod up; 
        if IsZero(dw) then
            upp := ExactQuotient(u,up);
            vpp := V - (V - v) mod upp;
            return < 0,1,Coeff(upp,1),Coeff(upp,0),Coeff(V,2),Coeff(vpp,1),Coeff(vpp,0),1>;
        end if;
        v := Vp - ((Vp - v) mod u);
        k := ExactQuotient(f-v*(v + h),u);
        s := k*R!(Q!dw^-1) mod up;
        upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        upp := upp/LeadingCoefficient(upp);
        vpp := V - (V + u*s + v + h) mod upp;
        return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
    end if;
    v := Vp - ((Vp - v) mod u);
    s := R!(Q!d^-1)*(vp - v) mod up;
    k := ExactQuotient(f-v*(v + h),u);
    upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (V + u*s + v + h) mod upp;
                       
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
    *///endIGNORE

    f3 := ccs[1][1][4];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d5 := ccs[1][3][6];
    d1 := ccs[1][3][2];

    //d := u mod up;
    d := u0 - up0*(u1 - up0*(u2 - up0));
    if IsZero(d) then
        //dw := (vp + v + h) mod up; 
        up2 := up0^2;
        dw := vp0 + v0 - up0*(v1 + yn1 - up0*(v2 + yn2 - up2 - up2));
        if IsZero(dw) then
            //upp := ExactQuotient(u,up);
            upp1 := u2 - up0;
            upp0 := u1 - up0*(u2 - up0);

            //vpp := V - (V - v) mod upp;
            t0 := yn2 - v2;
            vpp1 := v1 + upp1*t0;
            vpp0 := v0 + upp0*t0;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//dw

        //v := Vp - (Vp - v) mod u;
        t0 := -u2 - u2;
        v2 := v2 + u1 + u1 + u2*t0;
        v1 := v1 + u0 + u0 + u1*t0; 
        v0 := v0 + u0*t0; 

        //k := ExactQuotient(f-v*(v + h),u);
        //z := k/c4; 
        t1  := -yn1 - v1;
        z3 := -yn2 - v2;
        t2 := z3*u2;
        z2 := t1 - t2;
        t3 := z2*u1;
        z1 := -yn0 - v0 - v2^2/2 - d5 - (u1 + u2)*(z2 + z3) + t3 + t2;
        z0 := d1 - v2*v1 - u0*z3 - t3 - u2*z1;

        //s := z*R!(Q!dw^-1) mod up;
        sp0 := z0 - up0*(z1 - up0*(z2 - up0*z3));

        if IsZero(sp0) then
            if IsZero(z3) then
                if IsZero(z2) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,0>;
                end if;//z2

                //upp := ExactQuotient(k, up);
                //upp  := upp/LeadingCoefficient(upp);
                w1   := z2^-1;
                upp0 := w1*z1 - up0;
                
                //vp  := V - (V + v + h) mod upp;
                vpp0 := - v0 + upp0*(v1 + yn1 - upp0*(v2 + yn2));

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
            end if;//z3

            //upp := ExactQuotient(k, up);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z3^-1;
            upp1 := w1*z2 - up0;
            upp0 := w1*z1 - up0*upp1;
            
            //vp  := V  - (V + v + h) mod upp;
            t0 := -yn2 - v2;
            vpp1 := -v1- upp1*t0;
            vpp0 := -v0 - upp0*t0;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
        end if;//sp0

        //s := sp0*dw^-1;
        dw := dw/2;
        w0 := (sp0*dw)^-1; //1/s0*d^2
        w1 := w0*dw^2;      
        s0 := w0*sp0^2;     

        //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
        //upp := upp/LeadingCoefficient(upp);
        t0 := s0/2;
        upp2 := t0 - z3*w1 - up0;
        upp1 := v2 + t0*u2 - z2*w1 - up0*upp2; 
        upp0 := v1 + t0*u1 - z1*w1 - up0*upp1;

        //vpp := V - (V + u*s + v + h) mod upp;
        vpp2 := -v2 + s0*(upp2 - u2);
        vpp1 := -v1 + s0*(upp1 - u1);
        vpp0 := -v0 + s0*(upp0 - u0);

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d
    
    //v := Vp - (Vp - v) mod u;
    t0 := -u2 - u2;
    v2 := v2 + u1 + u1 + u2*t0;
    v1 := v1 + u0 + u0 + u1*t0; 
    v0 := v0 + u0*t0; 

    //k := ExactQuotient(f-v*(v + h),u);
    //z := k/c4; 
    t1 := -yn1 - v1;
    z3 := -yn2 - v2;
    z2 := t1 - z3*u2;
    z1 := -yn0 - v0 - v2^2/2 - d5 - z3*u1 - z2*u2;

    //s := R!(Q!d^-1)*(vp - v) mod up;
    up2 := up0^2;
    sp0 := vp0 - v0 - up0*(yn1 - v1 - up0*(yn2 - v2 - up2 - up2));

    if IsZero(sp0) then
        if IsZero(z3) then
            if IsZero(z2) then

                
                return < 0,0,0,1,yn2,yn1,yn0,0>;
            end if;//z2

            //upp := ExactQuotient(k, up);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z2^-1;
            upp0 := w1*z1 - up0;
            
            //vp  := V - (V + v + h) mod upp;
            vpp0 := -v0 + upp0*(v1 + yn1 - upp0*(v2 + yn2));

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
        end if;//z3

        //upp := ExactQuotient(k, up);
        //upp  := upp/LeadingCoefficient(upp);
        w1   := z3^-1;
        upp1 := w1*z2 - up0;
        upp0 := w1*z1 - up0*upp1;
        
        //vp  := V  - (V + v + h) mod upp;
        t0 := -yn2 - v2;
        vpp1 := -v1 - upp1*t0;
        vpp0 := -v0 - upp0*t0;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
    end if;//sp0

    //s := sp0*d^-1;
    w0 := (sp0*d)^-1; //1/s0*d^2
    w1 := w0*d^2;      //1/s0
    s0 := w0*sp0^2; 

    //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    //upp := upp/LeadingCoefficient(upp);
    t0 := s0/2;
    upp2 := t0 - z3*w1 - up0;
    upp1 := v2 + t0*u2 - z2*w1 - up0*upp2; 
    upp0 := v1 + t0*u1 - z1*w1 - up0*upp1;

    //vpp := V - (V + u*s + v + h) mod upp;
    vpp2 := -v2 + s0*(upp2 - u2);
    vpp1 := -v1 + s0*(upp1 - u1);
    vpp0 := -v0 + s0*(upp0 - u0);

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg12ADDUP():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,n> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,np> in reduced
//                basis where n + np = 1.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with up adjust.                
///////////////////////////////////////////////////////////////////////////////
Deg13ADDUP:= function(u2,u1,u0,v2,v1,v0,up0,vp0,ccs)
    /*//startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x^3 + u2*x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + v2*x^2 + v1*x + R!v0;
    up := x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + R!vp0;
    Q := quo<R | up>;
    
    //Formulation
    d := u mod up;
    if IsZero(d) then
        dw := (vp + v + h) mod up; 
        if IsZero(dw) then
            upp := ExactQuotient(u,up);
            vpp := V - (V - v) mod upp;
            return < 0,1,Coeff(upp,1),Coeff(upp,0),Coeff(V,2),Coeff(vpp,1),Coeff(vpp,0),0>;
        end if;
        k := ExactQuotient(f-v*(v + h),u);
        s := k*R!(Q!dw^-1) mod up;
        upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        upp := upp/LeadingCoefficient(upp);
        vpp := V - (V + u*s + v + h) mod upp;
        n := 3-Degree(upp);
        return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    end if;
    k := ExactQuotient(f - v*(v + h), u);
    s := R!(Q!d^-1)*(vp - v) mod up;
    upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); //M1 := ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (V + u*s + v + h) mod upp;
    n := 3-Degree(upp);

    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    */ //endIGNORE

    
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d5  := ccs[1][3][6];
    d1 := ccs[1][3][2];


    //d := u mod up;
    d := u0 - up0*(u1 - up0*(u2 - up0));
    if IsZero(d) then
        //dw := (vp + v + h) mod up; 
        up2 := up0^2;
        dw := (vp0 + v0 - up0*(v1 + yn1 - up0*(v2 + yn2 - up2 - up2)))/2;
        if IsZero(dw) then
            //upp := ExactQuotient(u,up);
            upp1 := u2 - up0;
            upp0 := u1 - up0*(u2 - up0);

            //vpp := V - (V - v) mod upp;
            t0 := yn2 - v2;
            vpp1 := v1 + upp1*t0;
            vpp0 := v0 + upp0*t0;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
        end if;//dw

        //k := ExactQuotient(f-v*(v + h),u);
        //z := k/c4; 
        t1  := v1 - yn1;
        z3 := v2 - yn2;
        t2 := z3*u2;
        z2 := t1 - t2;
        t3 := z2*u1;
        z1 := v0 - yn0 - v2^2/2 - d5 - (u1 + u2)*(z2 + z3) + t3 + t2;
        z0 := d1 - v2*v1 - u0*z3 - t3 - u2*z1;

        //s := z*R!(Q!dw^-1) mod up;
        sp0 := z0 - up0*(z1 - up0*(z2 - up0*z3));
        
        if IsZero(sp0) then
            if IsZero(z3) then
                if IsZero(z2) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,3>;
                end if;//z2

                //upp := ExactQuotient(k, up);
                //upp  := upp/LeadingCoefficient(upp);
                w1   := z2^-1;
                upp0 := w1*z1 - up0;
                upp2 := upp0^2;
                
                //vp  := V - (V + v + h) mod upp;
                vpp0 := -v0 + upp0*(v1 + yn1 - upp0*(v2 + yn2 - upp2 - upp2));

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
            end if;//z3

            //upp := ExactQuotient(k, up);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z3^-1;
            upp1 := w1*z2 - up0;
            upp0 := w1*z1 - up0*upp1;
            
            //vp  := V  - (V + v + h) mod upp;
            t0 := upp1 + upp1;
            t1 := upp1*t0;
            t2 := v2 + yn2 + upp0 + upp0 - t1;
            t3 := upp0*t2;
            vpp1 := -v1  + (upp0 + upp1)*(t0 + t2) - t1 - t3;
            vpp0 := -v0 + t3;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//sp0

        //s := dw^-1*sp0;
        w0 := (sp0*dw)^-1; //1/s0*d^2
        w1 := w0*dw^2;      //1/s0
        s0 := w0*sp0^2; 

        //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
        //upp := upp/LeadingCoefficient(upp);
        t2 := -s0/2;
        t0 := t2*u2;
        t1 := t2*u1;
        upp2 := t2 + z3*w1 - up0;
        upp1 := -v2 + t0 + z2*w1 - up0*upp2; 
        upp0 := -v1 + t1 + z1*w1 - up0*upp1;

        //vpp := V - (V + u*s + v + h) mod upp;
        t2 := s0 + upp2 + upp2;
        t3 := t0 - upp1;
        t4 := t1 - upp0;
        vpp2 := -v2 + t3 + t3 + upp2*t2;
        vpp1 := -v1 + t4 + t4 + upp1*t2;
        vpp0 := -v0 - u0*s0 + upp0*t2;
        
        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d

    //k := ExactQuotient(f-v*(v + h),u);
    //z := k/c4; 
    t1  := v1 - yn1;
    z3 := v2 - yn2;
    z2 := t1 - z3*u2;
    z1 := v0 - yn0 - v2^2/2 - d5 - z3*u1 - z2*u2;

    //s := R!(Q!d^-1)*(vp - v) mod up;
    sp0 := vp0 - v0 + up0*(t1 - up0*z3);
    
    if IsZero(sp0) then
        if IsZero(z3) then
            if IsZero(z2) then

                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z2

            //upp := ExactQuotient(k, up);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z2^-1;
            upp0 := w1*z1 - up0;
            upp2 := upp0^2;
            
            //vp  := V - (V + v + h) mod upp;
            vpp0 := -v0 + upp0*(v1 + yn1 - upp0*(v2 + yn2 - upp2 - upp2));

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z3

        //upp := ExactQuotient(k, up);
        //upp  := upp/LeadingCoefficient(upp);
        w1   := z3^-1;
        upp1 := w1*z2 - up0;
        upp0 := w1*z1 - up0*upp1;
        
        //vp  := V  - (V + v + h) mod upp;
        t0 := upp1 + upp1;
        t1 := upp1*t0;
        t2 := v2 + yn2 + upp0 + upp0 - t1;
        t3 := upp0*t2;
        vpp1 := -v1  + (upp0 + upp1)*(t0 + t2) - t1 - t3;
        vpp0 := -v0 + t3;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//sp0

    //s := d^-1*sp0;
    w0 := (sp0*d)^-1; //1/s0*d^2
    w1 := w0*d^2;      //1/s0
    s0 := w0*sp0^2; 

    //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    //upp := upp/LeadingCoefficient(upp);
    t2 := -s0/2;
    t0 := t2*u2;
    t1 := t2*u1;
    upp2 := t2 + z3*w1 - up0;
    upp1 := -v2 + t0 + z2*w1 - up0*upp2; 
    upp0 := -v1 + t1 + z1*w1 - up0*upp1;

    //vpp := V - (V + u*s + v + h) mod upp;
    t2 := s0 + upp2 + upp2;
    t3 := t0 - upp1;
    t4 := t1 - upp0;
    vpp2 := -v2 + t3 + t3 + upp2*t2;
    vpp1 := -v1 + t4 + t4 + upp1*t2;
    vpp0 := -v0 - u0*s0 + upp0*t2;
    
    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg12ADDUP2():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,0> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,0> in reduced
//                basis.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with two up adjusts.                
///////////////////////////////////////////////////////////////////////////////
Deg13ADDUP2:= function(u2,u1,u0,v2,v1,v0,up0,vp0,ccs)
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    u := x^3 + u2*x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + v2*x^2 + v1*x + R!v0;
    up := x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + Coeff(V,1)*x + R!vp0;
    Q := quo<R | up>;
    
    d := u mod up;
    if IsZero(d) then
        dw := (vp + v + h) mod up; 
        if IsZero(dw) then
            upp := ExactQuotient(u,up);
            vpp := V - (V - v) mod upp;
            upp := ExactQuotient(f-vpp*(vpp + h),upp);
            upp := upp/LeadingCoefficient(upp);                 
            vpp := V - (vpp + h + V) mod upp;
            n := 3 - Degree(upp);
            return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
        end if;
        k := ExactQuotient(f - v*(v + h),u);
        s := R!(Q!dw^-1)*k mod up;
        upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); //M1 := ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        upp := upp/LeadingCoefficient(upp);
        vpp := V - (V + u*s + v + h) mod upp;
        n := 2 - Degree(upp);
        if n lt 0 then
            upp := ExactQuotient(f-vpp*(vpp + h),upp);
            upp := upp/LeadingCoefficient(upp);                 
            vpp := V - (vpp + h + V) mod upp;
            n := 3 - Degree(upp);
        end if;
        return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    end if;

    k := ExactQuotient(f - v*(v + h),u);
    s := R!(Q!d^-1)*(vp - v) mod up;
    upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); //M1 := ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (V + u*s + v + h) mod upp;
    n := 2 - Degree(upp);
    if Degree(upp) eq 3 then
        upp := ExactQuotient(f-vpp*(vpp + h),upp);
        upp := upp/LeadingCoefficient(upp);                 
        vpp := V - (vpp + h + V) mod upp;
        n := 3 - Degree(upp);
    end if;
    
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    */ //endIGNORE
    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d1 := ccs[1][3][2];
    d0 := ccs[1][3][1];
    d5 := ccs[1][3][6];

    //d := u mod up;
    d := u0 - up0*(u1 - up0*(u2 - up0));
    if IsZero(d) then
        //dw := (vp + v + 0h) mod up;
        up2 := up0^2;
        dw := (vp0 + v0- up0*(v1 + yn1 - up0*(v2 + yn2 - up2 - up2)))/2;
        if IsZero(dw) then
            //u := ExactQuotient(u,up);
            u0 := u1 - up0*(u2 - up0);
            u1 := u2 - up0;
            
            //v := V - (V - v) mod u;
            t0 := yn2 - v2;
            v1 := v1 + u1*t0;
            v0 := v0 + u0*t0;

            //z := (f-v*(v + h))/c4; 
            z5 := v1 - yn1;
            z4 := v0 - yn0;
            z3 := d1 - v1*yn2;
            z2 := d0 - v0*yn2 - v1^2/2;

            if IsZero(z5) then
                if IsZero(z4) then
                    if IsZero(z3) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,3>;
                    end if;//z3

                    //upp := ExactQuotient(f-v*(v + h),u);
                    //upp := upp/LeadingCoefficient(upp);
                    w2 := z3^-1;
                    upp0 := w2*z2 - u1;

                    //vpp := V - (V + vpp + h) mod upp;
                    upp2 := upp0^2;
                    vpp0 := -v0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//z4

                //upp := ExactQuotient(f-v*(v + h),u);
                //upp := upp/LeadingCoefficient(upp);
                w2  := z4^-1;
                upp1 := w2*z3 - u1;
                upp0 := w2*z2 - u0 - u1*upp1;

                //vpp := V - (v + h + V) mod upp;
                t1 := -upp1 - upp1;
                t2 := upp1*t1;
                t3 := f6 - upp0 - upp0 - t2;
                t4 := upp0*t3;
                vpp1 := -yn1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
                vpp0 := -v0 - t4;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//z5

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp); 
            w2  := z5^-1;
            upp2 := w2*z4 - u1;
            upp1 := w2*z3 - u0 - u1*upp2;
            upp0 := w2*z2 - u0*upp2 - u1*upp1;

            //vpp := V - (V + v + h) mod upp;
            t1 := upp2^2 - upp1;
            t2 := upp1*upp2 - upp0;
            t3 := upp0*upp2;
            vpp2 := -yn2 + t1 + t1;
            vpp1 := -v1 + t2 + t2;
            vpp0 := -v0 + t3 + t3;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
        end if;//dw

        //k := ExactQuotient(f-v*(v + h),u);
        //z := k/c4; 
        t1  := v1 - yn1;
        z3 := v2 - yn2;
        t2 := z3*u2;
        z2 := t1 - t2;
        t3 := z2*u1;
        z1 := v0 - yn0 - v2^2/2 - d5 - (u1 + u2)*(z2 + z3) + t3 + t2;
        z0 := d1 - v2*v1 - u0*z3 - t3 - u2*z1;

        //s := R!(Q!dw^-1)*k mod up;
        sp0 := z0 - up0*(z1 - up0*(z2 - up0*z3));
        
        if IsZero(sp0) then
            if IsZero(z3) then
                if IsZero(z2) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,2>;
                end if;//z2

                //upp := ExactQuotient(k, up);
                //upp  := upp/LeadingCoefficient(upp);
                w1   := z2^-1;
                upp0 := w1*z1 - up0;
                upp2 := upp0^2;
                
                //vp  := V - (V + v + h) mod upp;
                vpp0 := -v0 + upp0*(v1 + yn1 - upp0*(v2 + yn2 - upp2 - upp2));

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
            end if;//z3

            //upp := ExactQuotient(k, up);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z3^-1;
            upp1 := w1*z2 - up0;
            upp0 := w1*z1 - up0*upp1;
            
            //vp  := V  - (V + v + h) mod upp;
            t0 := upp1 + upp1;
            t1 := upp1*t0;
            t2 := v2 + yn2 + upp0 + upp0 - t1;
            t3 := upp0*t2;
            vpp1 := -v1  + (upp0 + upp1)*(t0 + t2) - t1 - t3;
            vpp0 := -v0 + t3;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
        end if;//sp0

        //s := d^-1*sp0;
        W  := sp0*dw;       //s0*d^2
        W2 := W^2;
        D  := dw^2;
        sp2 := sp0^2;

        //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
        //upp := upp/LeadingCoefficient(upp);
        t2 := -sp2/2;
        t0 := t2*u2;
        t1 := t2*u1;
        up2 := -W*up0 + t2 + z3*D;
        up1 := -W*v2 + t0 + z2*D - up0*up2; 
        up0 := -W*v1 + t1 + z1*D - up0*up1;

        //vpp := V - (V + u*s + v + h) mod upp;
        t2 := sp2 + up2 + up2;
        t3 := up1 + up1;
        t4 := up0*t2;
        vp2 := -W2*v2 + W*(t0 + t0 - t3) + up2*t2;
        vp1 := -W2*v1 + W*(t1 + t1 - t3) + (up1 - up0)*(W + W + t2) + t4;
        vp0 := -W2*v0 - W*sp2*u0 + t4;

        //z := (f-v*(v + h))/c4;
        z6  := vp2 - W2*yn2;                                                  //W2

        if IsZero(z6) then
            z5  := vp1 - W2*yn1;
            if IsZero(z5) then
                W3 := W2^2;
                
                z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
                if IsZero(z4) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,3>;
                end if;//z4

                //upp := ExactQuotient(f-v*(v + h),u);
                //upp := upp/LeadingCoefficient(upp);            
                w0 := (W2*z4)^-1;
                w1 := w0*W2;
                w2 := w0*z4;
                w3 := w2*W;
                upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

                //vpp := V - (V + vpp + h) mod upp;
                upp2 := upp0^2;
                vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
            end if;//z5

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            W3 := W2^2;
            
            w0 := (W2*z5)^-1;
            w2 := w0*z5;
            w3 := w2*W;
            u2 := up2*w3;
            upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
            upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

            //vpp := V - (v + h + V) mod upp;
            t1 := -upp1 - upp1;
            t2 := upp1*t1;
            t3 := f6 - upp0 - upp0 - t2;
            t4 := upp0*t3;
            vpp1 := -vp1*w2- (upp1 + upp0)*(t1 + t3) + t2 + t4;
            vpp0 := -vp0*w2 - t4;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//z6

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp); 
        w0 := (W2*z6)^-1;
        w1 := w0*W2;
        w2 := w0*z6;
        w3 := w2*W;
        u2 := up2*w3;
        u1 := up1*w3;
        W3 := W2^2; 
        
        upp2 := w1*(vp1 - W2*yn1) - u2;
        upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
        upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

        //vpp := V - (V + v + h) mod upp;
        t1 := upp2^2 - upp1;
        t2 := upp1*upp2 - upp0;
        t3 := upp0*upp2;
        vpp2 := -vp2*w2 + t1 + t1;
        vpp1 := -vp1*w2 + t2 + t2;
        vpp0 := -vp0*w2 + t3 + t3;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d

    //k := ExactQuotient(f-v*(v + h),u);
    //z := k/c4; 
    t1  := v1 - yn1;
    z3 := v2 - yn2;
    z2 := t1 - z3*u2;
    z1 := v0 - yn0 - v2^2/2 - d5 - z3*u1 - z2*u2;

    //s := R!(Q!d^-1)*(vp - v) mod up;
    sp0 := vp0 - v0 + up0*(t1 - up0*z3);
    
    if IsZero(sp0) then
        if IsZero(z3) then
            if IsZero(z2) then

                
                return < 0,0,0,1,yn2,yn1,yn0,2>;
            end if;//z2

            //upp := ExactQuotient(k, up);
            //upp  := upp/LeadingCoefficient(upp);
            w1   := z2^-1;
            upp0 := w1*z1 - up0;
            upp2 := upp0^2;
            
            //vp  := V - (V + v + h) mod upp;
            vpp0 := -v0 + upp0*(v1 + yn1 - upp0*(v2 + yn2 - upp2 - upp2));

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
        end if;//z3

        //upp := ExactQuotient(k, up);
        //upp  := upp/LeadingCoefficient(upp);
        w1   := z3^-1;
        upp1 := w1*z2 - up0;
        upp0 := w1*z1 - up0*upp1;
        
        //vp  := V  - (V + v + h) mod upp;
        t0 := upp1 + upp1;
        t1 := upp1*t0;
        t2 := v2 + yn2 + upp0 + upp0 - t1;
        t3 := upp0*t2;
        vpp1 := -v1  + (upp0 + upp1)*(t0 + t2) - t1 - t3;
        vpp0 := -v0 + t3;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
    end if;//sp0

    //s := d^-1*sp0;
    W  := sp0*d;       //s0*d^2
    W2 := W^2;
    D  := d^2;
    sp2 := sp0^2;

    //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    //upp := upp/LeadingCoefficient(upp);
    t2 := -sp2/2;
    t0 := t2*u2;
    t1 := t2*u1;
    up2 := -W*up0 + t2 + z3*D;
    up1 := -W*v2 + t0 + z2*D - up0*up2; 
    up0 := -W*v1 + t1 + z1*D - up0*up1;

    //vpp := V - (V + u*s + v + h) mod upp;
    t2 := sp2 + up2 + up2;
    t3 := up1 + up1;
    t4 := up0*t2;
    vp2 := -W2*v2 + W*(t0 + t0 - t3) + up2*t2;
    vp1 := -W2*v1 + W*(t1 + t1 - t3) + (up1 - up0)*(W + W + t2) + t4;
    vp0 := -W2*v0 - W*sp2*u0 + t4;

    //z := (f-v*(v + h))/c4;
    z6  := vp2 - W2*yn2;                                                  //W2
    
    if IsZero(z6) then
        z5  := vp1 - W2*yn1;
        if IsZero(z5) then
            W3 := W2^2;
            
            z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
            if IsZero(z4) then

                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z4

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);            
            w0 := (W2*z4)^-1;
            w1 := w0*W2;
            w2 := w0*z4;
            w3 := w2*W;
            upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z5

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        W3 := W2^2;
        
        w0 := (W2*z5)^-1;
        w2 := w0*z5;
        w3 := w2*W;
        u2 := up2*w3;
        upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
        upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -vp1*w2- (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -vp0*w2 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//z6

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w0 := (W2*z6)^-1;
    w1 := w0*W2;
    w2 := w0*z6;
    w3 := w2*W;
    u2 := up2*w3;
    u1 := up1*w3;
    W3 := W2^2; 
    
    upp2 := w1*(vp1 - W2*yn1) - u2;
    upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
    upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

    //vpp := V - (V + v + h) mod upp;
    t1 := upp2^2 - upp1;
    t2 := upp1*upp2 - upp0;
    t3 := upp0*upp2;
    vpp2 := -vp2*w2 + t1 + t1;
    vpp1 := -vp1*w2 + t2 + t2;
    vpp0 := -vp0*w2 + t3 + t3;
    
    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg22ADD():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,2> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,2> in reduced
//                basis.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with down adjust.                
///////////////////////////////////////////////////////////////////////////////
Deg22ADD:= function(u1,u0,v1,v0,up1,up0,vp1,vp0,ccs)
    /* //startIGNORE
    //Poly Dev Tesk2*u0
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    Vp:= R!ccs[1][3];
    u := x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + v1*x + v0;
    up := x^2 + up1*x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + vp1*x + vp0;
    Q := quo<R | up>;

    //Formulation
    v := Vp - ((Vp - v) mod u);
    dw1 := u mod up; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up);
    d := Resultant(u,up); // computed with 2x2 system
    if IsZero(d) then
        if IsZero(dw1) then //u = up
            dw2 := (vp+v+h) mod u;// = (b2^-1)*S for S,a2,b2 = XGCD(u,v + vp + h);
            if IsZero(dw2) then //vp = -v-h
                return < 0,0,0,1,Coeff(V,2),Coeff(V,1),Coeff(V,0),2>;
            end if;
            k := ExactQuotient(f - v*(v + h),u);
            b2 := LeadingCoefficient(dw2)^-1;
            u := ExactQuotient(u,dw2*b2);
            s := b2*k mod u;
            upp := u^2;
            vpp := V - (V - v - u*s) mod upp;
            return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),1>;
        end if;
        
        a1 := LeadingCoefficient(dw1)^-1;
        S1 := dw1*a1;
        
        dw3 := (vp+v+h) mod S1;// = (b2^-1)*S for S,a2,b2 = XGCD(S1,v + vp + h);
        if IsZero(dw3) then
            //S,a2,b2 := XGCD(S1,vp+v + h);
            //S1 = S, a2 = 1, b2 = 0;
            u := ExactQuotient(u,S1);
            up := ExactQuotient(up,S1);
            s  := a1*(vp - v) mod up;
            upp := u*up;
            vpp := V - (V - v - u*s) mod upp;
            return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),1>;
        end if;

        k := ExactQuotient(f - v*(v + h),u);
        //S,a2,b2 := XGCD(S1,vp+v + h);
        //S := 1;
        b2 :=FF!dw3^-1;
        t := (1 - b2*(v + vp + h)) mod up;
        a2 := ExactQuotient(t,S1);
        s  := (a2*a1*(vp - v) + b2*k) mod up;
        //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        upp   := upp/LeadingCoefficient(upp);
        vpp   := V - (V + s*u + v + h) mod upp;
            
        return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
    end if;
    
    s := R!(Q!dw1^-1)*(vp - v) mod up;
    k := ExactQuotient(f-v*(v + h),u);
    //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (V + u*s + v + h) mod upp;

    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
    *///endIGNORE
    f3:= ccs[1][1][4];
    f2:= ccs[1][1][3];
    f6:= ccs[1][1][7];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 

    //v := Vp - ((Vp - v) mod u);
    t0 := -u1 - u1;
    t1 := u1*t0;
    t2 := f6 - u0 - u0 - t1;
    t3 := u0*t2;
    v1 := v1 + (u0 + u1)*(t0 + t2) - t1 - t3;
    v0 := v0 + t3;

    //d := Resultant(u,up); // computed with 2x2 system
    m3 := up1 - u1;
    m4 := u0 - up0;
    m1 := m4 + up1*m3;
    m2 := -up0*m3;
    d  := m1*m4 - m2*m3;

    if IsZero(d) then
        //dw1 := u mod up; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up);
        if IsZero(m3) then //u = up
            //dw2 := (vp+v+h) mod u;// = (b2^-1)*S for S,a2,b2 = XGCD(u,v + vp + h);

            dw21:= vp1 + v1;
            dw20:= vp0 + v0;
            if IsZero(dw21) then //vp = -v-h

                
                return < 0,0,0,1,yn2,yn1,yn0,2>;
            end if;//dw21

            //k := ExactQuotient(f - v*(v + h),u);
            t0 := -yn1 - v1;
            k3 := t0 + t0;
            t1 := k3*u1;
            t3 := -yn0 - v0;
            k2 := t3 + t3 - t1;
            t2 := k2*u0;
            k1 := f3 - f6*v1 - (u0 + u1 )*(k3 + k2) + t1 + t2;
            k0 := f2 - f6*v0 - v1^2 - t2 - u1*k1;

            //b2 := LeadingCoefficient(dw2)^-1;
            b2 := dw21^-1;

            //u := ExactQuotient(u,dw2*b2);
            u0 := u1 - dw20*b2;   

            //s := b2*k mod u;         
            s0 := b2*(k0 - u0*(k1 - u0*(k2 - u0*k3)));

            //upp := u^2;
            upp1 := u0 + u0;
            upp0 := u0^2;

            //vpp := V - (V - v - u*s) mod upp;
            t0 := upp1 + upp1;
            t1 := upp1*t0;
            t2 := upp0 + upp0 - f6 - t1;
            t3 := upp0*t2;
            vpp1 := v1 + s0 + (upp0 + upp1)*(t0 + t2) - t1 - t3;
            vpp0 := v0 + s0*u0 + t3;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//m3

        //a1 := LeadingCoefficient(dw1)^-1; //a1 := (-m3)^-1;
        //S1 := dw1*a1;//S10 := m4*a1;//S1 := x + S10;
        //dw := (vp+v+h) mod S1;// = (b2^-1)*S for S,a2,b2 = XGCD(S1,v + vp + h);
        t1 := vp1 + v1;
        dw := m3*(vp0 + v0) + m4*t1; //weight m3

        if IsZero(dw) then
            //S,a2,b2 := XGCD(S1,vp+v + h);
            //S1 = S, a2 = 1, b2 = 0;

            //a1 := LeadingCoefficient(dw1)^-1;
            //S1 := dw1*a1;
            a1 := -m3^-1;
            S10 := m4*a1;

            //u := ExactQuotient(u,S1);
            //up := ExactQuotient(up,S1);
            u0 := u1 - S10;             
            up0 := up1 - S10;
            up2 := up0^2;

            //s  := a1*(vp - v) mod up;
            s0 := a1*(vp0 - v0 - up0*(vp1 - v1 + up0*(f6 + up2 + up2)));

            //upp := u*up;
            upp1 := u0 + up0;
            upp0 := u0*up0;

            //vpp := V - (V - v - u*s) mod upp;
            t0 := upp1 + upp1;
            t1 := upp1*t0;
            t2 := upp0 + upp0 - f6 - t1;
            t3 := upp0*t2;
            vpp1 := v1 + s0 + (upp0 + upp1)*(t0 + t2) - t1 - t3;
            vpp0 := v0 + s0*u0 + t3;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//dw

        //k := ExactQuotient(f - v*(v + h),u);
        t2 := -yn1 - v1;
        k3 := t2 + t2;
        t3 := k3*u1;
        t5 := -yn0 - v0;
        k2 := t5 + t5 - t3;
        t4 := k2*u0;
        k1 := f3 - f6*v1 - (u0 + u1 )*(k3 + k2) + t3 + t4;
        k0 := f2 - f6*v0 - v1^2 - t4 - u1*k1;

        //b2 :=FF!(dw/m3)^-1;
        //t := 1 - b2*(v + vp + h);
        //a2 := ExactQuotient(t,S1);
        //a2 := -t1*(m3/dw);
        //s := (a2*a1*(vp - v) + b2*k) mod up;
        //sp := (t1*(vp - v) + m3*k) mod up;
        //s := sp/dw;
        t0 := m3*k3 + t1*(up1 + up1);
        t2 := up1*t0;
        t3 := m3*k2 - t1*(f6 - up0 - up0) - t2;
        t4 := up0*t3;
        sp1 := m3*k1 + t1*(vp1 - v1) - (up0 + up1)*(t0 + t3) + t2 + t4;
        sp0 := m3*k0 + t1*(vp0 - v0) - t4;
        
        if IsZero(sp1) then  //s1 = 0
            if IsZero(sp0) then
                if IsZero(k3) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,0>;
                end if;//k3
                
                //upp := ExactQuotient(k, up); 
                //upp := upp/LeadingCoefficient(upp);
                w1 := k3^-1;
                upp0 := w1*k2 - up1;

                //vpp := V - (V + v + h) mod upp;
                vpp0 := -v0 + upp0*(v1 + yn1);

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
            end if;//sp0

            //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
            //upp := upp/LeadingCoefficient(upp);
            w0 := (dw*sp0)^-1;  //1/s0D
            s0 := sp0^2*w0;    //s0
            w1 := dw^2*w0/2;        
            upp1 := -w1*k3 - up1;
            upp0 := -yn2 + s0/2 - w1*k2 - up0 - up1*upp1;

            //vpp := V - (V + u*s + v + h) mod upp;
            vpp1 := -v1 - s0*(u1 - upp1);
            vpp0 := -v0 - s0*(u0 - upp0);

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
        end if;//sp1

        //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
        //upp := upp/LeadingCoefficient(upp);
        w0 := (dw*sp1)^-1;  //1/s1*D
        w1 := dw^2*w0/2;  //1/s1*c4
        w2 := w0*sp1;   //1/d
        s1 := sp1*w2;
        s0 := sp0*w2;

        t0 := s0 + s1;
        t2 := u1*s1;
        t3 := s0 + t2;
        t4 := f6 + t3;
        t5 := s0*u0;
        t6 := t0*(u0 + u1) - t2 - t5;
        t7 := s1^2;
        t8 := s0*t4;
        upp2 := w1*(t7 + s0 + s0) - up1;
        upp1 := w1*(t0*(t4 + s1) - t7 - t8 - k3) - up0 - up1*upp2;
        upp0 := w1*(s1*(v1 + v1 + t6) + t8 - k2) - up0*upp2 - up1*upp1;

        //vpp := V - (V + u*s + v + h) mod upp;
        vpp2 := yn2 - t3 + s1*upp2;
        vpp1 := -v1 - t6 + s1*upp1;
        vpp0 := -v0 - t5 + s1*upp0;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d
    
    //s := R!(Q!u^-1)*(vp - v) mod up;
    t0  := up1 + up1;
    t1  := up0 + up0 - f6 - up1*t0;
    r1  := vp1 - v1 - up0*t0 - up1*t1;
    r0  := vp0 - v0 - up0*t1;
    sp1 := r0*m3 + r1*m4;
    sp0 := r0*m1 + r1*m2;


    z3 := -yn1 - v1;
    if IsZero(sp1) then  //s1 = 0
        if IsZero(sp0) then
            if IsZero(z3) then

                
                return < 0,0,0,1,yn2,yn1,yn0,0>;
            end if;//z3
            
            //upp := ExactQuotient(k, up); 
            //upp := upp/LeadingCoefficient(upp);
            w1 := z3^-1;
            upp0 := w1*(-yn0 - v0 - z3*u1) - up1;

            //vpp := V - (V + v + h) mod upp;
            vpp0 := -v0 + upp0*(v1 + yn1);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
        end if;//sp0

        //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
        //upp := upp/LeadingCoefficient(upp);
        w0 := (d*sp0)^-1;  //1/s0D
        s0 := sp0^2*w0;    //s0
        w1 := d^2*w0;        
        upp1 := -w1*z3 - up1;
        upp0 := -yn2 + s0/2 - w1*(-yn0 - v0 - z3*u1) - up0 - up1*upp1;

        //vpp := V - (V + u*s + v + h) mod upp;
        vpp1 := -v1- s0*(u1 - upp1);
        vpp0 := -v0 - s0*(u0 - upp0);

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
    end if;//sp1

    //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    //upp := upp/LeadingCoefficient(upp);
    w0 := (d*sp1)^-1;  //1/s1*D
    w1 := d^2*w0;  //1/s1
    w2 := w0*sp1;   //1/d
    s1 := sp1*w2;
    s0 := sp0*w2;

    t0 := s0 + s1;
    t2 := u1*s1;
    t3 := s0 + t2;
    t4 := f6 + t3;
    t5 := s0*u0;
    t6 := t0*(u0 + u1) - t2 - t5;
    t7 := s1^2;
    t8 := s0*t4;
    upp2 := w1*(t7/2 + s0) - up1;
    upp1 := w1*((t0*(t4 + s1) - t7 - t8)/2 - z3) - up0 - up1*upp2;
    upp0 := w1*((s1*(v1 + v1 + t6) + t8)/2 + yn0 + v0 + z3*u1) - up0*upp2 - up1*upp1;

    //vpp := V - (V + u*s + v + h) mod upp;
    vpp2 := yn2 - t3 + s1*upp2;
    vpp1 := -v1 - t6 + s1*upp1;
    vpp0 := -v0 - t5 + s1*upp0;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;

end function;


///////////////////////////////////////////////////////////////////////////////
// Deg22ADDUP():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,n> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,np> in reduced
//                basis where n + np = 1.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with up adjust.                
///////////////////////////////////////////////////////////////////////////////
Deg22ADDUP:= function(u1,u0,v1,v0,up1,up0,vp1,vp0,ccs)
    /*//startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    Vp:= R!ccs[1][3];
    u := x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + v1*x + v0;
    up := x^2 + up1*x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + vp1*x + vp0;
    Q := quo<R | up>;
    
    //Formulation
    d := Resultant(u,up); // computed with 2x2 system
    if IsZero(d) then
        dw1 := u mod up; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up);
        if IsZero(dw1) then //u = up
            dw2 := (vp+v+h) mod up;// = (b2^-1)*S for S,a2,b2 = XGCD(u,v + vp + h);
            if IsZero(dw2) then //vp = -v-h
                return < 0,0,0,1,Coeff(V,2),Coeff(V,1),Coeff(V,0),1>;
            end if;
            k := ExactQuotient(f - vp*(vp + h),up);
            dw := Resultant(up,vp + v + h);
            if IsZero(dw) then
                b2 := LeadingCoefficient(dw2)^-1;
                up := ExactQuotient(up,dw2*b2);
                s := b2*k mod up;
                upp := up^2;
                vpp := V - (V - vp - up*s) mod upp;
                return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
            else
                b2 := R!(Q!dw2^-1);
                s := b2*k mod up;
                //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                upp   := upp/LeadingCoefficient(upp);
                vpp   := V - (V + s*u + v + h) mod upp;
                n := 3 - Degree(upp);
                return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
            end if;
        end if;
        
        a1 := LeadingCoefficient(dw1)^-1;
        S1 := dw1*a1;
        
        dw3 := (vp+v+h) mod S1;// = (b2^-1)*S for S,a2,b2 = XGCD(S1,v + vp + h);
        if IsZero(dw3) then
            //S,a2,b2 := XGCD(S1,vp+v + h);
            //S1 = S, a2 = 1, b2 = 0;
            u := ExactQuotient(u,S1);
            up := ExactQuotient(up,S1);
            s  := a1*(vp - v) mod up;
            upp := u*up;
            vpp := V - (V - v - u*s) mod upp;
            n := 2 - Degree(upp);
            return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
        end if;

        k := ExactQuotient(f - v*(v + h),u);
        //S,a2,b2 := XGCD(S1,vp+v + h);
        //S := 1;
        b2 :=FF!dw3^-1;
        t := (1 - b2*(v + vp + h)) mod up;
        a2 := ExactQuotient(t,S1);
        s  := (a2*a1*(vp - v) + b2*k) mod up;
        //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        upp   := upp/LeadingCoefficient(upp);
        vpp   := V - (V + s*u + v + h) mod upp;
        n := 3 - Degree(upp);
            
        return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    end if;
    s := R!(Q!u^-1)*(vp - v) mod up;
    k := ExactQuotient(f-v*(v + h),u);
    //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (V + u*s + v + h) mod upp;
    n := 3 - Degree(upp);
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    */ //endIGNORE

    f6:= ccs[1][1][7];
    f3:= ccs[1][1][4];
    f2:= ccs[1][1][3];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d3 := ccs[1][3][4];
    d1 := ccs[1][3][2];
    d0 := ccs[1][3][1];
    
    //d := Resultant(u,up); // computed with 2x2 system
    m3 := up1 - u1;
    m4 := u0 - up0;
    m1 := m4 + up1*m3;
    m2 := -up0*m3;
    d  := m1*m4 - m2*m3;
    if IsZero(d) then
        //dw1 := u mod up; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up);
        if IsZero(m3) then //u = up
            //dw2 := (vp+v+h) mod up;// = (b2^-1)*S for S,a2,b2 = XGCD(u,v + vp + h);
            //dw := Resultant(up,dw2);
            t0 := up1 + up1;
            t1 := up0 + up0 - f6 - up1*t0;
            m2 := -vp1 - v1 + up0*t0 + up1*t1;
            m1 := vp0 + v0 - up0*t1;

            if IsZero(m1) and IsZero(m2) then //vp = -v-h

                
                return < 0,0,0,1,yn2,yn1,yn0,1>;
            end if;//m1m2

            m3 := -m2*up0;
            m4 := m1 + m2*up1;
            dw := (m1*m4 - m2*m3)/2;
            if IsZero(dw) then
                //k := ExactQuotient(f-vp*(vp + h),u);
                t0 := vp1 - yn1;
                k3 := t0 + t0;
                t1 := k3*u1;
                t3 := vp0 - yn0;
                k2 := t3 + t3 - t1;
                t2 := k2*u0;
                k1 := f3 + f6*vp1 - (u0 + u1)*(k2 + k3) + t1 + t2;
                k0 := f2 + f6*vp0 - vp1^2 - t2 - u1*k1;

                //b2 := LeadingCoefficient(dw2)^-1;
                b2 := (-m2)^-1;
                
                //up := ExactQuotient(up,dw2*b2);
                up0 := up1 - m1*b2;

                //s := b2*k mod up;
                s0 := b2*(k0 - up0*(k1 - up0*(k2- up0*k3)));
                
                //upp := up^2;
                upp1 := up0 + up0;
                upp0 := up0^2;

                //vpp := V - (V - vp - up*s) mod upp;
                vpp1 := vp1 + s0;
                vpp0 := vp0 + s0*up0;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
            end if;//dw

            //k := ExactQuotient(f-vp*(vp + h),u);
            //z := k/c4;
            z3 := vp1 - yn1;
            t0 := z3*u1;
            z2 := vp0 - yn0 - t0;
            t1 := z2*u0;
            z1 := d1 - yn2*vp1 - (u0 + u1)*(z2 + z3) + t0 + t1;
            z0 := d0 - vp0*yn2 - vp1^2/2 - t1 - u1*z1;

            //zp := z mod up;
            t2 := up1*z3;
            t3 := z2 - t2;
            t4 := up0*t3;
            zp1 := z1 - (up0 + up1)*(z3 + t3) + t2 + t4;;
            zp0 := z0 - t4;

            //b2 := R!(Q!dw2^-1);
            //s := b2*k mod up;         //2x2 system, weight dw/c4  
            sp1 := zp1*m1 + zp0*m2;
            sp0 := zp1*m3 + zp0*m4;
            
            if IsZero(sp1) then
                if IsZero(sp0) then
                    if IsZero(z3) then
                        
                        return < 0,0,0,1,yn2,yn1,yn0,3>;
                    end if;//z3
                    //upp := ExactQuotient(k, up); 
                    //upp := upp/LeadingCoefficient(upp);
                    w1 := z3^-1;
                    upp0 := w1*z2 - up1;
                    upp2 := upp0^2;

                    //vpp := V - (V + v + h) mod upp;
                    vpp0 := -v0 + upp0*(v1 + yn1 + upp0*(f6 + upp2 + upp2));

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//sp0

                //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp   := upp/LeadingCoefficient(upp);
                w0 := (dw*sp0)^-1;
                w1 := w0*dw^2;
                s0 := w0*sp0^2;                    
                upp1 := w1*z3 - up1;
                upp0 := -yn2 - s0/2 + w1*z2 - up0 - up1*upp1; 

                //vpp   := V - (V + s*u + v + h) mod upp;
                t0 := upp1 + upp1;
                t1 := s0 - f6 + upp0 + upp0 - upp1*t0;
                vpp1 := -v1 - s0*u1 + upp0*t0 + upp1*t1;
                vpp0 := -v0 - s0*u0 + upp0*t1;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//sp1
            
            //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
            //upp := upp/LeadingCoefficient(upp);
            w0 := (dw*sp1)^-1;  //1/s1*D
            w1 := dw^2*w0;  //1/s1
            w2 := w0*sp1;   //1/d
            s1 := sp1*w2;
            s0 := sp0*w2;

            t0 := s0 + s1;
            t2 := u1*s1;
            t3 := s0 + t2;
            t4 := f6 - t3;
            t5 := s0*u0;
            t6 := t0*(u0 + u1) - t2 - t5;
            t7 := -s1^2;
            t8 := s0*t4;
            upp2 := w1*(t7/2 + s0) - up1;
            upp1 := w1*((t0*(t4 - s1) - t7 - t8)/2 + z3) - up0 - up1*upp2;
            upp0 := w1*((s1*(-v1 - v1 - t6) + t8)/2 + z2) - up0*upp2 - up1*upp1;

            //vpp   := V - (V + s*u + v + h) mod upp;
            t2 := upp2 + upp2 + s1;
            vpp2 := -yn2 - t3 - upp1 - upp1 + upp2*t2;
            vpp1 := -v1 - t6 - upp0 - upp0 + upp1*t2; 
            vpp0 := -v0 - t5 + upp0*t2;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
        end if;//m3

        //a1 := LeadingCoefficient(dw1)^-1; //a1 := (-m3)^-1;
        //S1 := dw1*a1;//S10 := m4*a1;//S1 := x + S10;
        //dw := (vp+v+h) mod S1;// = (b2^-1)*S for S,a2,b2 = XGCD(S1,v + vp + h);
        M2 := m3^2;
        M3 := M2*m3;
        M4 := M2^2;
        m2 := m4^2;
        t1 := vp1 + v1;
        dw := M4*(vp0 + v0) + m4*(t1*M3 - m4*(f6*M2 + m2 + m2)); //weight m3^4
        if IsZero(dw) then
            //S,a2,b2 := XGCD(S1,vp+v + h);
            //S1 = S, a2 = 1, b2 = 0;

            //a1 := LeadingCoefficient(dw1)^-1;
            //S1 := dw1*a1;
            a1 := -m3^-1;
            S10 := m4*a1;

            //u := ExactQuotient(u,S1);
            //up := ExactQuotient(up,S1);
            u0 := u1 - S10;             
            up0 := up1 - S10;

            //s  := a1*(vp - v) mod up;
            s0 := a1*(vp0 - v0 - up0*(vp1 - v1));

            //upp := u*up;
            upp1 := u0 + up0;
            upp0 := u0*up0;

            //vpp := V - (V - v - u*s) mod upp;
            vpp1 := v1 + s0;
            vpp0 := v0 + s0*u0;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
        end if;//dw

        //k := ExactQuotient(f - v*(v + h),u);
        t2 := v1 - yn1;
        k3 := t2 + t2;
        t3 := v0 - yn0;
        k2 := t3 + t3 - u1*k3;
        k1 := d3 + f6*t2 - u0*k3 - u1*k2; 
        k0 := f2 - v1^2 + v0*f6 - u0*k2 - u1*k1;

        //b2 :=FF!(dw/M4)^-1;
        //t := (1 - b2*(v + vp + h)) mod up;
        //a2 := ExactQuotient(t,S1);
        t2 := -M3*(up1 + up1);
        t3 := M3*(f6 - up0 - up0) - up1*t2;
        a21 := M3*(vp1 + v1) + up0*t2 + up1*t3; //with weight dw
        
    
        //s := (a2*a1*(vp - v) + b2*k) mod up;
        //sp := (a21*(vp - v) + M4*k) mod up;
        //s := sp/dw;
        t0 := k2 - up1*k3;
        sp1 := M4*(k1 - up0*k3 - up1*t0) + a21*(vp1 - v1);
        sp0 := M4*(k0 - up0*t0) + a21*(vp0 - v0);

        if IsZero(sp1) then
            if IsZero(sp0) then
                if IsZero(k3) then
                    
                    return < 0,0,0,1,yn2,yn1,yn0,3>;
                end if;//k3
                //upp := ExactQuotient(k, up); 
                //upp := upp/LeadingCoefficient(upp);
                w1 := k3^-1;
                upp0 := w1*k2 - up1;
                upp2 := upp0^2;

                //vpp := V - (V + v + h) mod upp;
                vpp0 := -v0 + upp0*(v1 + yn1 + upp0*(f6 + upp2 + upp2));

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
            end if;//sp0

            //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp   := upp/LeadingCoefficient(upp);
            w0 := (dw*sp0)^-1;
            w1 := w0*dw^2;
            s0 := w0*sp0^2;                    
            upp1 := w1*k3/2 - up1;
            upp0 := -yn2 - (s0 - w1*k2)/2 - up0 - up1*upp1; 

            //vpp   := V - (V + s*u + v + h) mod upp;
            t1 := upp0 - upp1^2;
            t2 := s0 - f6 + t1 + t1;
            vpp1 := -v1 - s0*u1 + upp1*(upp0 + upp0 + t2);
            vpp0 := -v0 - s0*u0 + upp0*t2;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//sp1
        
        //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
        //upp := upp/LeadingCoefficient(upp);
        w0 := (dw*sp1)^-1;  //1/s1*D
        w1 := dw^2*w0/2;  //1/s1
        w2 := w0*sp1;   //1/d
        s1 := sp1*w2;
        s0 := sp0*w2;

        t0 := s0 + s1;
        t2 := u1*s1;
        t3 := s0 + t2;
        t4 := f6 - t3;
        t5 := s0*u0;
        t6 := t0*(u0 + u1) - t2 - t5;
        t7 := -s1^2;
        t8 := s0*t4;
        upp2 := w1*(t7 + s0 + s0) - up1;
        upp1 := w1*(t0*(t4 - s1) - t7 - t8 + k3) - up0 - up1*upp2;
        upp0 := w1*(s1*(-v1 - v1 - t6) + t8 + k2) - up0*upp2 - up1*upp1;

        //vpp   := V - (V + s*u + v + h) mod upp;
        t2 := upp2 + upp2 + s1;
        vpp2 := -yn2 - t3 - upp1 - upp1 + upp2*t2;
        vpp1 := -v1 - t6 - upp0 - upp0 + upp1*t2;
        vpp0 := -v0 - t5 + upp0*t2;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d
    
    //k := ExactQuotient(f - v*(v + h),u);
    z3 := v1 - yn1;
    k3 := z3 + z3;
    z2 := v0 - yn0 - u1*z3;
    k2 := z2 + z2;

    //s := R!(Q!u^-1)*(vp - v) mod up;
    r1  := vp1 - v1;
    r0  := vp0 - v0;
    sp1 := r0*m3 + r1*m4;
    sp0 := r0*m1 + r1*m2;

    if IsZero(sp1) then
        if IsZero(sp0) then
            if IsZero(k3) then

                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//k3
            //upp := ExactQuotient(k, up); 
            //upp := upp/LeadingCoefficient(upp);
            w1 := k3^-1;
            upp0 := w1*k2 - up1;
            upp2 := upp0^2;

            //vpp := V - (V + v + h) mod upp;
            vpp0 := -v0 + upp0*(v1 + yn1 + upp0*(f6 + upp2 + upp2));

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//sp0

        //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        //upp   := upp/LeadingCoefficient(upp);
        w0 := (d*sp0)^-1;
        w1 := w0*d^2;
        s0 := w0*sp0^2;                    
        upp1 := w1*z3 - up1;
        upp0 := -yn2 - s0/2 + w1*z2 - up0 - up1*upp1; 

        //vpp   := V - (V + s*u + v + h) mod upp;
        t1 := upp0 - upp1^2;
        t2 := s0 - f6 + t1 + t1;
        vpp1 := -v1 - s0*u1 + upp1*(upp0 + upp0 + t2);
        vpp0 := -v0 - s0*u0 + upp0*t2;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//sp1
    
    //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    //upp := upp/LeadingCoefficient(upp);
    w0 := (d*sp1)^-1;  //1/s1*D
    w1 := d^2*w0/2;  //1/s1
    w2 := w0*sp1;   //1/d
    s1 := sp1*w2;
    s0 := sp0*w2;

    t0 := s0 + s1;
    t2 := u1*s1;
    t3 := s0 + t2;
    t4 := f6 - t3;
    t5 := s0*u0;
    t6 := t0*(u0 + u1) - t2 - t5;
    t7 := -s1^2;
    t8 := s0*t4;
    upp2 := w1*(t7 + s0 + s0) - up1;
    upp1 := w1*(t0*(t4 - s1) - t7 - t8 + k3) - up0 - up1*upp2;
    upp0 := w1*(s1*(-v1 - v1 - t6) + t8 + k2) - up0*upp2 - up1*upp1;

    //vpp   := V - (V + s*u + v + h) mod upp;
    t2 := upp2 + upp2 + s1;
    vpp2 := -yn2 - t3 - upp1 - upp1 + upp2*t2;
    vpp1 := -v1 - t6 - upp0 - upp0 + upp1*t2;
    vpp0 := -v0 - t5 + upp0*t2;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg22ADDUP2():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,0> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,0> in reduced
//                basis.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with two up adjusts.                
///////////////////////////////////////////////////////////////////////////////
Deg22ADDUP2:= function(u1,u0,v1,v0,up1,up0,vp1,vp0,ccs)
    /* //startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    Vp:= R!ccs[1][3];
    u := x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + v1*x + R!v0;
    up := x^2 + up1*x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + vp1*x + R!vp0;
    Q := quo<R | up>;
    
    //Formulation
    d := Resultant(u,up); // computed with 2x2 system
    if IsZero(d) then
        dw1 := u mod up; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up);
        if IsZero(dw1) then //u = up
            dw2 := (vp+v+h) mod up;// = (b2^-1)*S for S,a2,b2 = XGCD(u,v + vp + h);
            if IsZero(dw2) then //vp = -v-h
                return < 0,0,0,1,Coeff(V,2),Coeff(V,1),Coeff(V,0),0>;
            end if;
            k := ExactQuotient(f - vp*(vp + h),up);
            b2 := LeadingCoefficient(dw2)^-1;
            S := dw2*b2;
            up := ExactQuotient(up,S);
            s := b2*k mod up;
            M2  := ExactQuotient(s*(vp + vp + h) - k*S, up);
            upp := -s^2 - M2;
            upp := upp/LeadingCoefficient(upp);
            vpp := V - (V +up*s + vp + h) mod upp;
            n := 3 - Degree(upp);
            return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
        end if;
        
        a1 := LeadingCoefficient(dw1)^-1;
        S1 := dw1*a1;
        
        dw3 := (vp+v+h) mod S1;// = (b2^-1)*S for S,a2,b2 = XGCD(S1,v + vp + h);
        if IsZero(dw3) then
            //S,a2,b2 := XGCD(S1,vp+v + h);
            //S1 = S, a2 = 1, b2 = 0;
            u := ExactQuotient(u,S1);
            up := ExactQuotient(up,S1);
            k := ExactQuotient(f - v*(v + h),u);
            s  := a1*(vp - v) mod up;
            //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            upp   := upp/LeadingCoefficient(upp);
            vpp   := V - (V + s*u + v + h) mod upp;
            n := 3 - Degree(upp);
            return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
        end if;

        k := ExactQuotient(f - v*(v + h),u);
        //S,a2,b2 := XGCD(S1,vp+v + h);
        //S := 1;
        b2 :=FF!dw3^-1;
        t := (1 - b2*(v + vp + h)) mod up;
        a2 := ExactQuotient(t,S1);
        s  := (a2*a1*(vp - v) + b2*k) mod up;
        //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        upp   := upp/LeadingCoefficient(upp);
        vpp   := V - (V + s*u + v + h) mod upp;
        n := 2 - Degree(upp);
        if Degree(upp) eq 3 then
            upp := ExactQuotient(f-vpp*(vpp + h),upp);
            upp := upp/LeadingCoefficient(upp);                 
            vpp := V - (vpp + h + V) mod upp;
            n := 3 - Degree(upp);
        end if;
            
        return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    end if;

    s := R!(Q!u^-1)*(vp - v) mod up;
    k := ExactQuotient(f-v*(v + h),u);
    //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (V + u*s + v + h) mod upp;
    n := 2 - Degree(upp);
    if Degree(upp) eq 3 then
        upp := ExactQuotient(f-vpp*(vpp + h),upp);
        upp := upp/LeadingCoefficient(upp);                 
        vpp := V - (vpp + h + V) mod upp;
        n := 3 - Degree(upp);
    end if;
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    *///endIGNORE
    f2:= ccs[1][1][3];
    f3:= ccs[1][1][4];
    f5:= ccs[1][1][6];
    f6:= ccs[1][1][7];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    d3 := ccs[1][3][4];
    d5 := ccs[1][3][6];
    d1 := ccs[1][3][2];

    
    //d := Resultant(u,up); // computed with 2x2 system
    m3 := up1 - u1;
    m4 := u0 - up0;
    m1 := m4 + up1*m3;
    m2 := -up0*m3;
    d  := m1*m4 - m2*m3;
    if IsZero(d) then
        //dw1 := u mod up; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up); // -m3x + m4
        if IsZero(m3) then //u = up
            //dw2 := (vp+v+h) mod up;// = (b2^-1)*S for S,a2,b2 = XGCD(u,v + vp + h);
            t0 := up1 + up1;
            t1 := up0 + up0 - f6 - up1*t0;
            dw21:= v1 + vp1 - up0*t0 - up1*t1;
            dw20:= vp0 + v0 - up0*t1;
            if IsZero(dw21) then //vp = -v-h

                
                return < 0,0,0,1,yn2,yn1,yn0,0>;
            end if;//dw21

            //k := ExactQuotient(f-vp*(vp + h),u);
            t3 := vp1 - yn1;
            k3 := t3 + t3;
            t0 := k3*u1;
            t4 := vp0 - yn0;
            k2 := t4 + t4 - t0;
            t1 := k2*u0;
            k1 := f3 + f6*vp1 - (u0 + u1)*(k2 + k3) + t0 + t1;
            k0 := f2 + vp0*f6 - vp1^2 - t1 - u1*k1;

            //b2 := LeadingCoefficient(dw2)^-1;
            //S := dw2*b2;
            //up := ExactQuotient(up,S);
            up0 := dw21*up1 - dw20;          //weight dw21           

            //kp : = k*dw2  k*S with weight dw21
            kp4 := k3*dw21;
            kp3 := k3*dw20 + k2*dw21;
            kp2 := k2*dw20 + k1*dw21;
            kp1 := k1*dw20 + k0*dw21;

            //s := b2*z*c4 mod up;
            //sp := z mod up;
            t0 := dw21^2;
            t1 := dw21*t0;
            sp0 := k0*t1 - up0*(k1*t0 - up0*(k2*dw21 - up0*k3));
            
            w0 := sp0 + sp0 + t1*kp4;
            if IsZero(w0) then
                w1 := t1*kp3;
                if IsZero(w1) then
                    w2 := sp0*f6 + t1*kp2;
                    if IsZero(w2) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,3>;
                    end if;//w2

                    w0 := (dw21*w2)^-1;
                    w1 := -t0*t1*w0;    //1/(-s0*f6 - k2)
                    w3 := w0*w2;    //1/dw21
                    w4 := w3^2;     //1/t0
                    s0 := sp0*w4^2;
                    up0 := up0*w3;

                    //M2  := ExactQuotient(s*(vp + vp + h) - k*S, up);
                    //upp := -s^2 - M2;
                    //upp := upp/LeadingCoefficient(upp);
                    upp0 := w1*(s0*(s0 + vp1 + vp1) - w3*kp1) - up0;
                    upp2 := upp0^2;

                    //vpp := V - (V + up*s + vp + h) mod upp;
                    vpp0 := -vp0 - s0*up0 + upp0*(vp1 + yn1 + s0 + upp0*(f6 + upp2 + upp2));

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//w1

                w0 := (dw21*w1)^-1;
                w2 := -t0*t1*w0;    //1/(-s0*c3 - k3)
                w3 := w0*w1;    //1/dw21
                w4 := w3^2;     //1/t0
                s0 := sp0*w4^2;
                up0 := up0*w3;

                //M2  := ExactQuotient(s*(vp + vp + h) - k*S, up);
                //upp := -s^2 - M2;
                //upp := upp/LeadingCoefficient(upp);
                upp1 := -w2*(f6*s0 + w3*kp2) - up0;
                upp0 := w2*(s0*(vp1 + vp1 + s0) - w3*kp1) - up0*upp1;

                //vpp := V - (V +up*s + vp + h) mod upp;
                t0 := upp1 + upp1;
                t1 := upp1*t0;
                t2 := upp0 + upp0 - f6 - t1;
                t3 := upp0*t2;
                vpp1 := -vp1- s0 + (upp0 + upp1)*(t0 + t2) - t1 - t3;
                vpp0 := -vp0 - up0*s0 + t3;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//w0  

            w1 := (dw21*w0)^-1;
            w2 := t0*t1*w1;    //1/(-s0*c4 - k4)
            w3 := w1*w0;    //1/dw21
            w4 := w3^2;     //1/t0
            s0 := sp0*w4^2;
            up0 := up0*w3;
            spp0 := w2*s0;
            w5 := w2*w3;

            //M2  := ExactQuotient(s*(vp + vp + h) - k*S, up);
            //upp := -s^2 - M2;
            //upp := upp/LeadingCoefficient(upp);
            upp2 := w5*kp3 - up0;
            upp1 := f6*spp0 + w5*kp2 - up0*upp2;
            upp0 := -spp0*(vp1 + vp1 + s0) + w5*kp1 - up0*upp1;

            //vpp := V - (V +up*s + vp + h) mod upp;
            t1 := upp2^2 - upp1;
            t2 := upp1*upp2 - upp0;
            t3 := upp0*upp2;
            vpp2 := -yn2 + t1 + t1;
            vpp1 := -vp1 - s0 + t2 + t2;
            vpp0 := -vp0 - s0*up0 + t3 + t3;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
        end if;//m3

        //a1 := LeadingCoefficient(dw1)^-1; //a1 := (-m3)^-1;
        //S1 := dw1*a1;//S10 := m4*a1;//S1 := x + S10;
        //dw := (vp+v+h) mod S1;// = (b2^-1)*S for S,a2,b2 = XGCD(S1,v + vp + h);
        M2 := m3^2;
        M3 := M2*m3;
        M4 := M2^2;
        t1 := vp1 + v1;
        t2 := m4^2;
        dw := M4*(vp0 + v0) + m4*(t1*M3 - m4*(f6*M2 + t2 + t2)); //weight m3^4
        if IsZero(dw) then
            //S,a2,b2 := XGCD(S1,vp+v + h);
            //S1 = S, a2 = 1, b2 = 0;

            //u := ExactQuotient(u,S1);
            //up := ExactQuotient(up,S1);
            u0 := m3*u1 + m4;             
            up0 := m3*up1 + m4;

            //k := ExactQuotient(f - v*(v + h),u);
            t1 := v1 - yn1;
            k4 := t1 + t1; 
            t2 := v0 - yn0;                                   
            k3 := m3*(t2 + t2) - u0*k4;      //m3
            k2 := M2*(d3 + f6*t1) - u0*k3;         //M2
            k1 := M3*(f2 - v1^2 + v0*f6) - u0*k2;        //M3
             
            //s  := a1*(vp - v) mod up;
            sp0 := m3*(v0 - vp0) - up0*(v1 - vp1);

            w0 := sp0 + sp0 + M2*k4;
            if IsZero(w0) then
                w1 := m3*k3;
                if IsZero(w1) then
                    w2 := sp0*f6 + k2;
                    if IsZero(w2) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,3>;
                    end if;//w2

                    w0 := (m3*w2)^-1;
                    w1 := M3*w0;    //1/(s0*f6 + k2)
                    w3 := w0*w2;    //1/m3
                    w4 := w3^2;     //1/M2
                    s0 := sp0*w4;
                    up0 := up0*w3;

                    //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                    //upp   := upp/LeadingCoefficient(upp);
                    upp0 := -w1*(s0*(v1 + v1 + s0) - w4*w3*k1) - up0;
                    upp2 := upp0^2;
                    
                    //vpp   := V - (V + s*u + v + h) mod upp;
                    vpp0 := -v0 - s0*u0*w3 + upp0*(v1 + yn1 + s0 + upp0*(f6 + upp2 + upp2));

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//w1

                w0 := (m3*w1)^-1;
                w2 := M3*w0;    //1/(s0*c3 + k3)
                w3 := w0*w1;    //1/m3
                w4 := w3^2;     //1/M2
                s0 := sp0*w4;
                up0 := up0*w3;

                //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp   := upp/LeadingCoefficient(upp);
                upp1 := w2*(s0*f6 + w4*k2) - up0;
                upp0 := -w2*(s0*(v1 + v1 + s0) - w4*w3*k1) - up0*upp1;

                //vpp   := V - (V + s*u + v + h) mod upp;
                t0 := upp1 + upp1;
                t1 := upp1*t0;
                t2 := upp0 + upp0 - f6 - t1;
                t3 := upp0*t2;
                vpp1 := -v1- s0 + (upp0 + upp1)*(t0 + t2) - t1 - t3;
                vpp0 := -v0 - w3*u0*s0 + t3;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//w0  

            w1 := (m3*w0)^-1;
            w2 := M3*w1;    //1/(s0*c4 + k4)
            w3 := w1*w0;    //1/m3
            w4 := w3^2;     //1/M2
            s0 := sp0*w4;
            up0 := up0*w3;

            //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp   := upp/LeadingCoefficient(upp);
            upp2 := w2*w3*k3 - up0;
            upp1 := w2*(s0*f6 + w4*k2) - up0*upp2;
            upp0 := -w2*(s0*(v1 + v1 + s0) - w4*w3*k1) - up0*upp1;

            //vpp   := V - (V + s*u + v + h) mod upp;
            t1 := upp2^2 - upp1;
            t2 := upp1*upp2 - upp0;
            t3 := upp0*upp2;
            vpp2 := -yn2 + t1 + t1;
            vpp1 := -v1 - s0+ t2 + t2;
            vpp0 := -v0 - s0*u0*w3 + t3 + t3;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
        end if;//dw

        //k := ExactQuotient(f - v*(v + h),u);
        t2 := v1 - yn1;
        k3 := t2 + t2;
        t3 := v0 - yn0;
        k2 := t3 + t3 - u1*k3;
        k1 := d3 + f6*t2 - u0*k3 - u1*k2; 
        k0 := f2 - v1^2 + v0*f6 - u0*k2 - u1*k1;

        //b2 :=FF!(dw/M4)^-1;
        //t := (1 - b2*(v + vp + h)) mod up;
        //a2 := ExactQuotient(t,S1);
        t2 := -M3*(up1 + up1);
        t3 := M3*(f6 - up0 - up0) - up1*t2;
        a21 := M3*(vp1 + v1) + up0*t2 + up1*t3; //with weight dw
        
        //s := (a2*a1*(vp - v) + b2*k) mod up;
        //sp := (a21*(vp - v) + M4*k) mod up;
        //s := sp/dw;
        t0 := k2 - up1*k3;
        sp1 := M4*(k1 - up0*k3 - up1*t0) + a21*(vp1 - v1);
        sp0 := M4*(k0 - up0*t0) + a21*(vp0 - v0);

        if IsZero(sp1) then
            if IsZero(sp0) then
                if IsZero(k3) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,2>;
                end if;//k3
                //upp := ExactQuotient(k, up); 
                //upp := upp/LeadingCoefficient(upp);
                w1 := k3^-1;
                upp0 := w1*k2 - up1;
                upp2 := upp0^2;

                //vpp := V - (V + v + h) mod upp;
                vpp0 := -v0 + upp0*(v1 + yn1 + upp0*(f6 + upp2 + upp2));

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
            end if;//sp0

            //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp   := upp/LeadingCoefficient(upp);
            w0 := (dw*sp0)^-1;
            w1 := w0*dw^2;
            s0 := w0*sp0^2;                    
            upp1 := w1*k3/2 - up1;
            upp0 := -yn2 - (s0 - w1*k2)/2 - up0 - up1*upp1; 

            //vpp   := V - (V + s*u + v + h) mod upp;
            t1 := upp0 - upp1^2;
            t2 := s0 - f6 + t1 + t1;
            vpp1 := -v1 - s0*u1 + upp1*(upp0 + upp0 + t2);
            vpp0 := -v0 - s0*u0 + upp0*t2;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
        end if;//sp1
        
        //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
        //upp := upp/LeadingCoefficient(upp);
        W := dw*sp1;
        W2:= W^2;
        W3:= W*sp1;
        D := dw^2;

        t0 := sp0 + sp1;                 //dw
        t2 := u1*sp1;                    //dw
        t3 := sp0 + t2;                  //dw
        t4 := f6*dw - t3;                //dw
        t5 := sp0*u0;                    //dw
        t6 := t0*(u0 + u1) - t2 - t5;    //dw
        t7 := -sp1^2;                    //D
        t8 := sp0*t4;                    //D
        up2 := t7/2 + dw*sp0 - W*up1;
        upp1:= (t0*(t4 - sp1) - t7 - t8 + D*k3)/2 - W*up0 - up1*up2;
        up0 := (sp1*(dw*(-v1 - v1) - t6) + t8 + D*k2)/2 - up0*up2 - up1*upp1;
        up1 := upp1;

        //vpp   := V - (V + s*u + v + h) mod upp;
        t2 := up2 + up2 - t7;
        t4 := up1*(W + W);
        t7 := up0*t2;
        vp2 := -W2*yn2 - W3*t3 - t4 + up2*t2;
        vp1 := -W2*v1 - W3*t6 + (up1 - up0)*(W + W + t2) - t4 + t7; 
        vp0 := -W2*v0 - W3*t5 + t7;

        //z := (f-v*(v + h))/c4;
        z6  := vp2 - W2*yn2;                                                  //W2
        
        if IsZero(z6) then
            z5  := vp1 - W2*yn1;
            if IsZero(z5) then
                W3 := W2^2;
                
                z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
                if IsZero(z4) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,3>;
                end if;//z4

                //upp := ExactQuotient(f-v*(v + h),u);
                //upp := upp/LeadingCoefficient(upp);            
                w0 := (W2*z4)^-1;
                w1 := w0*W2;
                w2 := w0*z4;
                w3 := w2*W;
                upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

                //vpp := V - (V + vpp + h) mod upp;
                upp2 := upp0^2;
                vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
            end if;//z5

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            W3 := W2^2;
            
            w0 := (W2*z5)^-1;
            w2 := w0*z5;
            w3 := w2*W;
            u2 := up2*w3;
            upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
            upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

            //vpp := V - (v + h + V) mod upp;
            t1 := -upp1 - upp1;
            t2 := upp1*t1;
            t3 := f6 - upp0 - upp0 - t2;
            t4 := upp0*t3;
            vpp1 := -vp1*w2- (upp1 + upp0)*(t1 + t3) + t2 + t4;
            vpp0 := -vp0*w2 - t4;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//z6

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp); 
        w0 := (W2*z6)^-1;
        w1 := w0*W2;
        w2 := w0*z6;
        w3 := w2*W;
        u2 := up2*w3;
        u1 := up1*w3;
        W3 := W2^2; 
        
        upp2 := w1*(vp1 - W2*yn1) - u2;
        upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
        upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

        //vpp := V - (V + v + h) mod upp;
        t1 := upp2^2 - upp1;
        t2 := upp1*upp2 - upp0;
        t3 := upp0*upp2;
        vpp2 := -vp2*w2 + t1 + t1;
        vpp1 := -vp1*w2 + t2 + t2;
        vpp0 := -vp0*w2 + t3 + t3;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d

    //k := ExactQuotient(f - v*(v + h),u);
    t2 := v1 - yn1;
    k3 := t2 + t2;
    t3 := v0 - yn0;
    k2 := t3 + t3 - u1*k3;

    //s := R!(Q!u^-1)*(vp - v) mod up;
    r1  := vp1 - v1;
    r0  := vp0 - v0;
    sp1 := r0*m3 + r1*m4;
    sp0 := r0*m1 + r1*m2;

    if IsZero(sp1) then
        if IsZero(sp0) then
            if IsZero(k3) then

                
                return < 0,0,0,1,yn2,yn1,yn0,2>;
            end if;//k3
            //upp := ExactQuotient(k, up); 
            //upp := upp/LeadingCoefficient(upp);
            w1 := k3^-1;
            upp0 := w1*k2 - up1;
            upp2 := upp0^2;

            //vpp := V - (V + v + h) mod upp;
            vpp0 := -v0 + upp0*(v1 + yn1 + upp0*(f6 + upp2 + upp2));

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
        end if;//sp0

        //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        //upp   := upp/LeadingCoefficient(upp);
        w0 := (d*sp0)^-1;
        w1 := w0*d^2;
        s0 := w0*sp0^2;                    
        upp1 := w1*k3/2 - up1;
        upp0 := -yn2 - (s0 - w1*k2)/2 - up0 - up1*upp1; 

        //vpp   := V - (V + s*u + v + h) mod upp;
        t1 := upp0 - upp1^2;
        t2 := s0 - f6 + t1 + t1;
        vpp1 := -v1 - s0*u1 + upp1*(upp0 + upp0 + t2);
        vpp0 := -v0 - s0*u0 + upp0*t2;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
    end if;//sp1
    
    //M1:=ExactQuotient(u*s-vp+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    //upp := ExactQuotient(-s*(u*s + 2*v + h) + k, up); 
    //upp := upp/LeadingCoefficient(upp);
    W := d*sp1;
    W2:= W^2;
    W3:= W*sp1;
    D := d^2;

    t0 := sp0 + sp1;                 //d
    t2 := u1*sp1;                    //d
    t3 := sp0 + t2;                  //d
    t4 := f6*d - t3;                //d
    t5 := sp0*u0;                    //d
    t6 := t0*(u0 + u1) - t2 - t5;    //d
    t7 := -sp1^2;                    //D
    t8 := sp0*t4;                    //D
    up2 := t7/2 + d*sp0 - W*up1;
    upp1:= (t0*(t4 - sp1) - t7 - t8 + D*k3)/2 - W*up0 - up1*up2;
    up0 := (sp1*(d*(-v1 - v1) - t6) + t8 + D*k2)/2 - up0*up2 - up1*upp1;
    up1 := upp1;

    //vpp   := V - (V + s*u + v + h) mod upp;
    t2 := up2 + up2 - t7;
    t4 := up1*(W + W);
    t7 := up0*t2;
    vp2 := -W2*yn2 - W3*t3 - t4 + up2*t2;
    vp1 := -W2*v1 - W3*t6 + (up1 - up0)*(W + W + t2) - t4 + t7; 
    vp0 := -W2*v0 - W3*t5 + t7;

    //z := (f-v*(v + h))/c4;
    z6  := vp2 - W2*yn2;                                                  //W2
    
    if IsZero(z6) then
        z5  := vp1 - W2*yn1;
        if IsZero(z5) then
            W3 := W2^2;
            
            z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
            if IsZero(z4) then

                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z4

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);            
            w0 := (W2*z4)^-1;
            w1 := w0*W2;
            w2 := w0*z4;
            w3 := w2*W;
            upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z5

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        W3 := W2^2;
        
        w0 := (W2*z5)^-1;
        w2 := w0*z5;
        w3 := w2*W;
        u2 := up2*w3;
        upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
        upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -vp1*w2- (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -vp0*w2 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//z6

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w0 := (W2*z6)^-1;
    w1 := w0*W2;
    w2 := w0*z6;
    w3 := w2*W;
    u2 := up2*w3;
    u1 := up1*w3;
    W3 := W2^2; 
    
    upp2 := w1*(vp1 - W2*yn1) - u2;
    upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
    upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

    //vpp := V - (V + v + h) mod upp;
    t1 := upp2^2 - upp1;
    t2 := upp1*upp2 - upp0;
    t3 := upp0*upp2;
    vpp2 := -vp2*w2 + t1 + t1;
    vpp1 := -vp1*w2 + t2 + t2;
    vpp0 := -vp0*w2 + t3 + t3;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg23ADD():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,0> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,0> in reduced
//                basis.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with two up adjusts.                
///////////////////////////////////////////////////////////////////////////////
Deg23ADD:= function(u2,u1,u0,v2,v1,v0,up1,up0,vp1,vp0,ccs)
    /*//startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    Vp:= R!ccs[1][3];
    u := x^3 + u2*x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + v2*x^2 + v1*x + v0;
    up := x^2 + up1*x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + vp1*x + vp0;
    Q := quo<R | up>;

    //Formulation    
    d := Resultant(u,up);
    if IsZero(d) then
        dw1 := u mod up; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up);
        if IsZero(dw1) then //u = up
            dw2 := (vp+v+h) mod up;// = (b2^-1)*S for S,a2,b2 = XGCD(u,v + vp + h);
            dw := Resultant(up,vp + v + h);
            if IsZero(dw) then
               if IsZero(dw2) then //-D2 in D1
                    upp := ExactQuotient(u,up);
                    vpp := V - (V - v) mod upp;
                    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),1>;
                end if;

                k := ExactQuotient(f - v*(v + h),u);
                b2 := LeadingCoefficient(dw2)^-1;
                S := dw2*b2;
                u := ExactQuotient(u,S);
                up := ExactQuotient(up,S);
                s := b2*k mod up;
                upp := u*up;
                vpp := V - (V - v - u*s) mod upp;
                return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
            end if;

            b2 := R!(Q!dw2^-1);
            k := ExactQuotient(f - v*(v + h),u);
            s := b2*k mod up;
            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            upp := upp/LeadingCoefficient(upp);
            vpp := V - (V + s*u + v + h) mod upp;
            if Degree(s) eq 1 then
                n := 0;
            else
                n := 3 - Degree(upp);
            end if;
            return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
            
        end if;
        a1 := LeadingCoefficient(dw1)^-1;
        S := R!dw1*a1;        
        dw3 := (vp+v+h) mod S;// = (b2^-1)*S for S,a2,b2 = XGCD(S1,v + vp + h);
        if IsZero(dw3) then
            //S1,a2,b2 := XGCD(S,vp+v + h);
            //S1 = S, a2 = 1, b2 = 0;
            u := ExactQuotient(u,S);
            up := ExactQuotient(up,S);
            k := ExactQuotient(f - v*(v + h),u);
            s  := a1*(vp - v) mod up;
            upp := u*up;
            vpp := V - (V - s*u - v) mod upp;
            return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
        end if;
        //S1,a2,b2 := XGCD(S,vp+v + h);
        //S1 = 1
        k := ExactQuotient(f - v*(v + h),u);
        b2 := FF!dw3^-1;
        t := (1 - b2*(v + vp + h)) mod up;
        a2 := ExactQuotient(t,S);
        s  := (a2*a1*(vp - v) + b2*k) mod up;
        //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp=-s*M1-M2;
        upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        upp := upp/LeadingCoefficient(upp);
        vpp := V - (V + s*u + v + h) mod upp;
        if Degree(s) eq 1 then
            n := 0;
        else
            n := 3 - Degree(upp);
        end if;
        return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    end if;//d

    s := R!(Q!u^-1)*(vp - v) mod up;
    k := ExactQuotient(f - v*(v + h),u);
    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (s*u + v + h + V) mod upp;
    if Degree(s) eq 1 then
        n := 0;
    else
        n := 3 - Degree(upp);
    end if;
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    *///endIGNORE

    
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    f3  := ccs[1][1][4];
    c10 := ccs[1][3][5];


    
    //d := Resultant(u,up); // computed with 2x2 system
    t0 := u2 - up1;
    m4 := u0 - up0*t0;      //m1
    m3 := up0 - u1 + up1*t0;//m2
    m2 := -up0*m3;          //m3
    m1 := m4 + up1*m3;      //m4
    d  := m1*m4 - m2*m3;
    if IsZero(d) then
        //dw1 := u mod up; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up);
        if IsZero(m3) then //u = up
            //dw2 := (vp+v+h) mod up;// = (b2^-1)*S for S,a2,b2 = XGCD(u,v + vp + h);
            //dw := Resultant(up,dw2);
            t0 := up1 + up1;
            t1 := up0 + up0 + v2 + yn2 - up1*t0;
            m2 := - vp1 - v1 + up0*t0 + up1*t1;
            m1 := vp0 + v0- up0*t1;

            if IsZero(m1) and IsZero(m2) then //vp = -v-h
                //upp := ExactQuotient(u,up);
                //vpp := V - (V - v) mod upp;
                upp0 := u2 - up1;                
                vpp0 := v0 + upp0*(yn1 - v1 - upp0*(yn2 - v2));

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
            end if;//m1m2
        
            m3 := -m2*up0;
            m4 := m1 + m2*up1;
            dw := m1*m4 - m2*m3;

            if IsZero(dw) then
                //k := ExactQuotient(f - v*(v + h), u);     
                t0 := v0 - yn0;
                t1 := v1 - yn1;
                t2 := v2 - yn2;
                k3 := t2 + t2;       
                k2 := t1 + t1 - u2*k3;                          
                k1 := t0 + t0 - v2^2 - c10 - u1*k3 - u2*k2;
                k0 := f3 - v2*(v1 + v1) - u0*k3 - u1*k2 - u2*k1;
            
                //b2 := LeadingCoefficient(dw2)^-1;
                b2 := (-m2)^-1;

                //S := dw2*b2;
                S0 := m1*b2;

                //u := ExactQuotient(u,S);
                un1 := u2 - S0;
                un0 := u1 - S0*un1;
            
                //up := ExactQuotient(up,S);
                up0 := up1 - S0;

                //s := b2*k mod up;
                s0 := b2*(k0 - up0*(k1 - up0*(k2- up0*k3)));

                //upp := u*up;
                upp2 := up0 + un1;
                upp1 := un1*up0 + un0;
                upp0 := un0*up0;

                //vpp := V - (V - v - u*s) mod upp;
                vpp2 := v2 + s0;
                vpp1 := v1 + s0*un1;
                vpp0 := v0 + s0*un0;

                
                return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
            end if;//dw

            //k := ExactQuotient(f - v*(v + h), u);           
            t0 := v0 - yn0;
            t1 := v1 - yn1;
            t2 := v2 - yn2;
            k3 := t2 + t2;       
            k2 := t1 + t1 - u2*k3;                          
            k1 := t0 + t0 - v2^2 - c10 - u1*k3 - u2*k2;     
            k0 := f3 - v2*(v1 + v1) - u0*k3 - u1*k2 - u2*k1;

            //kp := k mod up;
            t2 := up1*k3;
            t3 := k2 - t2;
            t4 := up0*t3;
            kp1 := k1 - (up0 + up1)*(k3 + t3) + t2 + t4;;
            kp0 := k0 - t4;

            //b2 := R!(Q!dw2^-1);
            //s := b2*kp mod up;         //2x2 system, weight dw
            sp1 := kp1*m1 + kp0*m2;
            sp0 := kp1*m3 + kp0*m4;

            if IsZero(sp1) then
                if IsZero(sp0) then
                    if IsZero(k3) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,3>;
                    end if;//k3
                    //upp := ExactQuotient(k, up); 
                    //upp := upp/LeadingCoefficient(upp);
                    w1 := k3^-1;
                    upp0 := w1*k2 - up1;
                    upp2 := upp0^2;

                    //vpp := V - (V + v + h) mod upp;
                    vpp0 := -v0 + upp0*(v1 + yn1 - upp0*(v2 + yn2 - upp2 - upp2));

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//sp0

                //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp   := upp/LeadingCoefficient(upp);
                w0 := (dw*sp0)^-1;
                w1 := w0*dw^2;
                s0 := w0*sp0^2;                    
                upp1 := (w1*k3 - s0)/2 - up1;
                upp0 := -v2 + (w1*k2 - u2*s0)/2 - up0 - up1*upp1; 

                //vpp   := V - (V + s*u + v + h) mod upp;
                t0 := upp1 + upp1 + s0;
                t1 := s0*u2 + v2 + yn2 + upp0 + upp0 - upp1*t0;
                vpp1 := -v1 - s0*u1 + upp0*t0 + upp1*t1;
                vpp0 := -v0 - s0*u0 + upp0*t1;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//sp1

            w0 := -sp1*(sp1 - dw - dw);
            D := dw^2;

            if IsZero(w0) then                
                w1 := -sp1*(sp1*u2 + sp0);
                if IsZero(w1) then
                    w2 := -sp1*(sp1*u1 + sp0*u2 + dw*(v2 + v2)) + k3*D;
                    if IsZero(w2) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,0>;
                    end if;//w2

                    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                    //upp := upp/LeadingCoefficient(upp);
                    w0 := (w2*dw)^-1;
                    w1 := w0*D*dw;
                    w3 := w0*w2;
                    s0 := sp0*w3;
                    s1 := sp1*w3; 
                    
                    //l := s*u; //l4 := s1
                    t1 := s1*u1;
                    l0 := s0*u0;
                    l3 := s1*u2 + s0;
                    l2 := t1 + s0*u2;
                    l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
                    upp0 := w1*(-s0*(l2 + v2 + v2) - s1*(l1 + v1 + v1) + k2) - up1;

                    //vpp := V - (V + s*u + v + h) mod upp;
                    t3 := upp0*(v2 + yn2 + l2 - upp0*(l3 - upp0*(s1 - 2)));
                    vpp0 := -v0 - l0 + upp0*(v1 + yn1 + l1 - t3);

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
                end if;//w1

                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp := upp/LeadingCoefficient(upp);
                w0 := (w1*dw)^-1;
                w2 := w0*D*dw;;
                w3 := w0*w1;
                s0 := sp0*w3;
                s1 := sp1*w3;

                //l := s*u; //l4 := s1
                t1 := s1*u1;
                l0 := s0*u0;
                l3 := s1*u2 + s0;
                l2 := t1 + s0*u2;
                l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
                t2 := l2 + v2 + v2;
                upp1 := w2*(-s0*l3 - s1*t2 + k3) - up1;
                upp0 := w2*(-s0*t2 - s1*(l1 + v1 + v1) + k2) - up0 - up1*upp1;

                //vpp := V - (V + s*u + v + h) mod upp;
                t4 := s1 - 2;
                t5 := l3 - upp1*t4;
                t6 := upp1*t5;
                t7 := l2 + v2 + yn2 - upp0*t4 - t6;
                t8 := upp0*t7;
                vpp1 := -v1 - l1 + (upp0 + upp1)*(t5 + t7) - t6 - t8; 
                vpp0 := -v0 - l0 + t8;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
            end if;//w0

            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp := upp/LeadingCoefficient(upp);
            w1 := (w0*dw)^-1;
            w2 := w1*D*dw;;
            w3 := w1*w0;
            s0 := sp0*w3;
            s1 := sp1*w3;
 
            //l := s*u; //l4 := s1
            t1 := s1*u1;
            l0 := s0*u0;
            l3 := s1*u2 + s0;
            l2 := t1 + s0*u2;
            l1 := (s1 + s0)*(u1 + u0) - l0 - t1;

            t2 := l2 + v2 + v2;
            t4 := s1 - 2;
            t5 := s1*l3;
            t6 := s0*t2;
            upp2 := w2*(-s0*t4 - t5) - up1;
            upp1 := w2*(-(s0 + s1)*(l3 + t2) + t5 + t6 + k3) - up0 - up1*upp2;
            upp0 := w2*(-t6 - s1*(l1 + v1 + v1) + k2) - up0*upp2 - up1*upp1;

            //vpp := V - (V + s*u + v + h) mod upp;
            t7 := l3 - upp2*t4;
            t8 := upp1*t4;
            t9 := upp0*t7;
            vpp2 := -v2 - l2 + t8 + upp2*t7;
            vpp1 := -v1 - l1 + (upp0 + upp1)*(t4 + t7) - t8 - t9;
            vpp0 := -v0 - l0 + t9;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
        end if;//m3

        //a1 := LeadingCoefficient(dw1)^-1; //a1 := (-m3)^-1;
        //S1 := dw1*a1;//S10 := m4*a1;//S1 := x + S10;
        //dw := (vp+v+h) mod S1;// = (b2^-1)*S for S,a2,b2 = XGCD(S1,v + vp + h);
        M2 := m3^2;
        M3 := M2*m3;
        M4 := M2^2;
        t1 := vp1 + v1;

        //a1 := LeadingCoefficient(dw1)^-1;
        //S := R!dw1*a1;        
        //dw := (vp+v+h) mod S;// = (b2^-1)*S for S,a2,b2 = XGCD(S1,v + vp + h);
        t2 := m4^2;
        dw := M4*(vp0 + v0) + m4*(t1*M3 + m4*((v2 + yn2)*M2 - t2 - t2)); //weight m3^4
        if IsZero(dw) then
            //S,a2,b2 := XGCD(S1,vp+v + h);
            //S1 = S, a2 = 1, b2 = 0;
            //a1 := LeadingCoefficient(dw1)^-1;
            //S1 := dw1*a1;
            a1 := -m3^-1;
            S10 := m4*a1;

            //u := ExactQuotient(u,S1);
            //up := ExactQuotient(up,S1);
            un1 := u2 - S10;
            un0 := u1 - S10*un1;             
            up0 := up1 - S10;

            //s  := a1*(vp - v) mod up;
            s0 := a1*(vp0 - v0 - up0*(vp1 - v1 - up0*(yn2 - v2)));
            
            //upp := u*up;
            upp2 := up0 + un1;
            upp1 := un1*up0 + un0;
            upp0 := un0*up0;

            //vpp := V - (V - v - u*s) mod upp;
            vpp2 := v2 + s0;
            vpp1 := v1 + s0*un1;
            vpp0 := v0 + s0*un0;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
        end if;//dw

        //k := ExactQuotient(f - v*(v + h),u);
        t2 := v2 - yn2;
        t3 := v1 - yn1;
        k3 := t2 + t2;
        k2 := t3 + t3 - u2*k3;
        t4 := v0 - yn0;
        k1 := t4 + t4 - v2^2 - c10 - u1*k3 - u2*k2;
        k0 := f3 - v1*(v2 + v2)- u0*k3 - u1*k2 - u2*k1; 

        //b2 :=FF!(dw/M4)^-1;
        //t := (1 - b2*(v + vp + h)) mod up;
        //a2 := ExactQuotient(t,S);
        t2 := -M3*(up1 + up1);
        t3 := M3*(-yn2 - v2 - up0 - up0) - up1*t2;
        a21 := M3*(vp1 + v1) + up0*t2 + up1*t3; //with weight dw
        
        //s := (a2*a1*(vp - v) + b2*k) mod up;
        //sp := (a21*(vp - v) + M4*k) mod up;
        //s := sp/dw;
        t0 := k2 - up1*k3;
        sp1 := M4*(k1 - up0*k3 - up1*t0) + a21*(vp1 - v1 - up1*(yn2 - v2));
        sp0 := M4*(k0 - up0*t0) + a21*(vp0 - v0 - up0*(yn2 - v2));

        if IsZero(sp1) then
            if IsZero(sp0) then
                if IsZero(k3) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,3>;
                end if;//k3
                //upp := ExactQuotient(k, up); 
                //upp := upp/LeadingCoefficient(upp);
                w1 := k3^-1;
                upp0 := w1*k2 - up1;
                upp2 := upp0^2;

                //vpp := V - (V + v + h) mod upp;
                vpp0 := -v0 + upp0*(v1 + yn1 - upp0*(v2 + yn2 - upp2 - upp2));

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
            end if;//sp0

            //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp   := upp/LeadingCoefficient(upp);
            w0 := (dw*sp0)^-1;
            w1 := w0*dw^2;
            s0 := w0*sp0^2;                    
            upp1 := (w1*k3 - s0)/2 - up1;
            upp0 := -v2 + (w1*k2 - u2*s0)/2 - up0 - up1*upp1; 

            //vpp   := V - (V + s*u + v + h) mod upp;
            t0 := upp1 + upp1 + s0;
            t1 := s0*u2 + v2 + yn2 + upp0 + upp0 - upp1*t0;
            vpp1 := -v1 - s0*u1 + upp0*t0 + upp1*t1;
            vpp0 := -v0 - s0*u0 + upp0*t1;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//sp1

        w0 := -sp1*(sp1 - dw - dw);
        D := dw^2;
        
        if IsZero(w0) then                
            w1 := -sp1*(sp1*u2 + sp0);
            if IsZero(w1) then
                w2 := -sp1*(sp1*u1 + sp0*u2 + dw*(v2 + v2)) + k3*D;
                if IsZero(w2) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,0>;
                end if;//w2

                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp := upp/LeadingCoefficient(upp);
                w0 := (w2*dw)^-1;
                w1 := w0*D*dw;
                w3 := w0*w2;
                s0 := sp0*w3;
                s1 := sp1*w3; 
                
                //l := s*u; //l4 := s1
                t1 := s1*u1;
                l0 := s0*u0;
                l3 := s1*u2 + s0;
                l2 := t1 + s0*u2;
                l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
                upp0 := w1*(-s0*(l2 + v2 + v2) - s1*(l1 + v1 + v1) + k2) - up1;

                //vpp := V - (V + s*u + v + h) mod upp;
                t3 := upp0*(v2 + yn2 + l2 - upp0*(l3 - upp0*(s1 - 2)));
                vpp0 := -v0 - l0 + upp0*(v1 + yn1 + l1 - t3);

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
            end if;//w1

            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp := upp/LeadingCoefficient(upp);
            w0 := (w1*dw)^-1;
            w2 := w0*D*dw;;
            w3 := w0*w1;
            s0 := sp0*w3;
            s1 := sp1*w3;

            //l := s*u; //l4 := s1
            t1 := s1*u1;
            l0 := s0*u0;
            l3 := s1*u2 + s0;
            l2 := t1 + s0*u2;
            l1 := (s1 + s0)*(u1 + u0) - l0 - t1;

            t2 := l2 + v2 + v2;
            upp1 := w2*(-s0*l3 - s1*t2 + k3) - up1;
            upp0 := w2*(-s0*t2 - s1*(l1 + v1 + v1) + k2) - up0 - up1*upp1;

            //vpp := V - (V + s*u + v + h) mod upp;
            t4 := s1 - 2;
            t5 := l3 - upp1*t4;
            t6 := upp1*t5;
            t7 := l2 + v2 + yn2 - upp0*t4 - t6;
            t8 := upp0*t7;
            vpp1 := -v1 - l1 + (upp0 + upp1)*(t5 + t7) - t6 - t8; 
            vpp0 := -v0 - l0 + t8;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
        end if;//w0

        //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        //upp := upp/LeadingCoefficient(upp);
        w1 := (w0*dw)^-1;
        w2 := w1*D*dw;;
        w3 := w1*w0;
        s0 := sp0*w3;
        s1 := sp1*w3;

        //l := s*u; //l4 := s1
        t1 := s1*u1;
        l0 := s0*u0;
        l3 := s1*u2 + s0;
        l2 := t1 + s0*u2;
        l1 := (s1 + s0)*(u1 + u0) - l0 - t1;

        t2 := l2 + v2 + v2;
        t4 := s1 - 2;
        t5 := s1*l3;
        t6 := s0*t2;
        upp2 := w2*(-s0*t4 - t5) - up1;
        upp1 := w2*(-(s0 + s1)*(l3 + t2) + t5 + t6 + k3) - up0 - up1*upp2;
        upp0 := w2*(-t6 - s1*(l1 + v1 + v1) + k2) - up0*upp2 - up1*upp1;

        //vpp := V - (V + s*u + v + h) mod upp;
        t7 := l3 - upp2*t4;
        t8 := upp1*t4;
        t9 := upp0*t7;
        vpp2 := -v2 - l2 + t8 + upp2*t7;
        vpp1 := -v1 - l1 + (upp0 + upp1)*(t4 + t7) - t8 - t9;
        vpp0 := -v0 - l0 + t9;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d

    //s := R!(Q!u^-1)*(vp - v) mod up;
    t1 := yn2 - v2;
    vt1 := vp1 - v1 - up1*t1;
    vt0 := vp0 - v0 - up0*t1;
    sp1 := m4*vt1 + m3*vt0;
    sp0 := m2*vt1 + m1*vt0;

    //k := ExactQuotient(f - v*(v + h),u);
    z3 := v2 - yn2;
    t3 := v1 - yn1;
    k3 := z3 + z3;
    z2 := v1 - yn1 - z3*u2;
    k2 := z2 + z2;


    if IsZero(sp1) then
        if IsZero(sp0) then
            if IsZero(k3) then

                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//k3
            //upp := ExactQuotient(k, up); 
            //upp := upp/LeadingCoefficient(upp);
            w1 := k3^-1;
            upp0 := w1*k2 - up1;
            upp2 := upp0^2;

            //vpp := V - (V + v + h) mod upp;
            vpp0 := -v0 + upp0*(v1 + yn1 - upp0*(v2 + yn2 - upp2 - upp2));

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//sp0

        //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        //upp   := upp/LeadingCoefficient(upp);
        w0 := (d*sp0)^-1;
        w1 := w0*d^2;
        s0 := w0*sp0^2;                    
        upp1 := (w1*k3 - s0)/2 - up1;
        upp0 := -v2 + (w1*k2 - u2*s0)/2 - up0 - up1*upp1; 

        //vpp   := V - (V + s*u + v + h) mod upp;
        t0 := upp1 + upp1 + s0;
        t1 := s0*u2 + v2 + yn2 + upp0 + upp0 - upp1*t0;
        vpp1 := -v1 - s0*u1 + upp0*t0 + upp1*t1;
        vpp0 := -v0 - s0*u0 + upp0*t1;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//sp1

    w0 := -sp1*(sp1 - d - d);
    D := d^2;
    
    if IsZero(w0) then                
        w1 := -sp1*(sp1*u2 + sp0);
        if IsZero(w1) then
            w2 := -sp1*(sp1*u1 + sp0*u2 + d*(v2 + v2)) + k3*D;
            if IsZero(w2) then

                
                return < 0,0,0,1,yn2,yn1,yn0,0>;
            end if;//w2

            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp := upp/LeadingCoefficient(upp);
            w0 := (w2*d)^-1;
            w1 := w0*D*d;
            w3 := w0*w2;
            s0 := sp0*w3;
            s1 := sp1*w3; 
            
            //l := s*u; //l4 := s1
            t1 := s1*u1;
            l0 := s0*u0;
            l3 := s1*u2 + s0;
            l2 := t1 + s0*u2;
            l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
            upp0 := w1*(-s0*(l2 + v2 + v2) - s1*(l1 + v1 + v1) + k2) - up1;

            //vpp := V - (V + s*u + v + h) mod upp;
            t3 := upp0*(v2 + yn2 + l2 - upp0*(l3 - upp0*(s1 - 2)));
            vpp0 := -v0 - l0 + upp0*(v1 + yn1 + l1 - t3);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
        end if;//w1

        //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        //upp := upp/LeadingCoefficient(upp);
        w0 := (w1*d)^-1;
        w2 := w0*D*d;
        w3 := w0*w1;
        s0 := sp0*w3;
        s1 := sp1*w3;

        //l := s*u; //l4 := s1
        t1 := s1*u1;
        l0 := s0*u0;
        l3 := s1*u2 + s0;
        l2 := t1 + s0*u2;
        l1 := (s1 + s0)*(u1 + u0) - l0 - t1;

        t2 := l2 + v2 + v2;
        upp1 := w2*(-s0*l3 - s1*t2 + k3) - up1;
        upp0 := w2*(-s0*t2 - s1*(l1 + v1 + v1) + k2) - up0 - up1*upp1;

        //vpp := V - (V + s*u + v + h) mod upp;
        t4 := s1 - 2;
        t5 := l3 - upp1*t4;
        t6 := upp1*t5;
        t7 := l2 + v2 + yn2 - upp0*t4 - t6;
        t8 := upp0*t7;
        vpp1 := -v1 - l1 + (upp0 + upp1)*(t5 + t7) - t6 - t8; 
        vpp0 := -v0 - l0 + t8;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
    end if;//w0

    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
    //upp := upp/LeadingCoefficient(upp);
    w1 := (w0*d)^-1;
    w2 := w1*D*d;
    w3 := w1*w0;
    s0 := sp0*w3;
    s1 := sp1*w3;

    //l := s*u; //l4 := s1
    t1 := s1*u1;
    l0 := s0*u0;
    l3 := s1*u2 + s0;
    l2 := t1 + s0*u2;
    l1 := (s1 + s0)*(u1 + u0) - l0 - t1;

    t2 := l2 + v2 + v2;
    t4 := s1 - 2;
    t5 := s1*l3;
    t6 := s0*t2;
    
    upp2 := w2*(-s0*t4 - t5) - up1;
    upp1 := w2*(-(s0 + s1)*(l3 + t2) + t5 + t6 + k3) - up0 - up1*upp2;
    upp0 := w2*(-t6 - s1*(l1 + v1 + v1) + k2) - up0*upp2 - up1*upp1;

    //vpp := V - (V + s*u + v + h) mod upp;
    t7 := l3 - upp2*t4;
    t8 := upp1*t4;
    t9 := upp0*t7;
    vpp2 := -v2 - l2 + t8 + upp2*t7;
    vpp1 := -v1 - l1 + (upp0 + upp1)*(t4 + t7) - t8 - t9;
    vpp0 := -v0 - l0 + t9;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;


///////////////////////////////////////////////////////////////////////////////
// Deg23ADD():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,0> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,0> in reduced
//                basis.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with two up adjusts.                
///////////////////////////////////////////////////////////////////////////////
Deg23ADDUP:= function(u2,u1,u0,v2,v1,v0,up1,up0,vp1,vp0,ccs)
    /*//startIGNORE
    //Poly Dev Testing
    FF:=Parent(u0);
    R<x>:=PolynomialRing(FF);
    f := R!ccs[1][1];
    h := R!ccs[1][2];
    V := R!ccs[1][4];
    Vp:= R!ccs[1][3];
    u := x^3 + u2*x^2 + u1*x + u0;
    v := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + v2*x^2 + v1*x + R!v0;
    up := x^2 + up1*x + up0;
    vp := Coeff(V,4)*x^4 + Coeff(V,3)*x^3 + Coeff(V,2)*x^2 + vp1*x + R!vp0;
    Q := quo<R | up>;
    
    //Formulation    
    
    d := Resultant(u,up);
    if IsZero(d) then
        dw1 := u mod up; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up);
        if IsZero(dw1) then //u = up
            dw2 := (vp+v+h) mod up;// = (b2^-1)*S for S,a2,b2 = XGCD(u,v + vp + h);
            dw := Resultant(up,vp + v + h);
            if IsZero(dw) then
               if IsZero(dw2) then //-D2 in D1
                    upp := ExactQuotient(u,up);
                    vpp := V - (V - v) mod upp;
                    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),0>;
                end if;

                k := ExactQuotient(f - v*(v + h),u);
                b2 := LeadingCoefficient(dw2)^-1;
                S := dw2*b2;
                u := ExactQuotient(u,S);
                up := ExactQuotient(up,S);
                s := b2*k mod up;
                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                upp := ExactQuotient(-s*(s*u + 2*v + h) + k*S, up);
                upp := upp/LeadingCoefficient(upp);
                vpp := V - (V + s*u + v + h) mod upp;
                n := 3 - Degree(upp);
                return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
            else
                b2 := R!(Q!dw2^-1);
                k := ExactQuotient(f - v*(v + h),u);
                s := b2*k mod up;
                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                upp := upp/LeadingCoefficient(upp);
                vpp := V - (V + s*u + v + h) mod upp;
                if Degree(s) eq 1 then
                    n := -1;
                else
                    n := 2 - Degree(upp);
                end if;
                if n lt 0 then
                    upp := ExactQuotient(f-vpp*(vpp + h),upp);
                    upp := upp/LeadingCoefficient(upp);                 
                    vpp := V - (vpp + h + V) mod upp;
                    n := 3 - Degree(upp);
                end if;
                return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
            end if;
        end if;
        a1 := LeadingCoefficient(dw1)^-1;
        S := R!dw1*a1;        
        dw3 := (vp+v+h) mod S;// = (b2^-1)*S for S,a2,b2 = XGCD(S1,v + vp + h);
        if IsZero(dw3) then
            //S1,a2,b2 := XGCD(S,vp+v + h);
            //S1 = S, a2 = 1, b2 = 0;
            u := ExactQuotient(u,S);
            up := ExactQuotient(up,S);
            k := ExactQuotient(f - v*(v + h),u);
            s  := a1*(vp - v) mod up;
            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            upp := upp/LeadingCoefficient(upp);
            vpp := V - (V + s*u + v + h) mod upp;
            n := 3 - Degree(upp);
            return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
        end if;
        //S1,a2,b2 := XGCD(S,vp+v + h);
        //S1 = 1
        k := ExactQuotient(f - v*(v + h),u);
        b2 := FF!dw3^-1;
        t := (1 - b2*(v + vp + h)) mod up;
        a2 := ExactQuotient(t,S);
        s  := (a2*a1*(vp - v) + b2*k) mod up;
        //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        upp := upp/LeadingCoefficient(upp);
        vpp := V - (V + s*u + v + h) mod upp;
        if Degree(s) eq 1 then
            n := -1;
        else
            n := 2 - Degree(upp);
        end if;
        if n lt 0 then
            upp := ExactQuotient(f-vpp*(vpp + h),upp);
            upp := upp/LeadingCoefficient(upp);                 
            vpp := V - (vpp + h + V) mod upp;
            n := 3 - Degree(upp);
        end if;
        return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    end if;//d

    s := R!(Q!u^-1)*(vp - v) mod up;
    k := ExactQuotient(f - v*(v + h),u);
    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
    upp := upp/LeadingCoefficient(upp);
    vpp := V - (s*u + v + h + V) mod upp;
    if Degree(s) eq 1 then
        n := -1;
    else
        n := 2 - Degree(upp);
    end if;
    if n lt 0 then
        upp := ExactQuotient(f-vpp*(vpp + h),upp);
        upp := upp/LeadingCoefficient(upp);                 
        vpp := V - (vpp + h + V) mod upp;
        n := 3 - Degree(upp);
    end if;
    return < Coeff(upp,3),Coeff(upp,2),Coeff(upp,1),Coeff(upp,0),Coeff(vpp,2),Coeff(vpp,1),Coeff(vpp,0),n>;
    */ //endIGNORE
    f5 := ccs[1][1][6];
    f6 := ccs[1][1][7];
    f3 := ccs[1][1][4];
    yn0 := ccs[1][2][1];
    yn1 := ccs[1][2][2];
    yn2 := ccs[1][2][3]; 
    c10 := ccs[1][3][5];
    d6 := ccs[1][3][7];
    d7 := ccs[1][3][8];
    d8 := ccs[1][3][9];
    d1 := ccs[1][3][2];
    d0 := ccs[1][3][1];
    d5 := ccs[1][3][6];


    
    //d := Resultant(u,up); // computed with 2x2 system
    t0 := u2 - up1;
    m4 := u0 - up0*t0;      //m1
    m3 := up0 - u1 + up1*t0;//m2
    m2 := -up0*m3;          //m3
    m1 := m4 + up1*m3;      //m4
    d  := m1*m4 - m2*m3;
    if IsZero(d) then
        //dw1 := u mod up; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up);
        if IsZero(m3) then //u = up
            //dw2 := (vp+v+h) mod up;// = (b2^-1)*S for S,a2,b2 = XGCD(u,v + vp + h);
            //dw := Resultant(up,dw2);
            t0 := up1 + up1;
            t1 := up0 + up0 + v2 + yn2 - up1*t0;
            m2 := -vp1 - v1 + up0*t0 + up1*t1;
            m1 := vp0 + v0- up0*t1;
            if IsZero(m1) and IsZero(m2) then //vp = -v-h
                //upp := ExactQuotient(u,up);
                //vpp := V - (V - v) mod upp;
                upp0 := u2 - up1;                
                vpp0 := v0 + upp0*(yn1 - v1 - upp0*(yn2 - v2));

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
            end if;//m1m2

            m3 := -m2*up0;
            m4 := m1 + m2*up1;
            dw := m1*m4 - m2*m3;
            if IsZero(dw) then
                //k := ExactQuotient(f - v*(v + h), u);
                       
                t0 := v0 - yn0;
                t1 := v1 - yn1;
                t2 := v2 - yn2;
                k3 := t2 + t2;       
                k2 := t1 + t1 - u2*k3;                          
                k1 := t0 + t0 - v2^2 - c10 - u1*k3 - u2*k2;     
                k0 := f3 - v2*(v1 + v1) - u0*k3 - u1*k2 - u2*k1;

                //b2 := LeadingCoefficient(dw2)^-1;
                //S := dw2*b2;
                //S0 := -m1;
                //u := ExactQuotient(u,S);
                M2 := m2^2;
                un1 := m2*u2 + m1;
                un0 := M2*u1 + m1*un1;
            
                //up := ExactQuotient(up,S);
                up0 := m2*up1 + m1;

                //s := b2*k mod up;
                M3 := M2*m2;
                M4 := M2^2;
                sp0 := -k0*M3 + up0*(k1*M2 - up0*(k2*m2 - up0*k3));

                //k := k*S;
                k4 := k3*m2;
                k3 := k2*m2 - k3*m1;
                k2 := k1*m2 - k2*m1;
                k1 := k0*m2 - k1*m1;

                w0 := sp0 + sp0 + M3*k4;
                if IsZero(w0) then
                    w1 := M3*k3;
                    if IsZero(w1) then
                        w2 := sp0*(M4*(-v2 - v2) - sp0) + M3*M4*k2;
                        if IsZero(w2) then

                            
                            return < 0,0,0,1,yn2,yn1,yn0,3>;
                        end if;//w2
                        
                        w0 := (m2*w2)^-1;
                        w1 := M4^2*m2*w0;    //1/(-s0*(v2--yn2 + s0) + k2)
                        w3 := w0*w2;    //1/m2
                        w4 := w3^2;     //1/M2
                        s0 := sp0*w4^2;
                        up0 := up0*w3;
                        t0 := s0*un1*w3;

                        //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                        //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                        //upp   := upp/LeadingCoefficient(upp);
                        upp0 := w1*(s0*(-v1 - v1 - t0) + w3*k1) - up0;
                        upp2 := upp0^2;
                        
                        //vpp   := V - (V + s*u + v + h) mod upp;
                        vpp0 := -v0 - s0*un0*w4 + upp0*(v1 + yn1 + t0 - upp0*(v2 + yn2 + s0 - upp2 - upp2));
                        
                        
                        return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                    end if;//w1

                    w0 := (m2*w1)^-1;
                    w2 := M3*M2*w0;    //1/(s0*c3 + k3)
                    w3 := w0*w1;    //1/m3
                    w4 := w3^2;     //1/M2
                    s0 := sp0*w4^2;
                    up0 := up0*w3;
                    t4 := s0*un1*w3;

                    //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                    //upp   := upp/LeadingCoefficient(upp);
                    upp1 := w2*(-s0*(v2 + v2 + s0) + w3*k2) - up0;
                    upp0 := w2*(s0*(-v1 - v1 - t4) + w3*k1) - up0*upp1;

                    //vpp   := V - (V + s*u + v + h) mod upp;
                    t0 := upp1 + upp1;
                    t1 := upp1*t0;
                    t2 := upp0 + upp0 + v2 + yn2 + s0 - t1;
                    t3 := upp0*t2;
                    vpp1 := -v1 - t4 + (upp0 + upp1)*(t0 + t2) - t1 - t3;
                    vpp0 := -v0 - w4*un0*s0 + t3;

                    
                    return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
                end if;//w0  

                w1 := (m2*w0)^-1;
                w2 := M3*M2*w1;    //1/(s0*c4 + k4)
                w3 := w1*w0;    //1/m3
                w4 := w3^2;     //1/M2
                s0 := sp0*w4^2;
                up0 := up0*w3;
                t3 := s0*un1*w3;

                //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp   := upp/LeadingCoefficient(upp);

                upp2 := w2*w3*k3 - up0;
                upp1 := w2*(s0*(-v2 - v2 - s0) + w3*k2) - up0*upp2;
                upp0 := w2*(s0*(-v1 - v1 - t3) + w3*k1) - up0*upp1;

                //vpp   := V - (V + s*u + v + h) mod upp;
                t1 := upp2^2 - upp1;
                t2 := upp1*upp2 - upp0;
                t4 := upp0*upp2;
                vpp2 := -v2 - s0 + t1 + t1;
                vpp1 := -v1 - t3 + t2 + t2;
                vpp0 := -v0 - s0*un0*w4 + t4 + t4;

                
                return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
            end if;//dw

            //k := ExactQuotient(f - v*(v + h), u);
            t0 := v0 - yn0;
            t1 := v1 - yn1;
            t2 := v2 - yn2;
            k3 := t2 + t2;       
            k2 := t1 + t1 - u2*k3;                          
            k1 := t0 + t0 - v2^2 - c10 - u1*k3 - u2*k2;     
            k0 := f3 - v2*(v1 + v1) - u0*k3 - u1*k2 - u2*k1;

            //kp := k mod up;
            t2 := up1*k3;
            t3 := k2 - t2;
            t4 := up0*t3;
            kp1 := k1 - (up0 + up1)*(k3 + t3) + t2 + t4;
            kp0 := k0 - t4;

            //b2 := R!(Q!dw2^-1);
            //s := b2*kp mod up;         //2x2 system, weight dw
            sp1 := kp1*m1 + kp0*m2;
            sp0 := kp1*m3 + kp0*m4;

            if IsZero(sp1) then
                if IsZero(sp0) then
                    if IsZero(k3) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,2>;
                    end if;//k3
                    //upp := ExactQuotient(k, up); 
                    //upp := upp/LeadingCoefficient(upp);
                    w1 := k3^-1;
                    upp0 := w1*k2 - up1;
                    upp2 := upp0^2;

                    //vpp := V - (V + v + h) mod upp;
                    vpp0 := -v0 + upp0*(v1 + yn1 - upp0*(v2 + yn2 - upp2 - upp2));

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
                end if;//sp0

                //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp   := upp/LeadingCoefficient(upp);
                w0 := (dw*sp0)^-1;
                w1 := w0*dw^2;
                s0 := w0*sp0^2;                    
                upp1 := (w1*k3 - s0)/2 - up1;
                upp0 := -v2 + (w1*k2 - u2*s0)/2 - up0 - up1*upp1; 

                //vpp   := V - (V + s*u + v + h) mod upp;
                t0 := upp1 + upp1 + s0;
                t1 := upp1*t0;
                t2 := s0*u2 + v2 + yn2 + upp0 + upp0 - t1;
                t3 := upp0*t2;
                vpp1 := -v1 - s0*u1 + (upp0 + upp1)*(t0 + t2) - t1 - t3;
                vpp0 := -v0 - s0*u0 + t3;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
            end if;//sp1

            w0 := -sp1*(sp1 - dw - dw);
            D := dw^2;

            if IsZero(w0) then                
                w1 := -sp1*(sp1*u2 + sp0);
                if IsZero(w1) then
                    w2 := -sp1*(sp1*u1 + sp0*u2 + dw*(v2 + v2)) + k3*D;
                    if IsZero(w2) then

                        
                        return < ccs[2][1][4],ccs[2][1][3],ccs[2][1][2],ccs[2][1][1],ccs[2][1][8],ccs[2][1][7],ccs[2][1][6],ccs[2][1][5]>;
                    end if;//w2

                    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                    //upp := upp/LeadingCoefficient(upp);
                    W := w2*dw;            //dw^3*(-s1*(s1 - c4))
                    W2 := W^2;              //dw^6*(-s1*(s1 - c4))^2
                    W3 := W*W2;             //dw^5*(-s1*(s1 - c4))^2  
                    W4 := W2^2;
                    
                    //l := s*u; //l4 := s1
                    t1 := sp1*u1;
                    l0 := sp0*u0;
                    l3 := sp1*u2 + sp0;
                    l2 := t1 + sp0*u2;
                    l1 := (sp1 + sp0)*(u1 + u0) - l0 - t1;
                    upp0 := -sp0*(l2 + dw*(v2 + v2)) - sp1*(l1 + dw*(v1 + v1)) + D*k2 - w2*up1;
                    up0 := upp0*dw;

                    //vpp := V - (V + s*u + v + h) mod upp;
                    t3 := up0*(W2*(v2 + yn2) + W*w2*l2 - up0*(w2*l3 - upp0*(sp1 - dw - dw))); //W3
                    vp0 := -W4*v0 - W3*w2*l0 + up0*(W3*(v1 + yn1) + W2*w2*l1 - t3); //W4
                    
                    //z := (f-vpp*(vpp + h))/c4;
                    z4  := vp0 - W4*yn0;               //W4
                    if IsZero(z4) then
                        z3  := W4*d8;        //W4
                        if IsZero(z3) then
                            z2  := W4*d7 - yn2*vp0;    //W4    
                            if IsZero(z2) then

                                
                                return < 0,0,0,1,yn2,yn1,yn0,3>;
                            end if;//z2

                            //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                            //upp := upp/LeadingCoefficient(upp);           
                            w0 := (W4*z2)^-1;
                            w1 := w0*W4^2;    //1/z2
                            w2 := w0*z2;    //1/W4
                            w3 := w2*W3;     //1/W
                            vp0 := vp0*w2;
                            upp0 := w1*(d6 - yn1*vp0) - up0*w3;

                            //vpp := V - (V + vpp + h) mod upp;
                            upp2 := upp0^2;
                            vpp0 := -vp0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                            
                            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                        end if;//z3

                        //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                        //upp := upp/LeadingCoefficient(upp);
                        w0 := (W4*z3)^-1;
                        w1 := w0*W4^2;    //1/z3
                        w2 := w0*z3;    //1/W4
                        w3 := w2*W3;     //1/W
                        vp0 := vp0*w2;
                        up0 := up0*w3;
                        upp1 := w1*(d7 - yn2*vp0) - up0;
                        upp0 := w1*(d6 - yn1*vp0) - up0*upp1;

                        //vpp := V - (v + h + V) mod upp;
                        t1 := -upp1 - upp1;
                        t2 := upp1*t1;
                        t3 := f6 - upp0 - upp0 - t2;
                        t4 := upp0*t3;
                        vpp1 := -yn1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
                        vpp0 := -vp0 - t4;

                        
                        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
                    end if;//z4

                    //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                    //upp := upp/LeadingCoefficient(upp); 
                    w0 := (W4*z4)^-1;
                    w1 := w0*W4^2;    //1/z4
                    w2 := w0*z4;    //1/W4
                    w3 := w2*W3;     //1/W
                    vp0 := vp0*w2;
                    up0 := up0*w3;

                    upp2 := w1*d8 - up0;
                    upp1 := w1*(d7 - yn2*vp0) - up0*upp2;
                    upp0 := w1*(d6 - yn1*vp0) - up0*upp1;

                    //vpp := V - (V + v + h) mod upp;
                    t1 := upp2^2 - upp1;
                    t2 := upp1*upp2 - upp0;
                    t3 := upp0*upp2;
                    vpp2 := -yn2 + t1 + t1;
                    vpp1 := -yn1 + t2 + t2;
                    vpp0 := -vp0 + t3 + t3;

                    
                    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
                end if;//w1

                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp := upp/LeadingCoefficient(upp);
                W := w1*dw;            //dw^3*(-s1*(s1 - c4))
                W2 := W^2;              //dw^6*(-s1*(s1 - c4))^2
                W3 := W*W2;             //dw^5*(-s1*(s1 - c4))^2  
                Wp := W2*w1;  

                //l := s*u; //l4 := s1
                t1 := sp1*u1;
                l0 := sp0*u0;
                l3 := sp1*u2 + sp0;
                l2 := t1 + sp0*u2;
                l1 := (sp1 + sp0)*(u1 + u0) - l0 - t1;
                //dw

                t2 := l2 + dw*(v2 + v2);
                upp1 := -sp0*l3 - sp1*t2 + D*k3 - w1*up1;
                upp0 := -sp0*t2 - sp1*(l1 + dw*(v1 + v1)) + D*k2 - w1*up0 - up1*upp1;
                up1 := upp1*dw;
                up0 := upp0*dw;

                //vpp := V - (V + s*u + v + h) mod upp;
                t4 := sp1 - dw - dw;          //dw
                t5 := l3*w1 - upp1*t4;      //W
                t6 := up1*t5;               //W2     
                t7 := W*(w1*(l2 + dw*(v2 + yn2)) - upp0*t4) - t6;    //W2
                t8 := up0*t7;   //W^3
                vp1 := -W3*v1 - Wp*l1 + (up0 + up1)*(t5*W + t7) - W*t6 - t8; 
                vp0 := -W3*v0 - Wp*l0 + t8;

                
                //z := (f-vpp*(vpp + h))/c4;
                z5  := vp1 - W3*yn1;                        //W3
                if IsZero(z5) then
                    z4  := vp0 - W3*yn0;            //W3
                    if IsZero(z4) then
                        z3  := W3*d1 - yn2*vp1;    //W3      
                        if IsZero(z3) then

                            
                            return < 0,0,0,1,yn2,yn1,yn0,3>;
                        end if;//z3

                        //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                        //upp := upp/LeadingCoefficient(upp);           
                        w0 := (W3*z3)^-1;
                        w1 := w0*W3^2;    //1/z3
                        w2 := w0*z3;    //1/W3
                        w3 := w2*W2;     //1/W
                        vp0 := vp0*w2;
                        vp1 := vp1*w2;
                        upp0 := w1*(d0 - yn2*vp0 - vp1^2/2) - up1*w3;

                        //vpp := V - (V + vpp + h) mod upp;
                        upp2 := upp0^2;
                        vpp0 := -vp0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                        
                        return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                    end if;//z4

                    //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                    //upp := upp/LeadingCoefficient(upp);
                    w0 := (W3*z4)^-1;
                    w1 := w0*W3^2;    //1/z3
                    w2 := w0*z4;    //1/W3
                    w3 := w2*W2;     //1/W
                    vp0 := vp0*w2;
                    vp1 := vp1*w2;
                    up0 := up0*w3;
                    up1 := up1*w3;
                    upp1 := w1*(d1 - yn2*vp1) - up1;
                    upp0 := w1*(d0 - yn2*vp0 - vp1^2/2) - up0 - up1*upp1;

                    //vpp := V - (v + h + V) mod upp;
                    t1 := -upp1 - upp1;
                    t2 := upp1*t1;
                    t3 := f6 - upp0 - upp0 - t2;
                    t4 := upp0*t3;
                    vpp1 := -vp1- (upp1 + upp0)*(t1 + t3) + t2 + t4;
                    vpp0 := -vp0 - t4;

                    
                    return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
                end if;//z5

                //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                //upp := upp/LeadingCoefficient(upp); 
                w0 := (W3*z5)^-1;
                w1 := w0*W3^2;    //1/z5
                w2 := w0*z5;    //1/W3
                w3 := w2*W2;     //1/W
                vp0 := vp0*w2;
                vp1 := vp1*w2;
                up0 := up0*w3;
                up1 := up1*w3;

                upp2 := w1*(vp0 - yn0) - up1;
                upp1 := w1*(d1 - yn2*vp1) - up0 - up1*upp2;
                upp0 := w1*(d0 - yn2*vp0 - vp1^2/2) - up0*upp2 - up1*upp1;

                //vpp := V - (V + v + h) mod upp;
                t1 := upp2^2 - upp1;
                t2 := upp1*upp2 - upp0;
                t3 := upp0*upp2;
                vpp2 := -yn2 + t1 + t1;
                vpp1 := -vp1 + t2 + t2;
                vpp0 := -vp0 + t3 + t3;

                
                return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
            end if;//w0

            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp := upp/LeadingCoefficient(upp);
            W := w0*dw;            //dw^3*(-s1*(s1 - c4))
            W2 := W^2;              //dw^6*(-s1*(s1 - c4))^2
            W3 := W*w0;             //dw^5*(-s1*(s1 - c4))^2    

            //l := s*u; //l4 := s1
            t1 := sp1*u1;
            l0 := sp0*u0;
            l3 := sp1*u2 + sp0;
            l2 := t1 + sp0*u2;
            l1 := (sp1 + sp0)*(u1 + u0) - l0 - t1;
            //dw

            t2 := l2 + dw*(v2 + v2);   //dw
            t4 := sp1 - dw - dw;          //dw
            t5 := sp1*l3;               //dw^2
            t6 := sp0*t2;               //dw^2
            upp2 := -sp0*t4 - t5 - w0*up1; 
            upp1 := -(sp0 + sp1)*(l3 + t2) + t5 + t6 + D*k3 - w0*up0 - up1*upp2; //W/dw
            upp0 := D*k2 - t6 - sp1*(l1 + dw*(v1 + v1)) - up0*upp2 - up1*upp1;
            up2 := upp2*dw;                     //W
            up1 := upp1*dw;                     //W
            up0 := upp0*dw;                     //W          

            //vpp := V - (V + s*u + v + h) mod upp;
            W4 := t4*W;
            t7 := l3*W - up2*t4;    //W*dw
            t8 := upp1*W4;          //W^2
            t9 := upp0*t7;             //W^2
            vp2 := -W2*v2 - W3*l2 + t8 + upp2*t7;
            vp1 := -W2*v1 - W3*l1 + (upp0 + upp1)*(W4 + t7) - t8 - t9;
            vp0 := -W2*v0 - W3*l0 + t9;

            //z := (f-v*(v + h))/c4;
            z6  := vp2 - W2*yn2;                                                  //W2

            if IsZero(z6) then
                z5  := vp1 - W2*yn1;
                if IsZero(z5) then
                    W3 := W2^2;
                    
                    z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
                    if IsZero(z4) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,3>;
                    end if;//z4

                    //upp := ExactQuotient(f-v*(v + h),u);
                    //upp := upp/LeadingCoefficient(upp);            
                    w0 := (W2*z4)^-1;
                    w1 := w0*W2;
                    w2 := w0*z4;
                    w3 := w2*W;
                    upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

                    //vpp := V - (V + vpp + h) mod upp;
                    upp2 := upp0^2;
                    vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//z5

                //upp := ExactQuotient(f-v*(v + h),u);
                //upp := upp/LeadingCoefficient(upp);
                W3 := W2^2;
                
                w0 := (W2*z5)^-1;
                w2 := w0*z5;
                w3 := w2*W;
                u2 := up2*w3;
                upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
                upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

                //vpp := V - (v + h + V) mod upp;
                t1 := -upp1 - upp1;
                t2 := upp1*t1;
                t3 := f6 - upp0 - upp0 - t2;
                t4 := upp0*t3;
                vpp1 := -vp1*w2- (upp1 + upp0)*(t1 + t3) + t2 + t4;
                vpp0 := -vp0*w2 - t4;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//z6

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp); 
            w0 := (W2*z6)^-1;
            w1 := w0*W2;
            w2 := w0*z6;
            w3 := w2*W;
            u2 := up2*w3;
            u1 := up1*w3;
            W3 := W2^2; 
            
            upp2 := w1*(vp1 - W2*yn1) - u2;
            upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
            upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

            //vpp := V - (V + v + h) mod upp;
            t1 := upp2^2 - upp1;
            t2 := upp1*upp2 - upp0;
            t3 := upp0*upp2;
            vpp2 := -vp2*w2 + t1 + t1;
            vpp1 := -vp1*w2 + t2 + t2;
            vpp0 := -vp0*w2 + t3 + t3;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
        end if;//m3

        //a1 := LeadingCoefficient(dw1)^-1; //a1 := (-m3)^-1;
        //S1 := dw1*a1;//S10 := m4*a1;//S1 := x + S10;
        //dw := (vp+v+h) mod S1;// = (b2^-1)*S for S,a2,b2 = XGCD(S1,v + vp + h);
        M2 := m3^2;
        M3 := M2*m3;
        M4 := M2^2;
        t1 := vp1 + v1;
        
        //a1 := LeadingCoefficient(dw1)^-1;
        //S := R!dw1*a1;        
        //dw := (vp+v+h) mod S;// = (b2^-1)*S for S,a2,b2 = XGCD(S1,v + vp + h);
        t2 := m4^2;
        dw := M4*(vp0 + v0) + m4*(t1*M3 + m4*((v2 + yn2)*M2 - t2 - t2)); //weight m3^4
        if IsZero(dw) then
            //S,a2,b2 := XGCD(S1,vp+v + h);
            //S1 = S, a2 = 1, b2 = 0;
            //a1 := LeadingCoefficient(dw1)^-1;
            //S1 := dw1*a1;
            //a1 := -m3^-1;
            //S10 := m4;

            //u := ExactQuotient(u,S1);
            //up := ExactQuotient(up,S1);
            un1 := m3*u2 + m4;
            un0 := M2*u1 + m4*un1;             
            up0 := m3*up1 + m4;

            //s  := a1*(vp - v) mod up;
            sp0 := M2*(v0 - vp0) + up0*(m3*(vp1 - v1) - up0*(yn2 - v2));

            //k := ExactQuotient(f - v*(v + h),u);
            
            t1 := v1 - yn1;
            t2 := v2 - yn2;
            k4 := t2 + t2;
            k3 := m3*(t1 + t1) - un1*k4;                                     //m3
            t3 := v0 - yn0;
            k2  := M2*(t3 + t3 - v2^2 - c10) - un1*k3 - un0*k4;     //M2
            k1  := M3*(f3 - v1*(v2 + v2)) - un1*k2 - un0*k3;      //M3

            w0 := sp0 + sp0 + M3*k4;
            if IsZero(w0) then
                w1 := M2*k3;
                if IsZero(w1) then
                    w2 := -sp0*(M3*(v2 + v2) + sp0) + M3*m3*k2;
                    if IsZero(w2) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,3>;
                    end if;//w2

                    w0 := (m3*w2)^-1;
                    w1 := M3^2*m3*w0;    //1/(s0*(-v2 - v2 - s0) + k2)
                    w3 := w0*w2;    //1/m3
                    w4 := w3^2;     //1/M2
                    w5 := w4*w3;    //1/M3
                    s0 := sp0*w5;
                    up0 := up0*w3;
                    t0 := s0*un1*w3;

                    //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                    //upp   := upp/LeadingCoefficient(upp);
                    upp0 := -w1*(s0*(v1 + v1 + t0) - w5*k1) - up0;
                    upp2 := upp0^2;
                    
                    //vpp   := V - (V + s*u + v + h) mod upp;
                    vpp0 := -v0 - s0*un0*w4 + upp0*(v1 + yn1 + t0 - upp0*(v2 + yn2 + s0 - upp2 - upp2));
                    
                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//w1

                w0 := (m3*w1)^-1;
                w2 := M3*m3*w0;    //1/(s0*c3 + k3)
                w3 := w0*w1;    //1/m3
                w4 := w3^2;     //1/M2
                w5 := w4*w3;    //1/M3
                s0 := sp0*w5;
                up0 := up0*w3;
                t4 := s0*un1*w3;

                //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp   := upp/LeadingCoefficient(upp);
                upp1 := -w2*(s0*(v2 + v2 + s0) - w4*k2) - up0;
                upp0 := -w2*(s0*(v1 + v1 + t4) - w5*k1) - up0*upp1;

                //vpp   := V - (V + s*u + v + h) mod upp;
                t0 := upp1 + upp1;
                t1 := upp1*t0;
                t2 := upp0 + upp0 + v2 + yn2 + s0 - t1;
                t3 := upp0*t2;
                vpp1 := -v1 - t4 + (upp0 + upp1)*(t0 + t2) - t1 - t3;
                vpp0 := -v0 - w4*un0*s0 + t3;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//w0

            w1 := (m3*w0)^-1;
            w2 := M3*m3*w1;    //1/(s0*c4 + k4)
            w3 := w1*w0;    //1/m3
            w4 := w3^2;     //1/M2
            w5 := w4*w3;    //1/M3
            s0 := sp0*w5; 
            up0 := up0*w3;
            t3 := s0*un1*w3;

            //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp   := upp/LeadingCoefficient(upp);
            upp2 := w2*w3*k3 - up0;
            upp1 := -w2*(s0*(v2 + v2 + s0) - w4*k2) - up0*upp2;
            upp0 := -w2*(s0*(v1 + v1 + t3) - w5*k1) - up0*upp1;

            //vpp   := V - (V + s*u + v + h) mod upp;
            t1 := upp2^2 - upp1;
            t2 := upp1*upp2 - upp0;
            t4 := upp0*upp2;
            vpp2 := -v2 - s0 + t1 + t1;
            vpp1 := -v1 - t3 + t2 + t2;
            vpp0 := -v0 - s0*un0*w4 + t4 + t4;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
        end if;//dw

        //S1,a2,b2 := XGCD(S,vp+v + h);
        //S1 = 1
        //k := ExactQuotient(f - v*(v + h),u);
        
        t2 := v2 - yn2;
        t3 := v1 - yn1;
        k3 := t2 + t2;
        k2 := t3 + t3 - u2*k3;
        t4 := v0 - yn0;
        k1 := t4 + t4 - v2^2 - c10 - u1*k3 - u2*k2;
        k0 := f3 - v1*(v2 + v2)- u0*k3 - u1*k2 - u2*k1;

        //b2 :=FF!(dw/M4)^-1;
        //t := (1 - b2*(v + vp + h)) mod up;
        //a2 := ExactQuotient(t,S);
        t2 := -M3*(up1 + up1);
        t3 := -M3*(yn2 + v2 + up0 + up0) - up1*t2;
        a21 := M3*(vp1 + v1) + up0*t2 + up1*t3; //with weight dw
        
        //s := (a2*a1*(vp - v) + b2*k) mod up;
        //sp := (a21*(vp - v) + M4*k) mod up;
        t0 := k2 - up1*k3;
        sp1 := M4*(k1 - up0*k3 - up1*t0) + a21*(vp1 - v1 - up1*(yn2 - v2));
        sp0 := M4*(k0 - up0*t0) + a21*(vp0 - v0 - up0*(yn2 - v2));

        if IsZero(sp1) then
            if IsZero(sp0) then
                if IsZero(k3) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,2>;
                end if;//k3
                //upp := ExactQuotient(k, up); 
                //upp := upp/LeadingCoefficient(upp);
                w1 := k3^-1;
                upp0 := w1*k2 - up1;
                upp2 := upp0^2;

                //vpp := V - (V + v + h) mod upp;
                vpp0 := -v0 + upp0*(v1 + yn1 - upp0*(v2 + yn2 - upp2 - upp2));

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
            end if;//sp0

            //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp   := upp/LeadingCoefficient(upp);
            w0 := (dw*sp0)^-1;
            w1 := w0*dw^2;
            s0 := w0*sp0^2;                    
            upp1 := (w1*k3 - s0)/2 - up1;
            upp0 := -v2 + (w1*k2 - u2*s0)/2 - up0 - up1*upp1; 

            //vpp   := V - (V + s*u + v + h) mod upp;
            t0 := upp1 + upp1 + s0;
            t1 := upp1*t0;
            t2 := s0*u2 + v2 + yn2 + upp0 + upp0 - t1;
            t3 := upp0*t2;
            vpp1 := -v1 - s0*u1 + (upp0 + upp1)*(t0 + t2) - t1 - t3;
            vpp0 := -v0 - s0*u0 + t3;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
        end if;//sp1

        w0 := -sp1*(sp1 - dw - dw);
        D := dw^2;

        if IsZero(w0) then                
            w1 := -sp1*(sp1*u2 + sp0);
            if IsZero(w1) then
                w2 := -sp1*(sp1*u1 + sp0*u2 + dw*(v2 + v2)) + k3*D;
                if IsZero(w2) then

                    
                    return < ccs[2][1][4],ccs[2][1][3],ccs[2][1][2],ccs[2][1][1],ccs[2][1][8],ccs[2][1][7],ccs[2][1][6],ccs[2][1][5]>;
                end if;//w2

                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp := upp/LeadingCoefficient(upp);
                W := w2*dw;            //dw^3*(-s1*(s1 - c4))
                W2 := W^2;              //dw^6*(-s1*(s1 - c4))^2
                W3 := W*W2;             //dw^5*(-s1*(s1 - c4))^2  
                W4 := W2^2;
                
                //l := s*u; //l4 := s1
                t1 := sp1*u1;
                l0 := sp0*u0;
                l3 := sp1*u2 + sp0;
                l2 := t1 + sp0*u2;
                l1 := (sp1 + sp0)*(u1 + u0) - l0 - t1;
                upp0 := -sp0*(l2 + dw*(v2 + v2)) - sp1*(l1 + dw*(v1 + v1)) + D*k2 - w2*up1;
                up0 := upp0*dw;

                //vpp := V - (V + s*u + v + h) mod upp;
                t3 := up0*(W2*(v2 + yn2) + W*w2*l2 - up0*(w2*l3 - upp0*(sp1 - dw - dw))); //W3
                vp0 := -W4*v0 - W3*w2*l0 + up0*(W3*(v1 + yn1) + W2*w2*l1 - t3); //W4
                
                //z := (f-vpp*(vpp + h))/c4;
                z4  := vp0 - W4*yn0;               //W4
                if IsZero(z4) then
                    z3  := W4*d8;        //W4
                    if IsZero(z3) then
                        z2  := W4*d7 - yn2*vp0;    //W4    
                        if IsZero(z2) then

                            
                            return < 0,0,0,1,yn2,yn1,yn0,3>;
                        end if;//z2

                        //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                        //upp := upp/LeadingCoefficient(upp);           
                        w0 := (W4*z2)^-1;
                        w1 := w0*W4^2;    //1/z2
                        w2 := w0*z2;    //1/W4
                        w3 := w2*W3;     //1/W
                        vp0 := vp0*w2;
                        upp0 := w1*(d6 - yn1*vp0) - up0*w3;

                        //vpp := V - (V + vpp + h) mod upp;
                        upp2 := upp0^2;
                        vpp0 := -vp0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                        
                        return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                    end if;//z3

                    //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                    //upp := upp/LeadingCoefficient(upp);
                    w0 := (W4*z3)^-1;
                    w1 := w0*W4^2;    //1/z3
                    w2 := w0*z3;    //1/W4
                    w3 := w2*W3;     //1/W
                    vp0 := vp0*w2;
                    up0 := up0*w3;
                    upp1 := w1*(d7 - yn2*vp0) - up0;
                    upp0 := w1*(d6 - yn1*vp0) - up0*upp1;

                    //vpp := V - (v + h + V) mod upp;
                    t1 := -upp1 - upp1;
                    t2 := upp1*t1;
                    t3 := f6 - upp0 - upp0 - t2;
                    t4 := upp0*t3;
                    vpp1 := -yn1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
                    vpp0 := -vp0 - t4;

                    
                    return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
                end if;//z4

                //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                //upp := upp/LeadingCoefficient(upp); 
                w0 := (W4*z4)^-1;
                w1 := w0*W4^2;    //1/z4
                w2 := w0*z4;    //1/W4
                w3 := w2*W3;     //1/W
                vp0 := vp0*w2;
                up0 := up0*w3;

                upp2 := w1*d8 - up0;
                upp1 := w1*(d7 - yn2*vp0) - up0*upp2;
                upp0 := w1*(d6 - yn1*vp0) - up0*upp1;

                //vpp := V - (V + v + h) mod upp;
                t1 := upp2^2 - upp1;
                t2 := upp1*upp2 - upp0;
                t3 := upp0*upp2;
                vpp2 := -yn2 + t1 + t1;
                vpp1 := -yn1 + t2 + t2;
                vpp0 := -vp0  + t3 + t3;

                
                return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
            end if;//w1

            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp := upp/LeadingCoefficient(upp);
            W := w1*dw;            //dw^3*(-s1*(s1 - c4))
            W2 := W^2;              //dw^6*(-s1*(s1 - c4))^2
            W3 := W*W2;             //dw^5*(-s1*(s1 - c4))^2  
            Wp := W2*w1;  

            //l := s*u; //l4 := s1
            t1 := sp1*u1;
            l0 := sp0*u0;
            l3 := sp1*u2 + sp0;
            l2 := t1 + sp0*u2;
            l1 := (sp1 + sp0)*(u1 + u0) - l0 - t1;
            //dw

            t2 := l2 + dw*(v2 + v2);
            upp1 := -sp0*l3 - sp1*t2 + D*k3 - w1*up1;
            upp0 := -sp0*t2 - sp1*(l1 + dw*(v1 + v1)) + D*k2 - w1*up0 - up1*upp1;
            up1 := upp1*dw;
            up0 := upp0*dw;

            //vpp := V - (V + s*u + v + h) mod upp;
            t4 := sp1 - dw - dw;          //dw
            t5 := l3*w1 - upp1*t4;      //W
            t6 := up1*t5;               //W2     
            t7 := W*(w1*(l2 + dw*(v2 + yn2)) - upp0*t4) - t6;    //W2
            t8 := up0*t7;   //W^3
            vp1 := -W3*v1 - Wp*l1 + (up0 + up1)*(t5*W + t7) - W*t6 - t8; 
            vp0 := -W3*v0 - Wp*l0 + t8;

            
            //z := (f-vpp*(vpp + h))/c4;
            z5  := vp1 - W3*yn1;                        //W3
            if IsZero(z5) then
                z4  := vp0 - W3*yn0;            //W3
                if IsZero(z4) then
                    z3  := W3*d1 - yn2*vp1;    //W3      
                    if IsZero(z3) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,3>;
                    end if;//z3

                    //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                    //upp := upp/LeadingCoefficient(upp);           
                    w0 := (W3*z3)^-1;
                    w1 := w0*W3^2;    //1/z3
                    w2 := w0*z3;    //1/W3
                    w3 := w2*W2;     //1/W
                    vp0 := vp0*w2;
                    vp1 := vp1*w2;
                    upp0 := w1*(d0 - yn2*vp0 - vp1^2/2) - up1*w3;

                    //vpp := V - (V + vpp + h) mod upp;
                    upp2 := upp0^2;
                    vpp0 := -vp0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//z4

                //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                //upp := upp/LeadingCoefficient(upp);
                w0 := (W3*z4)^-1;
                w1 := w0*W3^2;    //1/z3
                w2 := w0*z4;    //1/W3
                w3 := w2*W2;     //1/W
                vp0 := vp0*w2;
                vp1 := vp1*w2;
                up0 := up0*w3;
                up1 := up1*w3;
                upp1 := w1*(d1 - yn2*vp1) - up1;
                upp0 := w1*(d0 - yn2*vp0 - vp1^2/2) - up0 - up1*upp1;

                //vpp := V - (v + h + V) mod upp;
                t1 := -upp1 - upp1;
                t2 := upp1*t1;
                t3 := f6 - upp0 - upp0 - t2;
                t4 := upp0*t3;
                vpp1 := -vp1- (upp1 + upp0)*(t1 + t3) + t2 + t4;
                vpp0 := -vp0 - t4;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//z5

            //upp := ExactQuotient(f-vpp*(vpp + h),upp);
            //upp := upp/LeadingCoefficient(upp); 
            w0 := (W3*z5)^-1;
            w1 := w0*W3^2;    //1/z5
            w2 := w0*z5;    //1/W3
            w3 := w2*W2;     //1/W
            vp0 := vp0*w2;
            vp1 := vp1*w2;
            up0 := up0*w3;
            up1 := up1*w3;

            upp2 := w1*(vp0 - yn0) - up1;
            upp1 := w1*(d1 - yn2*vp1) - up0 - up1*upp2;
            upp0 := w1*(d0 - yn2*vp0 - vp1^2/2) - up0*upp2 - up1*upp1;

            //vpp := V - (V + v + h) mod upp;
            t1 := upp2^2 - upp1;
            t2 := upp1*upp2 - upp0;
            t3 := upp0*upp2;
            vpp2 := -yn2 + t1 + t1;
            vpp1 := -vp1 + t2 + t2;
            vpp0 := -vp0 + t3 + t3;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
        end if;//w0

        //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        //upp := upp/LeadingCoefficient(upp);
        W := w0*dw;            //dw^3*(-s1*(s1 - c4))
        W2 := W^2;              //dw^6*(-s1*(s1 - c4))^2
        W3 := W*w0;             //dw^5*(-s1*(s1 - c4))^2    

        //l := s*u; //l4 := s1
        t1 := sp1*u1;
        l0 := sp0*u0;
        l3 := sp1*u2 + sp0;
        l2 := t1 + sp0*u2;
        l1 := (sp1 + sp0)*(u1 + u0) - l0 - t1;
        //dw

        t2 := l2 + dw*(v2 + v2);   //dw
        t4 := sp1 - dw - dw;          //dw
        t5 := sp1*l3;               //dw^2
        t6 := sp0*t2;               //dw^2
        upp2 := -sp0*t4 - t5 - w0*up1; 
        upp1 := -(sp0 + sp1)*(l3 + t2) + t5 + t6 + D*k3 - w0*up0 - up1*upp2; //W/dw
        upp0 := D*k2 - t6 - sp1*(l1 + dw*(v1 + v1)) - up0*upp2 - up1*upp1;
        up2 := upp2*dw;                     //W
        up1 := upp1*dw;                     //W
        up0 := upp0*dw;                     //W          

        //vpp := V - (V + s*u + v + h) mod upp;
        W4 := t4*W;
        t7 := l3*W - up2*t4;    //W*dw
        t8 := upp1*W4;          //W^2
        t9 := upp0*t7;             //W^2
        vp2 := -W2*v2 - W3*l2 + t8 + upp2*t7;
        vp1 := -W2*v1 - W3*l1 + (upp0 + upp1)*(W4 + t7) - t8 - t9;
        vp0 := -W2*v0 - W3*l0 + t9;

        //z := (f-v*(v + h))/c4;
        z6  := vp2 - W2*yn2;                                                  //W2

        if IsZero(z6) then
            z5  := vp1 - W2*yn1;
            if IsZero(z5) then
                W3 := W2^2;
                
                z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
                if IsZero(z4) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,3>;
                end if;//z4

                //upp := ExactQuotient(f-v*(v + h),u);
                //upp := upp/LeadingCoefficient(upp);            
                w0 := (W2*z4)^-1;
                w1 := w0*W2;
                w2 := w0*z4;
                w3 := w2*W;
                upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

                //vpp := V - (V + vpp + h) mod upp;
                upp2 := upp0^2;
                vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
            end if;//z5

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);
            W3 := W2^2;
            
            w0 := (W2*z5)^-1;
            w2 := w0*z5;
            w3 := w2*W;
            u2 := up2*w3;
            upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
            upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

            //vpp := V - (v + h + V) mod upp;
            t1 := -upp1 - upp1;
            t2 := upp1*t1;
            t3 := f6 - upp0 - upp0 - t2;
            t4 := upp0*t3;
            vpp1 := -vp1*w2- (upp1 + upp0)*(t1 + t3) + t2 + t4;
            vpp0 := -vp0*w2 - t4;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//z6

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp); 
        w0 := (W2*z6)^-1;
        w1 := w0*W2;
        w2 := w0*z6;
        w3 := w2*W;
        u2 := up2*w3;
        u1 := up1*w3;
        W3 := W2^2; 
        
        upp2 := w1*(vp1 - W2*yn1) - u2;
        upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
        upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

        //vpp := V - (V + v + h) mod upp;
        t1 := upp2^2 - upp1;
        t2 := upp1*upp2 - upp0;
        t3 := upp0*upp2;
        vpp2 := -vp2*w2 + t1 + t1;
        vpp1 := -vp1*w2 + t2 + t2;
        vpp0 := -vp0*w2 + t3 + t3;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//d

    //k := ExactQuotient(f - v*(v + h),u);
    
    
    z3 := v2 - yn2;
    k3 := z3 + z3;
    z2 := v1 - yn1 - z3*u2;
    k2 := z2 + z2;


    //s := R!(Q!u^-1)*(vp - v) mod up;
    t1 := yn2 - v2;
    vt1 := vp1 - v1 - up1*t1;
    vt0 := vp0 - v0 - up0*t1;
    sp1 := m4*vt1 + m3*vt0;
    sp0 := m2*vt1 + m1*vt0;

    if IsZero(sp1) then
        if IsZero(sp0) then
            if IsZero(k3) then

                
                return < 0,0,0,1,yn2,yn1,yn0,2>;
            end if;//k3
            //upp := ExactQuotient(k, up); 
            //upp := upp/LeadingCoefficient(upp);
            w1 := k3^-1;
            upp0 := w1*k2 - up1;
            upp2 := upp0^2;

            //vpp := V - (V + v + h) mod upp;
            vpp0 := -v0 + upp0*(v1 + yn1 - upp0*(v2 + yn2 - upp2 - upp2));

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
        end if;//sp0

        //M1 := ExactQuotient(upp*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp  := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        //upp   := upp/LeadingCoefficient(upp);
        w0 := (d*sp0)^-1;
        w1 := w0*d^2;
        s0 := w0*sp0^2;                    
        upp1 := (w1*k3 - s0)/2 - up1;
        upp0 := -v2 + (w1*k2 - u2*s0)/2 - up0 - up1*upp1; 

        //vpp   := V - (V + s*u + v + h) mod upp;
        t0 := upp1 + upp1 + s0;
        t1 := s0*u2 + v2 + yn2 + upp0 + upp0 - upp1*t0;
        vpp1 := -v1 - s0*u1 + upp0*t0 + upp1*t1;
        vpp0 := -v0 - s0*u0 + upp0*t1;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
    end if;//sp1

    w0 := -sp1*(sp1 - d - d);
    D := d^2;

    if IsZero(w0) then                
        w1 := -sp1*(sp1*u2 + sp0);
        if IsZero(w1) then
            w2 := -sp1*(sp1*u1 + sp0*u2 + d*(v2 + v2)) + k3*D;
            if IsZero(w2) then

                
                return < ccs[2][1][4],ccs[2][1][3],ccs[2][1][2],ccs[2][1][1],ccs[2][1][8],ccs[2][1][7],ccs[2][1][6],ccs[2][1][5]>;
            end if;//w2

            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp := upp/LeadingCoefficient(upp);
            W := w2*d;            //d^3*(-s1*(s1 - c4))
            W2 := W^2;              //d^6*(-s1*(s1 - c4))^2
            W3 := W*W2;             //d^5*(-s1*(s1 - c4))^2  
            W4 := W2^2;
            
            //l := s*u; //l4 := s1
            t1 := sp1*u1;
            l0 := sp0*u0;
            l3 := sp1*u2 + sp0;
            l2 := t1 + sp0*u2;
            l1 := (sp1 + sp0)*(u1 + u0) - l0 - t1;
            upp0 := -sp0*(l2 + d*(v2 + v2)) - sp1*(l1 + d*(v1 + v1)) + D*k2 - w2*up1;
            up0 := upp0*d;

            //vpp := V - (V + s*u + v + h) mod upp;
            t3 := up0*(W2*(v2 + yn2) + W*w2*l2 - up0*(w2*l3 - upp0*(sp1 - d - d))); //W3
            vp0 := -W4*v0 - W3*w2*l0 + up0*(W3*(v1 + yn1) + W2*w2*l1 - t3); //W4
            
            //z := (f-vpp*(vpp + h))/c4;
            z4  := vp0 - W4*yn0;               //W4
            if IsZero(z4) then
                z3  := W4*d8;        //W4
                if IsZero(z3) then
                    z2  := W4*d7 - yn2*vp0;    //W4    
                    if IsZero(z2) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,3>;
                    end if;//z2

                    //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                    //upp := upp/LeadingCoefficient(upp);           
                    w0 := (W4*z2)^-1;
                    w1 := w0*W4^2;    //1/z2
                    w2 := w0*z2;    //1/W4
                    w3 := w2*W3;     //1/W
                    vp0 := vp0*w2;
                    upp0 := w1*(d6 - yn1*vp0) - up0*w3;

                    //vpp := V - (V + vpp + h) mod upp;
                    upp2 := upp0^2;
                    vpp0 := -vp0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//z3

                //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                //upp := upp/LeadingCoefficient(upp);
                w0 := (W4*z3)^-1;
                w1 := w0*W4^2;    //1/z3
                w2 := w0*z3;    //1/W4
                w3 := w2*W3;     //1/W
                vp0 := vp0*w2;
                up0 := up0*w3;
                upp1 := w1*(d7 - yn2*vp0) - up0;
                upp0 := w1*(d6 - yn1*vp0) - up0*upp1;

                //vpp := V - (v + h + V) mod upp;
                t1 := -upp1 - upp1;
                t2 := upp1*t1;
                t3 := f6 - upp0 - upp0 - t2;
                t4 := upp0*t3;
                vpp1 := -yn1 - (upp1 + upp0)*(t1 + t3) + t2 + t4;
                vpp0 := -vp0 - t4;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//z4

            //upp := ExactQuotient(f-vpp*(vpp + h),upp);
            //upp := upp/LeadingCoefficient(upp); 
            w0 := (W4*z4)^-1;
            w1 := w0*W4^2;    //1/z4
            w2 := w0*z4;    //1/W4
            w3 := w2*W3;     //1/W
            vp0 := vp0*w2;
            up0 := up0*w3;

            upp2 := w1*d8  - up0;
            upp1 := w1*(d7 - yn2*vp0) - up0*upp2;
            upp0 := w1*(d6 - yn1*vp0) - up0*upp1;

            //vpp := V - (V + v + h) mod upp;
            t1 := upp2^2 - upp1;
            t2 := upp1*upp2 - upp0;
            t3 := upp0*upp2;
            vpp2 := -yn2 + t1 + t1;
            vpp1 := -yn1 + t2 + t2;
            vpp0 := -vp0 + t3 + t3;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
        end if;//w1

        //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        //upp := upp/LeadingCoefficient(upp);
        W := w1*d;            //d^3*(-s1*(s1 - c4))
        W2 := W^2;              //d^6*(-s1*(s1 - c4))^2
        W3 := W*W2;             //d^5*(-s1*(s1 - c4))^2  
        Wp := W2*w1;  

        //l := s*u; //l4 := s1
        t1 := sp1*u1;
        l0 := sp0*u0;
        l3 := sp1*u2 + sp0;
        l2 := t1 + sp0*u2;
        l1 := (sp1 + sp0)*(u1 + u0) - l0 - t1;
        //d

        t2 := l2 + d*(v2 + v2);
        upp1 := -sp0*l3 - sp1*t2 + D*k3 - w1*up1;
        upp0 := -sp0*t2 - sp1*(l1 + d*(v1 + v1)) + D*k2 - w1*up0 - up1*upp1;
        up1 := upp1*d;
        up0 := upp0*d;

        //vpp := V - (V + s*u + v + h) mod upp;
        t4 := sp1 - d - d;          //d
        t5 := l3*w1 - upp1*t4;      //W
        t6 := up1*t5;               //W2     
        t7 := W*(w1*(l2 + d*(v2 + yn2)) - upp0*t4) - t6;    //W2
        t8 := up0*t7;   //W^3
        vp1 := -W3*v1 - Wp*l1 + (up0 + up1)*(t5*W + t7) - W*t6 - t8; 
        vp0 := -W3*v0 - Wp*l0 + t8;

        
        //z := (f-vpp*(vpp + h))/c4;
        z5  := vp1 - W3*yn1;                        //W3
        if IsZero(z5) then
            z4  := vp0 - W3*yn0;            //W3
            if IsZero(z4) then
                z3  := W3*d1 - yn2*vp1;    //W3      
                if IsZero(z3) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,3>;
                end if;//z3

                //upp := ExactQuotient(f-vpp*(vpp + h),upp);
                //upp := upp/LeadingCoefficient(upp);           
                w0 := (W3*z3)^-1;
                w1 := w0*W3^2;    //1/z3
                w2 := w0*z3;    //1/W3
                w3 := w2*W2;     //1/W
                vp0 := vp0*w2;
                vp1 := vp1*w2;
                upp0 := w1*(d0 - yn2*vp0 - vp1^2/2) - up1*w3;

                //vpp := V - (V + vpp + h) mod upp;
                upp2 := upp0^2;
                vpp0 := -vp0 - upp0*f5 + upp2*(f6 + upp2 + upp2);

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
            end if;//z4

            //upp := ExactQuotient(f-vpp*(vpp + h),upp);
            //upp := upp/LeadingCoefficient(upp);
            w0 := (W3*z4)^-1;
            w1 := w0*W3^2;    //1/z3
            w2 := w0*z4;    //1/W3
            w3 := w2*W2;     //1/W
            vp0 := vp0*w2;
            vp1 := vp1*w2;
            up0 := up0*w3;
            up1 := up1*w3;
            upp1 := w1*(d1 - yn2*vp1) - up1;
            upp0 := w1*(d0 - yn2*vp0 - vp1^2/2) - up0 - up1*upp1;

            //vpp := V - (v + h + V) mod upp;
            t1 := -upp1 - upp1;
            t2 := upp1*t1;
            t3 := f6 - upp0 - upp0 - t2;
            t4 := upp0*t3;
            vpp1 := -vp1- (upp1 + upp0)*(t1 + t3) + t2 + t4;
            vpp0 := -vp0 - t4;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//z5

        //upp := ExactQuotient(f-vpp*(vpp + h),upp);
        //upp := upp/LeadingCoefficient(upp); 
        w0 := (W3*z5)^-1;
        w1 := w0*W3^2;    //1/z5
        w2 := w0*z5;    //1/W3
        w3 := w2*W2;     //1/W
        vp0 := vp0*w2;
        vp1 := vp1*w2;
        up0 := up0*w3;
        up1 := up1*w3;

        upp2 := w1*(vp0 - yn0) - up1;
        upp1 := w1*(d1 - yn2*vp1) - up0 - up1*upp2;
        upp0 := w1*(d0 - yn2*vp0 - vp1^2/2) - up0*upp2 - up1*upp1;

        //vpp := V - (V + v + h) mod upp;
        t1 := upp2^2 - upp1;
        t2 := upp1*upp2 - upp0;
        t3 := upp0*upp2;
        vpp2 := -yn2 + t1 + t1;
        vpp1 := -vp1 + t2 + t2;
        vpp0 := -vp0 + t3 + t3;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
    end if;//w0

    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
    //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
    //upp := upp/LeadingCoefficient(upp);
    W := w0*d;            //d^3*(-s1*(s1 - c4))
    W2 := W^2;              //d^6*(-s1*(s1 - c4))^2
    W3 := W*w0;             //d^5*(-s1*(s1 - c4))^2    

    //l := s*u; //l4 := s1
    t1 := sp1*u1;
    l0 := sp0*u0;
    l3 := sp1*u2 + sp0;
    l2 := t1 + sp0*u2;
    l1 := (sp1 + sp0)*(u1 + u0) - l0 - t1;
    //d

    t2 := l2 + d*(v2 + v2);   //d
    t4 := sp1 - d - d;          //d
    t5 := sp1*l3;               //d^2
    t6 := sp0*t2;               //d^2
    upp2 := -sp0*t4 - t5 - w0*up1; 
    upp1 := -(sp0 + sp1)*(l3 + t2) + t5 + t6 + D*k3 - w0*up0 - up1*upp2; //W/d
    upp0 := D*k2 - t6 - sp1*(l1 + d*(v1 + v1)) - up0*upp2 - up1*upp1;
    up2 := upp2*d;                     //W
    up1 := upp1*d;                     //W
    up0 := upp0*d;                     //W          

    //vpp := V - (V + s*u + v + h) mod upp;
    W4 := t4*W;
    t7 := l3*W - up2*t4;    //W*d
    t8 := upp1*W4;          //W^2
    t9 := upp0*t7;             //W^2
    vp2 := -W2*v2 - W3*l2 + t8 + upp2*t7;
    vp1 := -W2*v1 - W3*l1 + (upp0 + upp1)*(W4 + t7) - t8 - t9;
    vp0 := -W2*v0 - W3*l0 + t9;

    //z := (f-v*(v + h))/c4;
    z6  := vp2 - W2*yn2;                                                  //W2

    if IsZero(z6) then
        z5  := vp1 - W2*yn1;
        if IsZero(z5) then
            W3 := W2^2;
            
            z4  := W2*vp0 - W3*(yn0 + d5) - vp2^2/2;      
            if IsZero(z4) then

                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//z4

            //upp := ExactQuotient(f-v*(v + h),u);
            //upp := upp/LeadingCoefficient(upp);            
            w0 := (W2*z4)^-1;
            w1 := w0*W2;
            w2 := w0*z4;
            w3 := w2*W;
            upp0 := w1*(W3*d1 - vp2*vp1) - up2*w3;

            //vpp := V - (V + vpp + h) mod upp;
            upp2 := upp0^2;
            vpp0 := -vp0*w2 - upp0*f5 + upp2*(f6 + upp2 + upp2);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//z5

        //upp := ExactQuotient(f-v*(v + h),u);
        //upp := upp/LeadingCoefficient(upp);
        W3 := W2^2;
        
        w0 := (W2*z5)^-1;
        w2 := w0*z5;
        w3 := w2*W;
        u2 := up2*w3;
        upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u2;
        upp0 := w0*(W3*d1 - vp2*vp1) - up1*w3 - u2*upp1;

        //vpp := V - (v + h + V) mod upp;
        t1 := -upp1 - upp1;
        t2 := upp1*t1;
        t3 := f6 - upp0 - upp0 - t2;
        t4 := upp0*t3;
        vpp1 := -vp1*w2- (upp1 + upp0)*(t1 + t3) + t2 + t4;
        vpp0 := -vp0*w2 - t4;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//z6

    //upp := ExactQuotient(f-v*(v + h),u);
    //upp := upp/LeadingCoefficient(upp); 
    w0 := (W2*z6)^-1;
    w1 := w0*W2;
    w2 := w0*z6;
    w3 := w2*W;
    u2 := up2*w3;
    u1 := up1*w3;
    W3 := W2^2; 
    
    upp2 := w1*(vp1 - W2*yn1) - u2;
    upp1 := w0*(W2*vp0 - W3*(yn0 + d5) - vp2^2/2) - u1 - u2*upp2;
    upp0 := w0*(W3*d1 - vp2*vp1) - up0*w3 - u1*upp2 - u2*upp1;

    //vpp := V - (V + v + h) mod upp;
    t1 := upp2^2 - upp1;
    t2 := upp1*upp2 - upp0;
    t3 := upp0*upp2;
    vpp2 := -vp2*w2 + t1 + t1;
    vpp1 := -vp1*w2 + t2 + t2;
    vpp0 := -vp0*w2 + t3 + t3;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
end function;

///////////////////////////////////////////////////////////////////////////////
// Deg3ADD():         
// Input:  u0,v0: Mumford coordinates for divisor D=<x + u0,v0,0> in reduced
//                basis.
//       up0,vp0: Mumford coordinates for divisor Dp=<x + up0,vp0,0> in reduced
//                basis.
//           ccs: Table of curve constants and precomputations, see 
//                Precompuation in arb_splitG3_UTL.mag
//      
// Output: Mumford coordinates upp1,upp0,vpp1,vpp0 and balance weight npp for 
//         for reduceed and balanced Dpp ~ D + Dp.               
// Description: Explicit computation for adding two degree 1 divisors with two up adjusts.                
///////////////////////////////////////////////////////////////////////////////
Deg3ADD:= function(u2,u1,u0,v2,v1,v0,up2,up1,up0,vp2,vp1,vp0,ccs)
   

    
    //d := Resultant(u,up);
    // Original Setup T for (s*u1 = v2-v1) mod u2
    //|t1,t2,t3|
    //|t4,t5,t6|
    //|t7,t8,t9|

    //Inverted T up to factor of d; M = (T^-1)*Det(T)
    //| m1= t5*t9-t8*t6,  m2= t3*t8-t2*t9, m3= t2*t6-t3*t5 |
    //| m4= t6*t7-t4*t9,  m5= t1*t9-t3*t7, m6= t3*t4-t1*t6 |
    //| m7= t4*t8-t5*t7,  m8= t2*t7-t1*t8, m9= t1*t5-t2*t4 |

    t1 := u0 - up0;         
    t4 := u1 - up1;      
    t7 := u2 - up2;      
    t2 := -up0*t7;
    t5 := t1 - up1*t7;
    t8 := t4 - up2*t7;
    //t3 := -d2[4]*t8;
    t6 := t2 - up1*t8;
    t9 := t5 - up2*t8;

    m1 := t5*t9 - t6*t8;
    m4 := t6*t7 - t4*t9;
    m7 := t4*t8 - t5*t7;
    d := t1*m1 + t2*m4 - up0*t8*m7; //Determinant of T = t1*m1 + t2*m4 + t3*m7

    if IsZero(d) then
        c10 := ccs[1][3][5];
        yn0 := ccs[1][2][1];
        f3  := ccs[1][1][4];
        yn1 := ccs[1][2][2];
        yn2 := ccs[1][2][3]; 
        //dw1 := u mod up; // = (a1^-1)*S for S,a1,b1 = XGCD(u,up);
        //dw12 := t7; dw11 := t4; dw10 := t1;  
        if IsZero(t7) then 
            if IsZero(t4) then 
                //dw2 := (vp+v+h) mod up;// = (b2^-1)*S for S,a2,b2 = XGCD(u,v + vp + h);
                 
                t0 := up2 + up2;
                w2 := vp2 + v2 + up1 + up1 - up2*t0;
                w1 := vp1 + v1 + up0 + up0 - up1*t0;
                w0 := vp0 + v0 - up0*t0;

                if IsZero(w2) then
                    if IsZero(w1) then
                        
                        
                        return < 0,0,0,1,yn2,yn1,yn0,1>;
                    end if;//w1

                    //dw3 = 0 = up mod dw2
                    //k := ExactQuotient(f - v*(v + h),u);      
                    t1 := v1 - yn1;
                    t2 := v2 - yn2;
                    k3 := t2 + t2;  
                    t4 := u2*k3;  
                    k2 := t1 + t1 - t4;
                    t5 := u1*k2;        
                    t6 := v0 - yn0;                  
                    k1 := t6 + t6 - v2^2 - c10 - (u1 + u2)*(k3 + k2) + t4 + t5;     
                    k0 := f3 - v2*(v1 + v1) - u0*k3 - t5 - u2*k1;

                    //b2 := LeadingCoefficient(dw2)^-1;
                    //S := dw2*b2; //S = dw2 with weight w1

                    //u := ExactQuotient(u,S);
                    W2 := w1^2;
                    un1 := w1*u2 - w0;          //w1
                    un0 := W2*u1 - w0*un1;        //W2

                    //up := ExactQuotient(up,S);
                    unp1 := w1*up2 - w0;        //dw21
                    unp0 := W2*up1 - w0*unp1;     //W2

                    //s := b2*k mod up;
                    W3 := W2*w1;
                    W4 := W2^2;
                    t0 := w1*k2 - unp1*k3;            //dw21
                    sp1 := W2*k1 - unp0*k3 - unp1*t0;   //W3
                    sp0 := W3*k0 - unp0*t0;             //W4

                    //k := k*S;
                    k4 := w1*k3;
                    k3 := w1*k2 + k3*w0;
                    k2 := w1*k1 + k2*w0;

                    if IsZero(sp1) then
                        w2 := sp0 + sp0 + k4*W3;
                        if IsZero(w2) then
                            w3 :=  k3*W3;
                            if IsZero(w3) then
                            
                                
                                return < 0,0,0,1,yn2,yn1,yn0,3>;
                            end if;//w3
                            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                            //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                            //upp := upp/LeadingCoefficient(upp);
                            w4 := (w3*w1)^-1;
                            w5 := w4*w3;            //1/w1
                            w6 := w4*W3*W2;         //1/(s0*c3 + k3)
                            w7 := w5^2;
                            s0 := sp0*w7^2;
                            u0 := un0*w7;
                            u1 := un1*w5;
                            upp0 := -w6*(s0*(v2 + v2 + s0) - k2*w5) - unp1*w5;
                            upp2 := upp0^2;

                            //vpp := V - (V + s*u + v + h) mod upp;
                            vpp0 := -v0 - s0*u0 + upp0*(v1 + yn1 + s0*u1 - upp0*(v2 + yn2 + s0 - upp2 - upp2));
                            
                            
                            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                        end if;//w2

                        //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                        //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                        //upp := upp/LeadingCoefficient(upp);
                        w4 := (w2*w1)^-1;
                        w5 := w4*w2;            //1/w1
                        w6 := w4*W3*W2;         //1/(s0*c4 + k4)
                        w7 := w5^2;
                        s0 := sp0*w7^2;
                        up1 := unp1*w5;
                        u0 := un0*w7;
                        u1 := un1*w5;
                        upp1 := w6*(k3*w5) - up1;
                        upp0 := w6*(s0*(-v2 - v2 - s0) + k2*w5) - unp0*w7 - upp1*up1;

                        //vpp := V - (V + u*s + v + h) mod upp;
                        t0 := upp1 + upp1;
                        t1 := s0 + v2 + yn2 + upp0 + upp0 - upp1*t0;
                        vpp1 := -v1 - s0*u1 + upp0*t0 + upp1*t1;
                        vpp0 := -v0 - s0*u0 + upp0*t1;
                        
                        
                        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
                    end if;//sp1

                    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                    //upp := upp/LeadingCoefficient(upp);
                    w0 := (w1*sp1)^-1;  //1/s1*W2^2
                    w2 := W2^2*w0/2;  //1/s1*c4
                    w3 := w0*sp1;   //1/w1
                    w4 := w3^2;     //1/W2
                    w5 := w4^2;     //1/W4
                    s1 := sp1*w4*w3;
                    s0 := sp0*w5;
                    up0 := unp0*w4;
                    up1 := unp1*w3;
                    u0 := un0*w4;
                    u1 := un1*w3;

                    
                    t1 := s1*u1;
                    l0 := s0*u0;
                    l2 := s1*u1 + s0;
                    l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
                    t3 := -v2 - v2 - l2;
                    t4 := -s1^2;
                    t5 := s0*t3;
                    upp2 := w2*(t4 + s0 + s0 + k4*w3) - up1;
                    upp1 := w2*((s1 + s0)*(t3 - s1) - t4 - t5 + k3*w3) - up0 - up1*upp2;
                    upp0 := w2*(s1*(-v1 - v1 - l1) + t5 + k2*w3) - up0*upp2 - up1*upp1;

                    //vpp := V - (V + u*s + v + h) mod upp;
                    t0 := upp2 + upp2 + s1;
                    vpp2 := -v2 - l2 - upp1 - upp1 + upp2*t0;
                    vpp1 := -v1 - l1 - upp0 - upp0 + upp1*t0;
                    vpp0 := -v0 - l0 + upp0*t0;

                    
                    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
                end if;//w2
                            
                //dw3 := up mod dw2;
                W2 := w2^2;
                t0 := w2*up2 - w1;
                w3 := W2*up1 - w2*w0 - w1*t0;   //dw31/W2
                w4 := W2*up0 - w0*t0;           //dw30/W2
                if IsZero(w3) then
                    //k := ExactQuotient(f - v*(v + h),u);
                    t1 := v1 - yn1;
                    t2 := v2 - yn2;
                    k3 := t2 + t2;  
                    t4 := u2*k3;  
                    k2 := t1 + t1 - t4;
                    t5 := u1*k2;      
                    t6 := v0 - yn0;                    
                    k1 := t6 + t6 - v2^2 - c10 - (u1 + u2)*(k3 + k2) + t4 + t5;     
                    k0 := f3 - v2*(v1 + v1) - u0*k3 - t5 - u2*k1;

                    //b2 := LeadingCoefficient(dw2)^-1;
                    b2 := w2^-1;

                    //S := dw2*b2;
                    //u := ExactQuotient(u,S);
                    //up := ExactQuotient(up,S);
                    S1 := w1*b2;
                    u0 := u2 - S1;
                    up0 := up2 - S1;

                    //s := b2*k mod up;
                    s0 := b2*(k0 - up0*(k1 - up0*(k2 - up0*k3)));

                    //upp := u*up;
                    upp1 := u0 + up0;
                    upp0 := u0*up0;

                    //vpp := V - (V - v - u*s) mod upp;
                    t0 := yn2 - v2;
                    vpp1 := v1 + s0 + upp1*t0;
                    vpp0 := v0 + s0*u0 + upp0*t0;

                    
                    return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
                end if;//w3

                //S := dw3/LeadingCoefficient(dw3);
                //S = x + w4/w3; or w3x + w4 with weight w3.
                
                //k := ExactQuotient(f-v*(v + h),up);
                t1 := v1 - yn1;
                t2 := v2 - yn2;
                k3 := t2 + t2;  
                t4 := up2*k3;  
                k2 := t1 + t1 - t4;
                t5 := up1*k2; 
                t6 := v0 - yn0;                         
                k1 := t6 + t6 - v2^2 - c10 - (up1 + up2)*(k3 + k2) + t4 + t5;     
                k0 := f3 - v2*(v1 + v1) - up0*k3 - t5 - up2*k1;

                //up := ExactQuotient(up,S);
                W2 := w3^2;
                W3 := W2*w3;
                unp1 := w3*up2 - w4;            //w3
                unp0 := W2*up1 - w4*unp1;       //W2

                //Q := quo<R | up>;
                //a := dw2 mod up;
                //b2 := S*R!((Q!a)^-1) mod up;  //2x2 system
                
                m1 := W2*w0 - unp0*w2;  //w3^2
                m2 := unp1*w2 - w3*w1;  //w3
                m3 := -unp0*m2;         //w^3 
                m4 := m1 + unp1*m2;     //w3^2
                dp := m1*m4 - m2*m3;     //w3^4
                d := dp*w3;
                b1 := m1 + w4*m2;       //d/W3
                b0 := m3 + w4*m4;       //d/W2

                //kp := k mod up;
                t0 := w3*k2 - unp1*k3;
                kp1 := W2*k1 - unp0*k3 - unp1*t0;   //W2
                kp0 := W3*k0 - unp0*t0;             //W3
                
                //s := b2*kp mod up;
                t0 := b1*kp1;
                t1 := b0*kp0;
                sp1 := (b1 + b0)*(kp0 + kp1) - t0 - t1 - unp1*t0;   //d
                sp0 := t1 - unp0*t0;                                //d*w3

                //k := k*S;
                k4 := w3*k3;            //w3
                k3 := w3*k2 + w4*k3;    //w3
                k2 := w3*k1 + w4*k2;    //w3

                if IsZero(sp1) then
                    w2 := sp0 + sp0 + k4*d;
                        if IsZero(w2) then
                            w1 :=  k3*d;
                            if IsZero(w1) then

                                
                                return < 0,0,0,1,yn2,yn1,yn0,3>;
                            end if;//w1
                            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                            //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                            //upp := upp/LeadingCoefficient(upp);
                            w0 := d*w3;
                            w2 := (w1*w0)^-1;
                            w4 := w2*w1;            //1/w3*d
                            w5 := w2*w0^2;         //1/(s0*c3 + k3)
                            w6 := w4*d;
                            s0 := sp0*w4;
                            up0 := unp0*w6^2;
                            up1 := unp1*w6;
                            upp0 := w5*(s0*(-v2 - v2 - s0) + k2*w6) - up1;
                            upp2 := upp0^2;

                            //vpp := V - (V + s*up + v + h) mod upp;
                            vpp0 := -v0 - s0*up0 + upp0*(v1 + yn1 + s0*up1 - upp0*(v2 + yn2 + s0 - upp2 - upp2));
                            
                            
                            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                        end if;//w2

                        //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                        //upp := ExactQuotient(-s*(s*up + 2*v + h) + k, up);
                        //upp := upp/LeadingCoefficient(upp);
                        w0 := d*w3;
                        w1 := (w2*w0)^-1;
                        w4 := w1*w2;            //1/w3*d
                        w5 := w1*w0^2;         //1/(s0*c4 + k4)
                        w6 := w4*d;
                        s0 := sp0*w4;
                        up0 := unp0*w6^2;
                        up1 := unp1*w6;

                        upp1 := w5*k3*w6 - up1;
                        upp0 := w5*(s0*(-v2 - v2 - s0) + k2*w6) - up0 - upp1*up1;

                        //vpp := V - (V + up*s + v + h) mod upp;
                        t0 := upp1 + upp1;
                        t1 := s0 + v2 + yn2 + upp0 + upp0 - upp1*t0;
                        vpp1 := -v1 - s0*up1 + upp0*t0 + upp1*t1;
                        vpp0 := -v0 - s0*up0 + upp0*t1;
                        
                        
                        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
                end if;//sp1

                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp := upp/LeadingCoefficient(upp);
                w0 := d*w3;
                w1 := (w0*sp1)^-1;  //1/s1*d^2*w3
                w2 := w0*d*w1/2;      //1/s1*c4
                w4 := w1*sp1;       //1/w3*d
                w5 := w4*d;         //1/w3
                w6 := w5^2;         //1/W2
                s1 := sp1*w4*w3;
                s0 := sp0*w4;
                up0 := unp0*w6;
                up1 := unp1*w5;

                t1 := s1*up1;
                l0 := s0*up0;
                l2 := s1*up1 + s0;
                l1 := (s1 + s0)*(up1 + up0) - l0 - t1;
                t3 := -v2 - v2 - l2;
                t4 := -s1^2;
                t5 := s0*t3;
                upp2 := w2*(t4 + s0 + s0 + k4*w5) - up1;
                upp1 := w2*((s1 + s0)*(t3 - s1) - t4 - t5 + k3*w5) - up0 - up1*upp2;
                upp0 := w2*(s1*(-v1 - v1 - l1) + t5 + k2*w5) - up0*upp2 - up1*upp1;

                //vpp := V - (V + u*s + v + h) mod upp;
                t0 := upp2 + upp2 + s1;
                vpp2 := -v2 - l2 - upp1 - upp1 + upp2*t0;
                vpp1 := -v1 - l1 - upp0 - upp0 + upp1*t0;
                vpp0 := -v0 - l0 + upp0*t0;
                
                
                return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
            end if;//t4
            
            //a1 := LeadingCoefficient(dw1)^-1;
            //S := R!dw1*a1;
            //dw2 := (vp+v+h) mod S;// = (b2^-1)*S for S,a2,b2 = XGCD(S,v + vp + h);
            T0 := t1;
            T1 := t4;
            T2 := t4^2;
            T3 := T2*t4;
            T4 := T2^2;
            m2 := t1^2;
            
            
            dw2 := T4*(v0 + vp0) - t1*(T3*(v1 + vp1) - t1*(T2*(v2 + vp2) - m2 - m2));
            if IsZero(dw2) then   
                //S,a2,b2 := XGCD(S,vp+v + h);
                //S1 = S, a2 = 1, b2 = 0;
                //u := ExactQuotient(u,S);
                un1 := T1*u2 - T0;              //T1
                un0 := T2*u1 - T0*un1;          //T2

                //up := ExactQuotient(up,S);
                unp1 := T1*up2 - T0;            //T1
                unp0 := T2*up1 - T0*unp1;       //T2
                
                //k := ExactQuotient(f - v*(v + h),u);
                t1 := v1 - yn1;
                t2 := v2 - yn2;
                t3 := v0 - yn0;
                k4 := t2 + t2;
                k3 := T1*(t1 + t1) - k4*un1;                                 //T1
                k2 := T2*(t3 + t3 - v2^2 - c10) - k4*un0 - k3*un1; //T2

                //s  := a1*(vp - v) mod up;
                t0 := vp2 - v2;
                sp1 := T1*(vp1 - v1) - unp1*t0;     //T2
                sp0 := T2*(vp0 - v0) - unp0*t0;     //T3

                if IsZero(sp1) then
                    w2 := sp0 + sp0 + k4*T3;
                    if IsZero(w2) then
                        w3 := k3*T2;
                        if IsZero(w3) then

                            
                            return < 0,0,0,1,yn2,yn1,yn0,3>;
                        end if;//w3
                        //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                        //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                        //upp := upp/LeadingCoefficient(upp);
                        w4 := (w3*T1)^-1;
                        w5 := w4*w3;            //1/T1
                        w6 := w4*T4;         //1/(s0*c3 + k3)
                        w7 := w5^2;
                        s0 := sp0*w7*w5;
                        u0 := un0*w7;
                        u1 := un1*w5;
                        upp0 := w6*(s0*(-v2 - v2 - s0) + k2*w7) - unp1*w5;
                        upp2 := upp0^2;

                        //vpp := V - (V + s*u + v + h) mod upp;
                        vpp0 := -v0 - s0*u0 + upp0*(v1 + yn1 + s0*u1 - upp0*(v2 + yn2 + s0 - upp2 - upp2));
                        
                        
                        return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                    end if;//w2

                    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                    //upp := upp/LeadingCoefficient(upp);
                    w4 := (w2*T1)^-1;
                    w5 := w4*w2;            //1/T1
                    w6 := w4*T4;         //1/(s0*c4 + k4)
                    w7 := w5^2;
                    s0 := sp0*w7*w5;
                    up1 := unp1*w5;
                    u0 := un0*w7;
                    u1 := un1*w5;
                    upp1 := w6*(k3*w5) - up1;
                    upp0 := w6*(s0*(-v2 - v2 - s0) + k2*w7) - unp0*w7 - upp1*up1;

                    //vpp := V - (V + u*s + v + h) mod upp;
                    t0 := upp1 + upp1;
                    t1 := s0 + v2 + yn2 + upp0 + upp0 - upp1*t0;
                    vpp1 := -v1 - s0*u1 + upp0*t0 + upp1*t1;
                    vpp0 := -v0 - s0*u0 + upp0*t1;
                    
                    
                    return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
                end if;//sp1

                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp := upp/LeadingCoefficient(upp);
                w0 := (T1*sp1)^-1;  //1/s1*T3
                w2 := T3*w0/2;  //1/s1*c4
                w3 := w0*sp1;   //1/T1
                w4 := w3^2;     //1/T2
                s1 := sp1*w4;
                s0 := sp0*w4*w3;
                up0 := unp0*w4;
                up1 := unp1*w3;
                u0 := un0*w4;
                u1 := un1*w3;

                t1 := s1*u1;
                l0 := s0*u0;
                l2 := s1*u1 + s0;
                l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
                t3 := -v2 - v2 - l2;
                t4 := -s1^2;
                t5 := s0*t3;
                upp2 := w2*(t4 + s0 + s0 + k4) - up1;
                upp1 := w2*((s1 + s0)*(t3 - s1) - t4 - t5 + k3*w3) - up0 - up1*upp2;
                upp0 := w2*(s1*(-v1 - v1 - l1) + t5 + k2*w4) - up0*upp2 - up1*upp1;

                //vpp := V - (V + u*s + v + h) mod upp;
                t0 := upp2 + upp2 + s1;
                vpp2 := -v2 - l2 - upp1 - upp1 + upp2*t0;
                vpp1 := -v1 - l1 - upp0 - upp0 + upp1*t0;
                vpp0 := -v0 - l0 + upp0*t0;

                
                return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
            end if;//dw2

            //k := ExactQuotient(f - v*(v + h),u);
            t0 := v0 - yn0;
            t1 := v1 - yn1;
            t2 := v2 - yn2;
            k3 := t2 + t2;       
            k2 := t1 + t1 - u2*k3;                          
            k1 := t0 + t0 - v2^2 - c10 - u1*k3 - u2*k2;     
            k0 := f3 - v2*(v1 + v1) - u0*k3 - u1*k2 - u2*k1;

            //S,a2,b2 := XGCD(S1,vp+v + h);
            //S := 1;
            //b2 :=FF!(dw2/T4)^-1;
            //t := (1 - (T4/dw2)*(v + vp + h)) mod up;
            //a2 := ExactQuotient(t,S);
            //a2*a1;
            t0 := up2 + up2;
            t1 := -v2 - vp2 - up1 - up1 + up2*t0;
            a21 := T3*(-v2 - vp2 - up1 - up1 + up2*t0);            //dw2
            a20 := T3*(-v1 - vp1 - up0 - up0 + up1*t0) - T0*T2*t1;   //dw2

            //s  := (a2*a1*(vp - v) + b2*k) mod up;
            vt2 := vp2 - v2;
            vt1 := vp1 - v1;
            vt0 := vp0 - v0;
            t3 := a21*vt2 + T4*k3;
            sp2 := a21*vt1 + a20*vt2 + T4*k2 - up2*t3;    //dw2
            sp1 := a21*vt0 + a20*vt1 + T4*k1 - up1*t3;    //dw2
            sp0 := a20*vt0 + T4*k0 - up0*t3;             //dw2
            
            if IsZero(sp2) then
                if IsZero(sp1) then
                    if IsZero(sp0) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,2>;
                    end if;//sp0

                    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                    //upp := upp/LeadingCoefficient(upp);
                    w1 := (dw2*sp0)^-1;
                    w2 := w1*sp0;
                    w3 := w1*dw2^2;
                    s0 := sp0*w2;
                    upp0 := -s0/2 + w3*(v2 - yn2) - up2;

                    //vpp := V - (V + u*s + v + h) mod upp;
                    t0 := upp0*(v2 + yn2 + s0*u2 - upp0*(s0 + upp0 + upp0));
                    vpp0 := -v0 - s0*u0 + upp0*(v1 + yn1 + s0*u1 - t0);

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
                end if;//sp1

                w0 := sp1 - dw2 - dw2;       //(s1 - c4)*dw2
                if IsZero(w0) then
                    w1 := sp0 + sp1*u2;
                    if IsZero(w1) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,0>;
                    end if;//w1
                    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                    //upp := upp/LeadingCoefficient(upp);
                    t0 := v2 - yn2;
                    k3 := t0 + t0;
                    w0 := w1*sp1;           
                    w2 := (w0*dw2)^-1;        //1/s1*(s1 - c4)*dw2^3
                    w3 := w2*w0;            //1/dw2
                    w4 := w2*dw2^2*dw2;         //1/s1*(s1 - c4)
                    s1 := sp1*w3;
                    s0 := sp0*w3;

                    t1 := s1*u1;
                    l0 := s0*u0;
                    l3 := s1*u2 + s0;
                    l2 := t1 + s0*u2;
                    l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
                    upp0 := w4*(s1*(l2 + v2 + v2) + s0*l3 - k3) - up2;

                    //vpp := V - (V + u*s + v + h) mod upp;
                    t0 := upp0*(v2 + yn2 + l2 - upp0*(l3 - upp0*(s1 - 2)));
                    vpp0 := -v0 - l0 + upp0*(v1 + yn1 + l1 - t0);

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
                end if;//w0

                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp := upp/LeadingCoefficient(upp);
                t0 := v2 - yn2;
                k3 := t0 + t0;
                w1 := w0*sp1;           //s1*(s1 - c4)*D
                w2 := (w1*dw2)^-1;        //1/s1*(s1 - c4)*dw2^3
                w3 := w2*w1;            //1/dw2
                w4 := w2*dw2^2*dw2;         //1/s1*(s1 - c4)
                s1 := sp1*w3;
                s0 := sp0*w3;

                t1 := s1*u1;
                t4 := s1 - 2;
                l0 := s0*u0;
                l3 := s1*u2 + s0;
                l2 := t1 + s0*u2;
                l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
                upp1 := w4*(s1*l3 + s0*t4) - up2;
                upp0 := w4*(s1*(l2 + v2 + v2) + s0*l3 - k3) - up1 - up2*upp1;

                //vpp := V - (V + s*u + v + h) mod upp;
                t5 := l3 - upp1*t4;
                t6 := upp1*t5;
                t7 := l2 + v2 + yn2 - upp0*t4 - t6;
                t8 := upp0*t7;
                vpp1 := -v1 - l1 + (upp0 + upp1)*(t5 + t7) - t6 - t8; 
                vpp0 := -v0 - l0 + t8;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
            end if;//sp2

            //q   := u2 div s;
            //q1 = 1/s2, q0 = (1/s2)*(d2[2] - (s1/s2))
            //r   := u2 mod s;
            //r1 = d2[3] - (s0/s2) - s1*q0, r0 = d2[4] - s0*q0
            //Precomp
            t10 := sp2^2;                          //s2^2*dw2^2
            t11 := sp2*dw2;                          //s2*dw2^2
            w0  := up2*sp2 - sp1;                  //=(q0/q1)*s2*dw2
            w1  := t10*up1 - sp0*sp2 - sp1*w0;     //=(r1/q1)*s2*dw2^2
            
            if IsZero(w1) then
                t1 := v1 - yn1;
                t2 := v2 - yn2;
                k3 := t2 + t2;
                k2 := t1 + t1 - u2*k3;
                w2  := t10*up0 - sp0*w0;               //=(r0/q1)*s2*dw2^2
                if IsZero(w2) then
                    if IsZero(k3) then
                        w3 := sp2^-1;   //1/s2*dw2
                        w4 := w3*dw2;     //q1
                        M20 := k2*w4;

                        upp0 := w0*w3;
                        upp2 := upp0^2;
                        vpp0 := M20 - v0 - upp0*(-yn1 - v1 - upp0*(-yn2 - v2 + upp2 + upp2));

                        
                        return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                    end if;//k3

                    //M2  := ExactQuotient(k*q, up);
                    //upp := -q*M2;
                    //l := ExactQuotient(-upp, q);
                    //upp := upp/LeadingCoefficient(upp);           
                    w3 := (k3*sp2)^-1;  //1/s2*k3*dw2
                    w4 := w3*k3;        //1/s2*dw2
                    w5 := w3*sp2*k2;    //k2/k3
                    w6 := sp1*w4;    //s1/s2
                    w7 := w4*dw2;      //1/s2          
                    t1 := w5 - w6;    
                    t2 := up2 - w6;
                    upp1 := t1 + t2;
                    upp0 := t1*t2;
                    
                    //vpp := -V - h + (M2 - v + V) mod upp;
                    t0 := -upp1 - upp1;
                    t1 := t0*upp1;
                    t2 := -yn2 - v2 - upp0 - upp0 - t1;
                    t3 := t2*upp0;
                    t4 := w7*k3;
                    vpp1 := -v1 + t4 - (upp0 + upp1)*(t0 + t2) + t1 + t3;
                    vpp0 := -v0 + w7*k2 - w6*t4 - t3;

                    
                    return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
                end if;//w2

                w3 := w2 + w2 - k3*t11;    //(c4*r0 - k3*q1)*(sp2^2)
                if IsZero(w3) then
                    w4 := -k3*w0*dw2 - t11*k2; //sp2^2
                    if IsZero(w4) then
                        
                        return < 0,0,0,1,yn2,yn1,yn0,3>;
                    end if;//w4

                    //q,r := Quotrem(up,s);
                    //M1  := ExactQuotient(u*r + (vp - v)*q, up);
                    //M2  := ExactQuotient(-r*(vp + v + h) - k*q, up);
                    //upp := r*M1 + q*M2;
                    w5 := (t11*w4)^-1;
                    w6 := w5*t11;        //1/(k2*q1 + k3*q0 - r0*c3)(s2^2*dw2^2)
                    w7 := w5*w4;        //1/s2*dw2^2;
                    w8 := w7*dw2;         //1/s2*dw2;
                    w9 := w0*w8;        //q0/q1
                    w10 := w2*w7;       //r0/q1
                    upp0 := w9 + w2*w6*(w10 + vp2 - v2);
                    upp2 := upp0^2;

                    //upp2 := q1*(c4*r0 - k3*q1)
                    //vpp := -V - h + (ExactQuotient(u*r -upp*upp2), q) - v + V) mod upp;
                    //l2 := w10;
                    t1 := w10*(u2 - w9);
                    t0 := w10*u1 - w4*w8^2 - w9*t1;
                    vpp0 := -v0 + t0 - upp0*(-yn1 - v1 + t1 - upp0*(-yn2 - v2 + w10 + upp2 + upp2));
                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//w3;

                w4 := (t11*w3)^-1;       //1/(c4*r0 - k3*q1)*s2^3*dw2^4
                w5 := w4*t11;            //1/(c4*r0 - k3*q1)*(s2^2*dw2^2)
                w6 := w4*w3;            //1/s2*dw2^2
                w7 := w6*dw2;             //1/s2*dw2
                w8 := w0*w7;            //q0/q1 
                w9 := w2*w6;            //r0/q1
                w10:= w3*w7^2;          //c4*r0 - k3*q1

                //M1  := ExactQuotient(u*r + (vp - v)*q, up);
                //M2  := ExactQuotient(-r*(vp + v + h) - k*q, up);
                //upp := r*M1 + q*M2;
                //upp := upp/LeadingCoefficient(upp);
                t1 := -w5*(k3*w0*dw2 + t11*k2) - up2;
                upp1 := t1 + w8;
                upp0 := t1*w8 + w5*w2*(w9 + vp2 - v2);

                //upp2 := q1*(c4*r0 - k3*q1)
                //vpp := -V - h + (ExactQuotient(u*r -upp*upp2), q) - v + V) mod upp;
                t0 := -upp1 - upp1;
                t1 := upp1*t0;
                t2 := -yn2 - v2 + w9 - upp0 - upp0 - t1;
                t3 := upp0*t2;
                t4 := w9*u2 - w10 - w8*w9;
                vpp1 := -v1 + t4 - (upp0 + upp1)*(t0 + t2) + t1 + t3;
                vpp0 := -v0 + w9*u1 - w10*upp1 - w8*t4 - t3;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//w1

            w2  := t10*up0 - sp0*w0;               //=(r0/q1)*s2*dw2^2
            w3   := (w1*t11)^-1;  //1/(r1/q1)*s2^2*dw2^4
            w4   := w3*w1;        //1/s2*dw2^2
            w5   := w4*dw2;         //1/s2*dw2
            qr11 := w3*t11^2;     //q1/r1
            rq11 := w1*w4;        //r1/q1
            qq01 := w0*w5;        //q0/q1
            rq01 := w2*w4;        //r0/q1
            qr01 := qq01*qr11;    //q0/r1
            rr01 := rq01*qr11;    //r0/r1
            w6   := w1*w5^2;      //r1
            r1 := w6 + w6;

            //k := ExactQuotient(f - v*(v + h), u);
            t0 := v2 - yn2;
            t1 := v1 - yn1 - u2*t0;

            //M1  := ExactQuotient((vp - v)*q + u*r, up);
            //M2  := ExactQuotient(r*(vp + v + h) + q*k, up);
            //upp := r*M1 - q*M2;
            //upp := upp/LeadingCoefficient(upp);
            //M2p : = M2/(c4*r1) (negative of M2 monic)
            M21p := -qr11*t0 + rr01 - up2;
            M20p := -(vp2 + v2)/2 - qr11*t1 - qr01*t0 - up1 - up2*M21p;

            //upp = (r*M1)/(c4*r1*q1) + (q*M2p)/q1
            upp2 := rq11/2 + M21p + qq01;
            upp1 := (vt2 + rq11*t7 + rq01 + rq01)/2 + M20p + qq01*M21p;
            upp0 := (rr01*vt2 + rq01*(t7 + rr01))/2 + qq01*M20p;

            //vp  := - V - h  + (ExactQuotient(r*u1 - up*(c4*r1*q1)), q) - v1 + V) mod up;
            t3 := rq11 - upp2 - upp2;
            t2 := rq11*(u2 - qq01) + rq01 - r1;
            t1 := rq11*u1 + rq01*u2 - r1*upp2 - qq01*t2;

            vpp2 := t2 - v2 - upp1 - upp1 - upp2*t3;
            vpp1 := t1 - v1 - upp0 - upp0 - upp1*t3;
            vpp0 := -v0 + rq11*u0 + rq01*u1 - r1*upp1 - qq01*t1 - upp0*t3;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>; 
        end if;//t7

        //dw3 := up mod dw1;
        //dw31 := m7/T1; //dw30 = -m8/T1;
        m8 := t7*t2 - t1*t8;
        
        if IsZero(m7) then
            //a1 := LeadingCoefficient(dw1)^-1; //a1 = 1/t7;
            //S := R!dw1*a1; //S = x^2 + (t4/t7)*x + t1/t7;

            //dw2 := (vp+v+h) mod S;// = (b2^-1)*S for S,a2,b2 = XGCD(S,v + vp + h)
            
            
            
            T1 := t7;
            T2 := T1^2;
            T3 := T1*T2;
            T4 := T2^2;                                     //Maybe not used
            S1 := t4;                                       //T1
            S0 := t1;                                       //T1
            t0 := S1 + S1;                            //T1
            t1 := S0*T1;                                    //T2
            t2 := T2*(vp2 + v2) + t1 + t1 - S1*t0;           //T2
            dw21 := T3*(vp1 + v1) - t1*t0 - S1*t2;         //T3     //-b1
            dw20 := T3*(vp0 + v0) - S0*t2;                 //T3   
            t0 := T1*dw20;
            t1 := S1*dw21;
            b0 := t0 - t1;                                  //T4

            //dw := Resultant(S,dw2);
            dw := dw20*b0 + S0*dw21^2;                      //T7
            if IsZero(dw) then             
                if IsZero(dw21) then
                    //a1 := LeadingCoefficient(dw1)^-1; //a1 = 1/t7;
                    a1 := T1^-1;

                    //S := R!dw1*a1; //S = x^2 + (t4/t7)*x + t1/t7;
                    S1 := S1*a1;
                    S0 := S0*a1;
                    
                    //u := ExactQuotient(u,S);
                    //up := ExactQuotient(up,S);
                    //s  := a1*(vp - v) mod up;
                    u0 := u2 - S1;           
                    up0 := up2 - S1;              
                    s0 := a1*(vp0 - v0 - up0*(vp1 - v1  - up0*(vp2 - v2)));    

                    //upp := u*up;
                    upp1 := u0 + up0;
                    upp0 := up0*u0;

                    //vpp := V - (V - v - u*s) mod upp;
                    t0 := yn2 -v2;
                    vpp1 := v1 + s0 + upp1*t0;
                    vpp0 := v0 + s0*u0 + upp0*t0;

                    
                    return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
                end if;//dw21;

                //k := ExactQuotient(f - v*h - v^2, u);
                t1  := v1 - yn1;
                t2  := v2 - yn2;
                k3  := t2 + t2;
                k2  := t1 + t1 - u2*k3;
                t3 := v0 - yn0;
                k1  := t3 + t3 - v2^2 - c10 - u2*k2 - u1*k3;
                k0  := f3 - v2*(v1 + v1) - u1*k2 - u2*k1 - u0*k3;

                //b2 := LeadingCoefficient(dw2)^-1;
                //b2 := (W1/T3)^-1;
                //Sp := dw2*b2;   // x + dw20/dw21
                //t := b2*((dw2 - v - vp - h) mod up);
                //a2 := ExactQuotient(t,S);
                W1 := dw21;
                W2 := W1^2;
                W3 := W2*W1;
                up3 := up2^2;
                a2 := T2*(-v2 - vp2 - up1 - up1 + up3 + up3);        //W1*a1

                //u := ExactQuotient(u,Sp);
                //up := ExactQuotient(up,Sp);
                un1 := W1*u2 - dw20;              //W1
                un0 := W2*u1 - dw20*un1;          //W2
                unp1 := W1*up2 - dw20;            //W1
                unp0 := W2*up1 - dw20*unp1;       //W2

                //s := (a2*(vp - v) + T3*k)/W1 mod up;
                t0:= T3*k3;
                t1 := unp1*t0;
                t2  := W1*(T3*k2 + a2*(vp2 - v2)) - t1; //W2
                t3 := unp0*t2;
                sp1 := W2*(T3*k1 + a2*(vp1 - v1)) - (unp0 + unp1)*(t0 + t2) + t1 + t3;  //W3
                sp0 := W3*(T3*k0 + a2*(vp0 - v0)) - t3;                                 //W4

                //k := k*Sp;
                k4 := W1*k3;            //W1
                k3 := W1*k2 + dw20*k3;    //W1
                k2 := W1*k1 + dw20*k2;    //W1
                
                if IsZero(sp1) then
                    w2 := sp0 + sp0 + k4*W3;
                    if IsZero(w2) then
                        w1 := k3*W3;
                        if IsZero(w1) then

                            
                            return < 0,0,0,1,yn2,yn1,yn0,3>;
                        end if;//w1
                        //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                        //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                        //upp := upp/LeadingCoefficient(upp);
                        w2 := (w1*W1)^-1;
                        w4 := w2*w1;            //1/W1
                        w5 := w2*W3*W2;         //1/(s0*c3 + k3)
                        w6 := w4^2;
                        s0 := sp0*w6^2;
                        u0 := un0*w6;
                        u1 := un1*w4;
                        upp0 := w5*(-s0*(v2 + v2 + s0) + k2*w4) - unp1*w4;
                        upp2 := upp0^2;

                        //vpp := V - (V + s*u + v + h) mod upp;
                        vpp0 := -v0 - s0*u0 + upp0*(v1 + yn1 + s0*u1 - upp0*(v2 + yn2 + s0 - upp2 - upp2));
                        
                        
                        return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                    end if;//w2

                    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp := ExactQuotient(-s*(s*up + 2*v + h) + k, up);
                    //upp := upp/LeadingCoefficient(upp);
                    w1 := (w2*W1)^-1;
                    w4 := w1*w2;               //1/W1
                    w5 := w1*W3*W2;            //1/(s0*c4 + k4)
                    w6 := w4^2;
                    s0 := sp0*w6^2;
                    up1 := unp1*w4;

                    upp1 := w5*(k3*w4) - up1;
                    upp0 := w5*(-s0*(v2 + v2 + s0) + k2*w4) - unp0*w6 - upp1*up1;

                    //vpp := V - (V + up*s + v + h) mod upp;
                    t0 := upp1 + upp1;
                    t1 := s0 + v2 + yn2 + upp0 + upp0 - upp1*t0;
                    vpp1 := -v1 - s0*un1*w4 + upp0*t0 + upp1*t1;
                    vpp0 := -v0 - s0*un0*w6 + upp0*t1;
                    
                    
                    return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
                end if;//sp1

                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp := upp/LeadingCoefficient(upp);
                w1 := (W1*sp1)^-1;  //1/s1*W4
                w2 := W2^2*w1/2;    //1/s1*c4
                w4 := w1*sp1;       //1/W1
                w5 := w4^2;         //1/W2
                s1 := sp1*w4*w5;
                s0 := sp0*w5^2;
                up0 := unp0*w5;
                up1 := unp1*w4;
                u0 := un0*w5;
                u1 := un1*w4;

                
                t1 := s1*u1;
                l0 := s0*u0;
                l2 := s1*u1 + s0;
                l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
                t3 := -v2 - v2 - l2;
                t4 := -s1^2;
                t5 := s0*t3;
                upp2 := w2*(t4 + s0 + s0 + k4*w4) - up1;
                upp1 := w2*((s1 + s0)*(t3 - s1) - t4 - t5 + k3*w4) - up0 - up1*upp2;
                upp0 := w2*(s1*(-v1 - v1 - l1) + t5 + k2*w4) - up0*upp2 - up1*upp1;

                //vpp := V - (V + u*s + v + h) mod upp;
                t0 := upp2 + upp2 + s1;
                vpp2 := -v2 - l2 - upp1 - upp1 + upp2*t0;
                vpp1 := -v1 - l1 - upp0 - upp0 + upp1*t0;
                vpp0 := -v0 - l0 + upp0*t0;
                
                
                return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
            end if;//dw
            
            //Q := quo<R | S>;
            //b2 := R!(Q!dw2^-1) mod S;
            //b2 = (b1/T3)x + b0/T4 where b1 := -dw21

            //k := ExactQuotient(f - v*(v + h), u);
            t1  := v1 - yn1;
            t2  := v2 - yn2;
            k3  := t2 + t2;
            k2  := t1 + t1 - u2*k3;
            t3  := v0 - yn0;
            k1  := t3 + t3 - v2^2 - c10 - u2*k2 - u1*k3;
            k0  := f3 - v2*(v1 + v1) - u1*k2 - u2*k1 - u0*k3;

            //t := (1 - b2*(v + vp + h)) mod up;
            //a2 := ExactQuotient(t,S) ;
            t3 := -up2 - up2;
            t2 := -v2 - vp2 - up1 - up1 - up2*t3;
            t1 := -v1 - vp1 - up0 - up0 - up1*t3;
            b1 := -dw21*T3;
            b0 := b0*T2;
            a21 := b1*(t1 - t2*up2) + b0*t2;  //dw*a1/T2
            
            //s := (a2*a1*(vp - v) + b2*k) mod up;
            b1 := b1*T1;
            b0 := b0*T1;
            t1 := b1*k3;      
            t2 := b1*k2 + b0*k3 - up2*t1;               //dw
            t3 := b1*k1;
            t4 := b0*k0;
            vt2 := vp2 - v2;
            sp2 := a21*vt2 + t3 + b0*k2 - up1*t1 - up2*t2;                        //dw
            sp1 := a21*(vp1 - v1) + (b0 + b1)*(k0 + k1) - t3 - t4 - up0*t1 - up1*t2;     //dw
            sp0 := a21*(vp0 - v0) + t4 - up0*t2;                                         //dw

            if IsZero(sp2) then
                if IsZero(sp1) then
                    if IsZero(sp0) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,2>;
                    end if;//sp0

                    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                    //upp := upp/LeadingCoefficient(upp);
                    w1 := (dw*sp0)^-1;
                    w2 := w1*sp0;
                    w3 := w1*dw^2;
                    s0 := sp0*w2;
                    upp0 := -s0/2 + w3*(v2 - yn2) - up2;

                    //vpp := V - (V + u*s + v + h) mod upp;
                    t0 := upp0*(v2 + yn2 + s0*u2 - upp0*(s0 + upp0 + upp0));
                    vpp0 := -v0 - s0*u0 + upp0*(v1 + yn1 + s0*u1 - t0);

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
                end if;//sp1

                w0 := sp1 - dw - dw;       //(s1 - c4)*dw
                if IsZero(w0) then
                    w1 := sp0 + sp1*u2;
                    if IsZero(w1) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,0>;
                    end if;//w1
                    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                    //upp := upp/LeadingCoefficient(upp);
                    t0 := v2 - yn2;
                    k3 := t0 + t0;
                    w0 := w1*sp1;           
                    w2 := (w0*dw)^-1;        //1/s1*(s1 - c4)*dw^3
                    w3 := w2*w0;            //1/dw
                    w4 := w2*dw^2*dw;         //1/s1*(s1 - c4)
                    s1 := sp1*w3;
                    s0 := sp0*w3;

                    t1 := s1*u1;
                    l0 := s0*u0;
                    l3 := s1*u2 + s0;
                    l2 := t1 + s0*u2;
                    l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
                    upp0 := w4*(s1*(l2 + v2 + v2) + s0*(l3) - k3) - up2;

                    //vpp := V - (V + u*s + v + h) mod upp;
                    t0 := upp0*(v2 + yn2 + l2 - upp0*(l3 - upp0*(s1 - 2)));
                    vpp0 := -v0 - l0 + upp0*(v1 + yn1 + l1 - t0);

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
                end if;//w0

                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp := upp/LeadingCoefficient(upp);
                t0 := v2 - yn2;
                k3 := t0 + t0;
                w1 := w0*sp1;           //s1*(s1 - c4)*D
                w2 := (w1*dw)^-1;        //1/s1*(s1 - c4)*dw^3
                w3 := w2*w1;            //1/dw
                w4 := w2*dw^2*dw;         //1/s1*(s1 - c4)
                s1 := sp1*w3;
                s0 := sp0*w3;

                t1 := s1*u1;
                l0 := s0*u0;
                l3 := s1*u2 + s0;
                l2 := t1 + s0*u2;
                l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
                t4 := s1 - 2;
                upp1 := w4*(s1*l3 + s0*t4) - up2;
                upp0 := w4*(s1*(l2 + v2 + v2) + s0*l3 - k3) - up1 - up2*upp1;

                //vpp := V - (V + s*u + v + h) mod upp;
                t5 := l3 - upp1*t4;
                t6 := upp1*t5;
                t7 := l2 + v2 + yn2 - upp0*t4 - t6;
                t8 := upp0*t7;
                vpp1 := -v1 - l1 + (upp0 + upp1)*(t5 + t7) - t6 - t8; 
                vpp0 := -v0 - l0 + t8;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
            end if;//sp2

            //q   := u2 div s;
            //q1 = 1/s2, q0 = (1/s2)*(d2[2] - (s1/s2))
            //r   := u2 mod s;
            //r1 = d2[3] - (s0/s2) - s1*q0, r0 = d2[4] - s0*q0
            //Precomp
            t10 := sp2^2;                          //s2^2*dw^2
            t11 := sp2*dw;                          //s2*dw^2
            w0  := up2*sp2 - sp1;                  //=(q0/q1)*s2*dw
            w1  := t10*up1 - sp0*sp2 - sp1*w0;     //=(r1/q1)*s2*dw^2
            
            if IsZero(w1) then
                t1 := v1 - yn1;
                t2 := v2 - yn2;
                k3 := t2 + t2;
                k2 := t1 + t1 - u2*k3;
                w2  := t10*up0 - sp0*w0;               //=(r0/q1)*s2*dw^2
                if IsZero(w2) then
                    if IsZero(k3) then
                        w3 := sp2^-1;   //1/s2*dw
                        w4 := w3*dw;     //q1
                        M20 := k2*w4;

                        upp0 := w0*w3;
                        upp2 := upp0^2;
                        vpp0 := M20 - v0 - upp0*(-yn1 - v1 - upp0*(-yn2 - v2 + upp2 + upp2));

                        
                        return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                    end if;//k3

                    //M2  := ExactQuotient(k*q, up);
                    //upp := -q*M2;
                    //l := ExactQuotient(-upp, q);
                    //upp := upp/LeadingCoefficient(upp);           
                    w3 := (k3*sp2)^-1;  //1/s2*k3*dw
                    w4 := w3*k3;        //1/s2*dw
                    w5 := w3*sp2*k2;    //k2/k3
                    w6 := sp1*w4;    //s1/s2
                    w7 := w4*dw;      //1/s2          
                    t1 := w5 - w6;    
                    t2 := up2 - w6;
                    upp1 := t1 + t2;
                    upp0 := t1*t2;
                    
                    //vpp := -V - h + (M2 - v + V) mod upp;
                    t0 := -upp1 - upp1;
                    t1 := t0*upp1;
                    t2 := -yn2 - v2 - upp0 - upp0 - t1;
                    t3 := t2*upp0;
                    t4 := w7*k3;
                    vpp1 := -v1 + t4 - (upp0 + upp1)*(t0 + t2) + t1 + t3;
                    vpp0 := -v0 + w7*k2 - w6*t4 - t3;

                    
                    return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
                end if;//w2

                w3 := w2 + w2 - k3*t11;    //(c4*r0 - k3*q1)*(sp2^2)
                if IsZero(w3) then
                    w4 := -k3*w0*dw - t11*k2; //sp2^2
                    if IsZero(w4) then

                        
                        return < 0,0,0,1,yn2,yn1,yn0,3>;
                    end if;//w4

                    //q,r := Quotrem(up,s);
                    //M1  := ExactQuotient(u*r + (vp - v)*q, up);
                    //M2  := ExactQuotient(-r*(vp + v + h) - k*q, up);
                    //upp := r*M1 + q*M2;
                    w5 := (t11*w4)^-1;
                    w6 := w5*t11;        //1/(k2*q1 + k3*q0 - r0*c3)(s2^2*dw^2)
                    w7 := w5*w4;        //1/s2*dw^2;
                    w8 := w7*dw;         //1/s2*dw;
                    w9 := w0*w8;        //q0/q1
                    w10 := w2*w7;       //r0/q1
                    upp0 := w9 + w2*w6*(w10 + vp2 - v2);
                    upp2 := upp0^2;

                    //upp2 := q1*(c4*r0 - k3*q1)
                    //vpp := -V - h + (ExactQuotient(u*r -upp*upp2), q) - v + V) mod upp;
                    //l2 := w10;
                    t1 := w10*(u2 - w9);
                    t0 := w10*u1 - w4*w8^2 - w9*t1;
                    vpp0 := -v0 + t0 - upp0*(-yn1 - v1 + t1 - upp0*(-yn2 - v2 + w10 + upp2 + upp2));

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//w3;

                w4 := (t11*w3)^-1;       //1/(c4*r0 - k3*q1)*s2^3*dw^4
                w5 := w4*t11;            //1/(c4*r0 - k3*q1)*(s2^2*dw^2)
                w6 := w4*w3;            //1/s2*dw^2
                w7 := w6*dw;             //1/s2*dw
                w8 := w0*w7;            //q0/q1 
                w9 := w2*w6;            //r0/q1
                w10:= w3*w7^2;          //c4*r0 - k3*q1

                //M1  := ExactQuotient(u*r + (vp - v)*q, up);
                //M2  := ExactQuotient(-r*(vp + v + h) - k*q, up);
                //upp := r*M1 + q*M2;
                //upp := upp/LeadingCoefficient(upp);
                t1 := -w5*(k3*w0*dw + t11*k2) - up2;
                upp1 := t1 + w8;
                upp0 := t1*w8 + w5*w2*(w9 + vp2 - v2);

                //upp2 := q1*(c4*r0 - k3*q1)
                //vpp := -V - h + (ExactQuotient(u*r -upp*upp2), q) - v + V) mod upp;
                t0 := -upp1 - upp1;
                t1 := upp1*t0;
                t2 := -yn2 - v2 + w9 - upp0 - upp0 - t1;
                t3 := upp0*t2;
                t4 := w9*u2 - w10 - w8*w9;
                vpp1 := -v1 + t4 - (upp0 + upp1)*(t0 + t2) + t1 + t3;
                vpp0 := -v0 + w9*u1 - w10*upp1 - w8*t4 - t3;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//w1

            w2  := t10*up0 - sp0*w0;               //=(r0/q1)*s2*dw^2
            w3   := (w1*t11)^-1;  //1/(r1/q1)*s2^2*dw^4
            w4   := w3*w1;        //1/s2*dw^2
            w5   := w4*dw;         //1/s2*dw
            qr11 := w3*t11^2;     //q1/r1
            rq11 := w1*w4;        //r1/q1
            qq01 := w0*w5;        //q0/q1
            rq01 := w2*w4;        //r0/q1
            qr01 := qq01*qr11;    //q0/r1
            rr01 := rq01*qr11;    //r0/r1
            w6   := w1*w5^2;      //r1
            r1 := w6 + w6;

            //k := ExactQuotient(f - v*(v + h), u);
            t0 := v2 - yn2;
            t1 := v1 - yn1 - u2*t0;

            //M1  := ExactQuotient((vp - v)*q + u*r, up);
            //M2  := ExactQuotient(r*(vp + v + h) + q*k, up);
            //upp := r*M1 - q*M2;
            //upp := upp/LeadingCoefficient(upp);
            //M2p : = M2/(c4*r1) (negative of M2 monic)
            M21p := -qr11*t0 + rr01 - up2;
            M20p := -(vp2 + v2)/2 - qr11*t1 - qr01*t0 - up1 - up2*M21p;

            //upp = (r*M1)/(c4*r1*q1) + (q*M2p)/q1
            upp2 := rq11/2 + M21p + qq01;
            upp1 := (vt2 + rq11*t7 + rq01 + rq01)/2 + M20p + qq01*M21p;
            upp0 := (rr01*vt2 + rq01*(t7 + rr01))/2 + qq01*M20p;

            //vp  := - V - h  + (ExactQuotient(r*u1 - up*(c4*r1*q1)), q) - v1 + V) mod up;
            t3 := rq11 - upp2 - upp2;
            t2 := rq11*(u2 - qq01) + rq01 - r1;
            t1 := rq11*u1 + rq01*u2 - r1*upp2 - qq01*t2;

            vpp2 := t2 - v2 - upp1 - upp1 - upp2*t3;
            vpp1 := t1 - v1 - upp0 - upp0 - upp1*t3;
            vpp0 := -v0 + rq11*u0 + rq01*u1 - r1*upp1 - qq01*t1 - upp0*t3;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>; 
        end if;//m7

        //S := dw3/LeadingCoefficient(dw3);   //x - m8/m7 = 
        //dw2 := (vp+v+h) mod S;// = (b2^-1)*S for S,a2,b2 = XGCD(S,v + vp + h);
        M2 := m7^2;
        M3 := M2*m7;
        M4 := M2^2;
        M5 := m8^2;
        dw2 := M4*(v0 + vp0) + m8*(M3*(v1 + vp1) + m8*(M2*(v2 + vp2) - M5 - M5));
        if IsZero(dw2) then 
            //u := ExactQuotient(u,S);
            //up := ExactQuotient(up,S);
            un1 := m7*u2 + m8;              //m7
            un0 := M2*u1 + m8*un1;          //M2
            unp1 := m7*up2 + m8;            //m7
            unp0 := M2*up1 + m8*unp1;       //M2
            
            //k := ExactQuotient(f - v*(v + h),u);
            t1 := v1 - yn1;
            t2 := v2 - yn2;
            k4 := t2 + t2;
            k3 := m7*(t1 + t1) - k4*un1;                                       //m7
            t3 := v0 - yn0;
            k2 := M2*(t3 + t3 - v2^2 - c10) - k4*un0 - k3*un1; //M2

            //Q := quo<R | up>;
            //s := R!(Q!u^-1)*(vp - v) mod up;
            //a := vp - v mod up;
            t0 := vp2 - v2;
            a1 := m7*(vp1 - v1) - unp1*t0;  //m7
            a0 := M2*(vp0 - v0) - unp0*t0;  //M2
            m3 := unp1 - un1;           //m7
            m4 := un0 - unp0;           //M2 
            m1 := m4 + unp1*m3;         //M2
            m2 := -unp0*m3;             //M3
            d  := m1*m4 - m2*m3;        //M4
            sp1 := a0*m3 + a1*m4;       //d/m7
            sp0 := a0*m1 + a1*m2;       //d
       
            if IsZero(sp1) then
                w2 := sp0 + sp0 + k4*d;
                    if IsZero(w2) then
                        w1 := k3*d;
                        if IsZero(w1) then

                            
                            return < 0,0,0,1,yn2,yn1,yn0,3>;
                        end if;//w1

                        //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                        //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                        //upp := upp/LeadingCoefficient(upp);
                        w0 := d*m7;
                        w2 := (w1*w0)^-1;
                        w4 := w2*w1;            //1/m7*d
                        w5 := w2*w0^2;         //1/(s0*c3 + k3)
                        w6 := w4*d;
                        w7 := w6^2;
                        s0 := sp0*m7*w4;
                        u0 := un0*w7;
                        u1 := un1*w6;
                        upp0 := w5*(-s0*(v2 + v2 + s0) + k2*w7) - unp1*w6;
                        upp2 := upp0^2;

                        //vpp := V - (V + s*u + v + h) mod upp;
                        vpp0 := -v0 - s0*u0 + upp0*(v1 + yn1 + s0*u1 - upp0*(v2 + yn2 + s0 - upp2 - upp2));
                        
                        
                        return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                    end if;//w2

                    //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                    //upp := ExactQuotient(-s*(s*up + 2*v + h) + k, up);
                    //upp := upp/LeadingCoefficient(upp);
                    w0 := d*m7;
                    w1 := (w2*w0)^-1;
                    w4 := w1*w2;            //1/m7*d
                    w5 := w1*w0*d;         //1/(s0*c4 + k4)
                    w6 := w4*d;
                    w7 := w6^2;
                    s0 := sp0*w4*m7;
                    up1 := unp1*w6;

                    upp1 := w5*k3*w6 - up1;
                    upp0 := w5*(-s0*(v2 + v2 + s0) + k2*w7) - unp0*w7 - upp1*up1;

                    //vpp := V - (V + up*s + v + h) mod upp;
                    t0 := upp1 + upp1;
                    t1 := s0 + v2 + yn2 + upp0 + upp0 - upp1*t0;
                    vpp1 := -v1- s0*un1*w6 + upp0*t0 + upp1*t1;
                    vpp0 := -v0 - s0*un0*w7 + upp0*t1;

                    
                    return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//sp1

            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp := upp/LeadingCoefficient(upp);
            w0 := d*m7;
            w1 := (w0*sp1)^-1;  //1/s1*d^2
            w2 := d^2*w1/2;      //1/s1*c4
            w4 := w1*sp1;       //1/m7*d
            w5 := w4*d;         //1/m7
            w6 := w5^2;         //1/M2
            w7 := w4*m7;        //1/d
            s1 := sp1*w7*m7;
            s0 := sp0*w7;
            up0 := unp0*w6;
            up1 := unp1*w5;
            u0 := un0*w6;
            u1 := un1*w5;

            t1 := s1*u1;
            l0 := s0*u0;
            l2 := s1*u1 + s0;
            l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
            t3 := -v2 - v2 - l2;
            t4 := -s1^2;
            t5 := s0*t3;
            upp2 := w2*(t4 + s0 + s0 + k4) - up1;
            upp1 := w2*((s1 + s0)*(t3 - s1) - t4 - t5 + k3*w5) - up0 - up1*upp2;
            upp0 := w2*(s1*(-v1 - v1 - l1) + t5 + k2*w6) - up0*upp2 - up1*upp1;

            //vpp := V - (V + u*s + v + h) mod upp;
            t0 := upp2 + upp2 + s1;
            vpp2 := -v2 - l2 - upp1 - upp1 + upp2*t0;
            vpp1 := -v1 - l1 - upp0 - upp0 + upp1*t0;
            vpp0 := -v0 - l0 + upp0*t0;

            
            return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>;
        end if;//dw2

        //k := ExactQuotient(f - v*(v + h), u);
        
        
        t1  := v1 - yn1;
        t2  := v2 - yn2;
        k3  := t2 + t2;
        k2  := t1 + t1 - u2*k3;
        t3 := v0 - yn0;
        k1  := t3 + t3 - v2^2 - c10 - u2*k2 - u1*k3;
        k0  := f3 - v2*(v1 + v1) - u1*k2 - u2*k1 - u0*k3;

        //un := ExactQuotient(u,S);
        un1 := m7*u2 + m8;              //m7
        un0 := M2*u1 + m8*un1;          //M2

        //unp := ExactQuotient(up,S);
        unp1 := m7*up2 + m8;            //m7
        unp0 := M2*up1 + m8*unp1;       //M2

        //Q := quo<R | unp>;
        //a1 := R!(Q!un^-1);
        m3 := unp1 - un1;       //m7    
        m4 := un0 - unp0;       //M2         
        m1 := m4 + unp1*m3;     //M2
        m2 := -unp0*m3;         //M3
        aw  := m1*m4 - m2*m3;   //M4
        a11 := m3*M3;           //aw
        a10 := m1*M2;           //aw

        //b2 := (FF!dw2/M4)^-1;
        //t := (1 - b2*(v + vp + h)) mod up;
        t3 := -up2 - up2;
        t2 := -v2 - vp2 - up1 - up1 - up2*t3;  //dw2/M4
        t1 := -v1 - vp1 - up0 - up0 - up1*t3;  //dw2/M4

        //a2 := ExactQuotient(t,S) ;
        a21 := t2*M4;              //dw2
        a20 := t1*M4 + m8*M3*t2;   //dw2

        //s := (a2*a1*(vp - v) + b2*k) mod up;
        //A := a1*a2;
        A3 := aw*M4;
        A2 := a21*a11;                              //aw*dw2;
        A0 := a20*a10;                              //aw*dw2;
        A1 := (a21 + a20)*(a11 + a10) - A2 - A0;    //aw*dw2;    
        vt2 := vp2 - v2;
        vt1 := vp1 - v1;
        vt0 := vp0 - v0;
        t0 := A2*vt2;
        t2 := A1*vt1;
        t3 := A0*vt0;
        t1 := (A2 + A1)*(vt1 + vt2) - t0 - t2 + k3*A3 - up2*t0;
        sp2 := (A2 + A0)*(vt0 + vt2) - t0 - t3 + t2 + k2*A3 - up1*t0 - up2*t1;     //dw
        sp1 := (A1 + A0)*(vt0 + vt1) - t2 - t3 + k1*A3 - up0*t0 - up1*t1;             //dw
        sp0 := t3 + k0*A3 - up0*t1;                              //dw
        dw := dw2*aw;

        if IsZero(sp2) then
            if IsZero(sp1) then
                if IsZero(sp0) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,2>;
                end if;//sp0

                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp := upp/LeadingCoefficient(upp);
                w1 := (dw*sp0)^-1;
                w2 := w1*sp0;
                w3 := w1*dw^2;
                s0 := sp0*w2;
                upp0 := -s0/2 + w3*(v2 - yn2) - up2;

                //vpp := V - (V + u*s + v + h) mod upp;
                t0 := upp0*(v2 + yn2 + s0*u2 - upp0*(s0 + upp0 + upp0));
                vpp0 := -v0 - s0*u0 + upp0*(v1 + yn1 + s0*u1 - t0);

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
            end if;//sp1

            w0 := sp1 - dw - dw;       //(s1 - c4)*dw
            if IsZero(w0) then
                w1 := sp0 + sp1*u2;
                if IsZero(w1) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,0>;
                end if;//w1
                //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
                //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
                //upp := upp/LeadingCoefficient(upp);
                t0 := v2 - yn2;
                k3 := t0 + t0;
                w0 := w1*sp1;           
                w2 := (w0*dw)^-1;        //1/s1*(s1 - c4)*dw^3
                w3 := w2*w0;            //1/dw
                w4 := w2*dw^2*dw;         //1/s1*(s1 - c4)
                s1 := sp1*w3;
                s0 := sp0*w3;

                t1 := s1*u1;
                l0 := s0*u0;
                l3 := s1*u2 + s0;
                l2 := t1 + s0*u2;
                l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
                upp0 := w4*(s1*(l2 + v2 + v2) + s0*l3 - k3) - up2;

                //vpp := V - (V + u*s + v + h) mod upp;
                t0 := upp0*(v2 + yn2 + l2 - upp0*(l3 - upp0*(s1 - 2)));
                vpp0 := -v0 - l0 + upp0*(v1 + yn1 + l1 - t0);

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
            end if;//w0

            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp := upp/LeadingCoefficient(upp);
            t0 := v2 - yn2;
            k3 := t0 + t0;
            w1 := w0*sp1;           //s1*(s1 - c4)*D
            w2 := (w1*dw)^-1;        //1/s1*(s1 - c4)*dw^3
            w3 := w2*w1;            //1/dw
            w4 := w2*dw^2*dw;         //1/s1*(s1 - c4)
            s1 := sp1*w3;
            s0 := sp0*w3;

            t1 := s1*u1;
            l0 := s0*u0;
            l3 := s1*u2 + s0;
            l2 := t1 + s0*u2;
            l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
            t4 := s1 - 2;
            upp1 := w4*(s1*l3 + s0*t4) - up2;
            upp0 := w4*(s1*(l2 + v2 + v2) + s0*l3 - k3) - up1 - up2*upp1;

            //vpp := V - (V + s*u + v + h) mod upp;
            t4 := s1 - 2;
            t5 := l3 - upp1*t4;
            t6 := upp1*t5;
            t7 := l2 + v2 + yn2 - upp0*t4 - t6;
            t8 := upp0*t7;
            vpp1 := -v1 - l1 + (upp0 + upp1)*(t5 + t7) - t6 - t8; 
            vpp0 := -v0 - l0 + t8;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
        end if;//sp2

        //q   := u2 div s;
        //q1 = 1/s2, q0 = (1/s2)*(d2[2] - (s1/s2))
        //r   := u2 mod s;
        //r1 = d2[3] - (s0/s2) - s1*q0, r0 = d2[4] - s0*q0
        //Precomp
        t10 := sp2^2;                          //s2^2*dw^2
        t11 := sp2*dw;                          //s2*dw^2
        w0  := up2*sp2 - sp1;                  //=(q0/q1)*s2*dw
        w1  := t10*up1 - sp0*sp2 - sp1*w0;     //=(r1/q1)*s2*dw^2
        
        if IsZero(w1) then
            t1 := v1 - yn1;
            t2 := v2 - yn2;
            k3 := t2 + t2;
            k2 := t1 + t1 - u2*k3;
            w2  := t10*up0 - sp0*w0;               //=(r0/q1)*s2*dw^2
            if IsZero(w2) then
                if IsZero(k3) then
                    w3 := sp2^-1;   //1/s2*dw
                    w4 := w3*dw;     //q1
                    M20 := k2*w4;

                    upp0 := w0*w3;
                    upp2 := upp0^2;
                    vpp0 := M20 - v0 - upp0*(-yn1 - v1 - upp0*(-yn2 - v2 + upp2 + upp2));

                    
                    return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
                end if;//k3

                //M2  := ExactQuotient(k*q, up);
                //upp := -q*M2;
                //l := ExactQuotient(-upp, q);
                //upp := upp/LeadingCoefficient(upp);           
                w3 := (k3*sp2)^-1;  //1/s2*k3*dw
                w4 := w3*k3;        //1/s2*dw
                w5 := w3*sp2*k2;    //k2/k3
                w6 := sp1*w4;    //s1/s2
                w7 := w4*dw;      //1/s2          
                t1 := w5 - w6;    
                t2 := up2 - w6;
                upp1 := t1 + t2;
                upp0 := t1*t2;
                
                //vpp := -V - h + (M2 - v + V) mod upp;
                t0 := -upp1 - upp1;
                t1 := t0*upp1;
                t2 := -yn2 - v2 - upp0 - upp0 - t1;
                t3 := t2*upp0;
                t4 := w7*k3;
                vpp1 := -v1 + t4 - (upp0 + upp1)*(t0 + t2) + t1 + t3;
                vpp0 := -v0 + w7*k2 - w6*t4 - t3;

                
                return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
            end if;//w2

            w3 := w2 + w2 - k3*t11;    //(c4*r0 - k3*q1)*(sp2^2)
            if IsZero(w3) then
                w4 :=  -k3*w0*dw - t11*k2; //sp2^2
                if IsZero(w4) then

                    
                    return < 0,0,0,1,yn2,yn1,yn0,3>;
                end if;//w4

                //q,r := Quotrem(up,s);
                //M1  := ExactQuotient(u*r + (vp - v)*q, up);
                //M2  := ExactQuotient(-r*(vp + v + h) - k*q, up);
                //upp := r*M1 + q*M2;
                w5 := (t11*w4)^-1;
                w6 := w5*t11;        //1/(k2*q1 + k3*q0 - r0*c3)(s2^2*dw^2)
                w7 := w5*w4;        //1/s2*dw^2;
                w8 := w7*dw;         //1/s2*dw;
                w9 := w0*w8;        //q0/q1
                w10 := w2*w7;       //r0/q1
                upp0 := w9 + w2*w6*(w10 + vp2 - v2);
                upp2 := upp0^2;

                //upp2 := q1*(c4*r0 - k3*q1)
                //vpp := -V - h + (ExactQuotient(u*r -upp*upp2), q) - v + V) mod upp;
                //l2 := w10;
                t1 := w10*(u2 - w9);
                t0 := w10*u1 - w4*w8^2 - w9*t1;
                vpp0 := -v0 + t0 - upp0*(-yn1 - v1 + t1 - upp0*(-yn2 - v2 + w10 + upp2 + upp2));

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
            end if;//w3;

            w4 := (t11*w3)^-1;       //1/(c4*r0 - k3*q1)*s2^3*dw^4
            w5 := w4*t11;            //1/(c4*r0 - k3*q1)*(s2^2*dw^2)
            w6 := w4*w3;            //1/s2*dw^2
            w7 := w6*dw;             //1/s2*dw
            w8 := w0*w7;            //q0/q1 
            w9 := w2*w6;            //r0/q1
            w10:= w3*w7^2;          //c4*r0 - k3*q1

            //M1  := ExactQuotient(u*r + (vp - v)*q, up);
            //M2  := ExactQuotient(-r*(vp + v + h) - k*q, up);
            //upp := r*M1 + q*M2;
            //upp := upp/LeadingCoefficient(upp);
            t1 := w5*(-k3*w0*dw - t11*k2) - up2;
            upp1 := t1 + w8;
            upp0 := t1*w8 + w5*w2*(w9 + vp2 - v2);

            //upp2 := q1*(c4*r0 - k3*q1)
            //vpp := -V - h + (ExactQuotient(u*r -upp*upp2), q) - v + V) mod upp;
            t0 := -upp1 - upp1;
            t1 := upp1*t0;
            t2 := -yn2 - v2 + w9 - upp0 - upp0 - t1;
            t3 := upp0*t2;
            t4 := w9*u2 - w10 - w8*w9;
            vpp1 := -v1 + t4 - (upp0 + upp1)*(t0 + t2) + t1 + t3;
            vpp0 := -v0 + w9*u1 - w10*upp1 - w8*t4 - t3;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//w1

        w2  := t10*up0 - sp0*w0;               //=(r0/q1)*s2*dw^2
        w3   := (w1*t11)^-1;  //1/(r1/q1)*s2^2*dw^4
        w4   := w3*w1;        //1/s2*dw^2
        w5   := w4*dw;         //1/s2*dw
        qr11 := w3*t11^2;     //q1/r1
        rq11 := w1*w4;        //r1/q1
        qq01 := w0*w5;        //q0/q1
        rq01 := w2*w4;        //r0/q1
        qr01 := qq01*qr11;    //q0/r1
        rr01 := rq01*qr11;    //r0/r1
        w6   := w1*w5^2;      //r1
        r1 := w6 + w6;

        //k := ExactQuotient(f - v*(v + h), u);
        t0 := v2 - yn2;
        t1 := v1 - yn1 - u2*t0;

        //M1  := ExactQuotient((vp - v)*q + u*r, up);
        //M2  := ExactQuotient(r*(vp + v + h) + q*k, up);
        //upp := r*M1 - q*M2;
        //upp := upp/LeadingCoefficient(upp);
        //M2p : = M2/(c4*r1) (negative of M2 monic)
        M21p := -qr11*t0 + rr01 - up2;
        M20p := -(vp2 + v2)/2 - qr11*t1 - qr01*t0 - up1 - up2*M21p;

        //upp = (r*M1)/(c4*r1*q1) + (q*M2p)/q1
        upp2 := rq11/2 + M21p + qq01;
        upp1 := (vt2 + rq11*t7 + rq01 + rq01)/2 + M20p + qq01*M21p;
        upp0 := (rr01*vt2 + rq01*(t7 + rr01))/2 + qq01*M20p;

        //vp  := - V - h  + (ExactQuotient(r*u1 - up*(c4*r1*q1)), q) - v1 + V) mod up;
        t3 := rq11 - upp2 - upp2;
        t2 := rq11*(u2 - qq01) + rq01 - r1;
        t1 := rq11*u1 + rq01*u2 - r1*upp2 - qq01*t2;

        vpp2 := t2 - v2 - upp1 - upp1 - upp2*t3;
        vpp1 := t1 - v1 - upp0 - upp0 - upp1*t3;
        vpp0 := -v0 + rq11*u0 + rq01*u1 - r1*upp1 - qq01*t1 - upp0*t3;

        
        return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>; 
    end if;//d

    //First column of M corresponds to polynomial q = m7x^2 + m4x + m1 = d/u1 mod u2.
    //vt = v2 - v1
    vt2:= vp2 - v2;
    vt1:= vp1 - v1; 
    vt0:= vp0 - v0;

    //Compute s = vt*q mod u2 using Karatsuba twice
    t0 := vt0*m1;
    t1 := vt1*m4;
    t2 := vt2*m7;
    t3 := (m4 + m7)*(vt1 + vt2) - t2 - t1 - up2*t2;
    t4 := up1*t2;
    t5 := t4 - t1;
    sp0 := t0 - up0*t3;
    sp1 := (m1 + m4)*(vt0 + vt1) - sp0 - (up0 + up1)*(t2 + t3) + t5;
    sp2 := (m1 + m7)*(vt0 + vt2) - t0 - t2 - t5 - up2*t3;

    if IsZero(sp2) then
        yn0 := ccs[1][2][1];
        yn1 := ccs[1][2][2];
        yn2 := ccs[1][2][3]; 
        if IsZero(sp1) then
            if IsZero(sp0) then
                
                
                return < 0,0,0,1,yn2,yn1,yn0,2>;
            end if;//sp0

            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp := upp/LeadingCoefficient(upp);
            w1 := (d*sp0)^-1;
            w2 := w1*sp0;
            w3 := w1*d^2;
            s0 := sp0*w2;
            upp0 := -s0/2 + w3*(v2 - yn2) - up2;

            //vpp := V - (V + u*s + v + h) mod upp;
            t0 := upp0*(v2 + yn2 + s0*u2 - upp0*(s0 + upp0 + upp0));
            vpp0 := -v0 - s0*u0 + upp0*(v1 + yn1 + s0*u1 - t0);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,1>;
        end if;//sp1

        

        w0 := sp1 - d - d;       //(s1 - c4)*d
        if IsZero(w0) then
            w1 := sp0 + sp1*u2;
            if IsZero(w1) then

                
                return < 0,0,0,1,yn2,yn1,yn0,0>;
            end if;//w1

            //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
            //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
            //upp := upp/LeadingCoefficient(upp);
            t0 := v2 - yn2;
            k3 := t0 + t0;
            w0 := w1*sp1;           
            w2 := (w0*d)^-1;        //1/s1*(s1 - c4)*d^3
            w3 := w2*w0;            //1/d
            w4 := w2*d^2*d;         //1/s1*(s1 - c4)
            s1 := sp1*w3;
            s0 := sp0*w3;

            t1 := s1*u1;
            l0 := s0*u0;
            l3 := s1*u2 + s0;
            l2 := t1 + s0*u2;
            l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
            upp0 := w4*(s1*(l2 + v2 + v2) + s0*l3 - k3) - up2;

            //vpp := V - (V + u*s - v - h) mod upp;
            t0 := upp0*(v2 + yn2 + l2 - upp0*(l3 - upp0*(s1 - 2)));
            vpp0 := -v0 - l0 + upp0*(v1 + yn1 + l1 - t0);

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,0>;
        end if;//w0

        //M1 := ExactQuotient(u*s-v+v,up); M2:=ExactQuotient(s*(vp+v+h)-k,up); upp:=-s*M1-M2;
        //upp := ExactQuotient(-s*(s*u + 2*v + h) + k, up);
        //upp := upp/LeadingCoefficient(upp);
        t0 := v2 - yn2;
        k3 := t0 + t0;
        w1 := w0*sp1;           //s1*(s1 - c4)*D
        w2 := (w1*d)^-1;        //1/s1*(s1 - c4)*d^3
        w3 := w2*w1;            //1/d
        w4 := w2*d^2*d;         //1/s1*(s1 - c4)
        s1 := sp1*w3;
        s0 := sp0*w3;

        t1 := s1*u1;
        l0 := s0*u0;
        l3 := s1*u2 + s0;
        l2 := t1 + s0*u2;
        l1 := (s1 + s0)*(u1 + u0) - l0 - t1;
        t4 := s1 - 2;
        upp1 := w4*(s1*l3 + s0*t4) - up2;
        upp0 := w4*(s1*(l2 + v2 + v2) + s0*l3 - k3) - up1 - up2*upp1;

        //vpp := V - (V + s*u + v + h) mod upp;
        t5 := l3 - upp1*t4;
        t6 := upp1*t5;
        t7 := l2 + v2 + yn2 - upp0*t4 - t6;
        t8 := upp0*t7;
        vpp1 := -v1- l1 + (upp0 + upp1)*(t5 + t7) - t6 - t8; 
        vpp0 := -v0 - l0 + t8;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,0>;
    end if;//sp2

    //q   := u2 div s;
    //q1 = 1/s2, q0 = (1/s2)*(d2[2] - (s1/s2))
    //r   := u2 mod s;
    //r1 = d2[3] - (s0/s2) - s1*q0, r0 = d2[4] - s0*q0
    //Precomp
    t10 := sp2^2;                          //s2^2*d^2
    t11 := sp2*d;                          //s2*d^2
    w0  := up2*sp2 - sp1;                  //=(q0/q1)*s2*d
    w1  := t10*up1 - sp0*sp2 - sp1*w0;     //=(r1/q1)*s2*d^2
    
    if IsZero(w1) then
        yn0 := ccs[1][2][1];
        yn1 := ccs[1][2][2];
        yn2 := ccs[1][2][3]; 

        t1 := v1 - yn1;
        t2 := v2 - yn2;
        k3 := t2 + t2;
        k2 := t1 + t1 - u2*k3;
        w2  := t10*up0 - sp0*w0;               //=(r0/q1)*s2*d^2
        if IsZero(w2) then
            if IsZero(k3) then
                w3 := sp2^-1;   //1/s2*d
                w4 := w3*d;     //q1
                M20 := k2*w4;

                upp0 := w0*w3;
                upp2 := upp0^2;

                vpp0 := M20 - v0 - upp0*(-yn1 - v1 - upp0*(-yn2 - v2 + upp2 + upp2));

                
                return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
            end if;//k3

            //M2  := ExactQuotient(k*q, up);
            //upp := -q*M2;
            //l := ExactQuotient(-upp, q);
            //upp := upp/LeadingCoefficient(upp);           
            w3 := (k3*sp2)^-1;  //1/s2*k3*d
            w4 := w3*k3;        //1/s2*d
            w5 := w3*sp2*k2;    //k2/k3
            w6 := sp1*w4;    //s1/s2
            w7 := w4*d;      //1/s2          
            t1 := w5 - w6;    
            t2 := up2 - w6;
            upp1 := t1 + t2;
            upp0 := t1*t2;
            
            //vpp := -V - h + (M2 - v + V) mod upp;
            t0 := -upp1 - upp1;
            t1 := t0*upp1;
            t2 := -yn2 - v2 - upp0 - upp0 - t1;
            t3 := t2*upp0;
            t4 := w7*k3;
            vpp1 := -v1 + t4 - (upp0 + upp1)*(t0 + t2) + t1 + t3;
            vpp0 := -v0 + w7*k2 - w6*t4 - t3;

            
            return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
        end if;//w2

        w3 := w2 + w2 - k3*t11;    //(c4*r0 - k3*q1)*(sp2^2)
        if IsZero(w3) then
            w4 :=  -k3*w0*d - t11*k2; //sp2^2
            if IsZero(w4) then

                
                return < 0,0,0,1,yn2,yn1,yn0,3>;
            end if;//w4

            //q,r := Quotrem(up,s);
            //M1  := ExactQuotient(u*r + (vp - v)*q, up);
            //M2  := ExactQuotient(-r*(vp + v + h) - k*q, up);
            //upp := r*M1 + q*M2;
            w5 := (t11*w4)^-1;
            w6 := w5*t11;        //1/(k2*q1 + k3*q0 - r0*c3)(s2^2*d^2)
            w7 := w5*w4;        //1/s2*d^2;
            w8 := w7*d;         //1/s2*d;
            w9 := w0*w8;        //q0/q1
            w10 := w2*w7;       //r0/q1
            upp0 := w9 + w2*w6*(w10 + vp2 - v2);
            upp2 := upp0^2;

            //upp2 := q1*(c4*r0 - k3*q1)
            //vpp := -V - h + (ExactQuotient(u*r -upp*upp2), q) - v + V) mod upp;
            //l2 := w10;
            t1 := w10*(u2 - w9);
            t0 := w10*u1 - w4*w8^2 - w9*t1;
            vpp0 := -v0 + t0 - upp0*(-yn1 - v1 + t1 - upp0*(-yn2 - v2 + w10 + upp2 + upp2));

            
            return < 0,0,1,upp0,yn2,yn1,vpp0,2>;
        end if;//w3;

        w4 := (t11*w3)^-1;       //1/(c4*r0 - k3*q1)*s2^3*d^4
        w5 := w4*t11;            //1/(c4*r0 - k3*q1)*(s2^2*d^2)
        w6 := w4*w3;            //1/s2*d^2
        w7 := w6*d;             //1/s2*d
        w8 := w0*w7;            //q0/q1 
        w9 := w2*w6;            //r0/q1
        w10:= w3*w7^2;          //c4*r0 - k3*q1

        //M1  := ExactQuotient(u*r + (vp - v)*q, up);
        //M2  := ExactQuotient(-r*(vp + v + h) - k*q, up);
        //upp := r*M1 + q*M2;
        //upp := upp/LeadingCoefficient(upp);
        t1 := w5*(-k3*w0*d - t11*k2) - up2;
        upp1 := t1 + w8;
        upp0 := t1*w8 + w5*w2*(w9 + vp2 - v2);

        //upp2 := q1*(c4*r0 - k3*q1)
        //vpp := -V - h + (ExactQuotient(u*r -upp*upp2), q) - v + V) mod upp;
        t0 := -upp1 - upp1;
        t1 := upp1*t0;
        t2 := -yn2 - v2 + w9 - upp0 - upp0 - t1;
        t3 := upp0*t2;
        t4 := w9*u2 - w10 - w8*w9;
        vpp1 := -v1+ t4 - (upp0 + upp1)*(t0 + t2) + t1 + t3;
        vpp0 := -v0 + w9*u1 - w10*upp1 - w8*t4 - t3;

        
        return < 0,1,upp1,upp0,yn2,vpp1,vpp0,1>;
    end if;//w1

    w2  := t10*up0 - sp0*w0;               //=(r0/q1)*s2*d^2
    w3   := (w1*t11)^-1;  //1/(r1/q1)*s2^2*d^4
    w4   := w3*w1;        //1/s2*d^2
    w5   := w4*d;         //1/s2*d
    qr11 := w3*t11^2;     //q1/r1
    rq11 := w1*w4;        //r1/q1
    qq01 := w0*w5;        //q0/q1
    rq01 := w2*w4;        //r0/q1
    qr01 := qq01*qr11;    //q0/r1
    rr01 := rq01*qr11;    //r0/r1
    w6   := w1*w5^2;      //r1
    r1 := w6 + w6;

    //k := ExactQuotient(f - v*(v + h), u);
    t0 := v2 - ccs[1][2][3];
    t1 := v1 - ccs[1][2][2] - u2*t0;

    //M1  := ExactQuotient((vp - v)*q + u*r, up);
    //M2  := ExactQuotient(r*(vp + v + h) + q*k, up);
    //upp := r*M1 - q*M2;
    //upp := upp/LeadingCoefficient(upp);
    //M2p : = M2/(c4*r1) (negative of M2 monic)
    M21p := -qr11*t0 + rr01 - up2;
    M20p := -(vp2 + v2)/2 - qr11*t1 - qr01*t0 - up1 - up2*M21p;

    //upp = (r*M1)/(c4*r1*q1) + (q*M2p)/q1
    upp2 := rq11/2 + M21p + qq01;
    upp1 := (vt2 + rq11*t7 + rq01 + rq01)/2 + M20p + qq01*M21p;
    upp0 := (rr01*vt2 + rq01*(t7 + rr01))/2 + qq01*M20p;

    //vp  := - V - h  + (ExactQuotient(r*u1 - up*(c4*r1*q1)), q) - v1 + V) mod up;
    t3 := rq11 - upp2 - upp2;
    t2 := rq11*(u2 - qq01) + rq01 - r1;
    t1 := rq11*u1 + rq01*u2 - r1*upp2 - qq01*t2;

    vpp2 := t2 - v2 - upp1 - upp1 - upp2*t3;
    vpp1 := t1 - v1 - upp0 - upp0 - upp1*t3;
    vpp0 := -v0 + rq11*u0 + rq01*u1 - r1*upp1 - qq01*t1 - upp0*t3;

    
    return < 1,upp2,upp1,upp0,vpp2,vpp1,vpp0,0>; 
end function;

///////////////////////////////////////////////////////////////////////////////
// ADD():
// Input: u1,v1,n1: Polynomials u,v and number n representing an arbirtrary
//                  divisor D1 over a split model HEC.
//        u2,v2,n2: Polynomials u,v and number n representing an arbirtrary
//                  divisor D2 over a split model HEC.
//             ccs: Table of curve constants and precomputations, see 
//                  Precompuation in arb_splitG2_UTL.mag
//
// Output: Mumford coordinates upp2,upp1,upp0,vpp1,vpp0 and balanced n 
//         for D1 + D2               
// Description: Explicit computation for adding any two divisors in reduced    
//              basis. Handles all cases explicitly.               
///////////////////////////////////////////////////////////////////////////////
ADD:= function(d1,d2,ccs)//startIGNORE
    


    if IsOne(d1[1]) then
        if IsOne(d2[1]) then
            return Deg3ADD(d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],d2[2],d2[3],d2[4],d2[5],d2[6],d2[7],ccs);
        elif IsOne(d2[2]) then
            if d1[8] + d2[8] - 2 eq -1 then
                return Deg23ADD(d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],d2[3],d2[4],d2[6],d2[7],ccs);
            else
                return Deg23ADDUP(d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],d2[3],d2[4],d2[6],d2[7],ccs);
            end if;
        elif IsOne(d2[3]) then
            n := d1[8] + d2[8] - 2;
            if n eq 0 then
                return Deg13ADD(d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],d2[4],d2[7],ccs);
            elif n eq -1 then
                return Deg13ADDUP(d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],d2[4],d2[7],ccs);
            else //n = -2
                return Deg13ADDUP2(d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],d2[4],d2[7],ccs);
            end if;
        else
            n := d1[8] + d2[8] - 2;
            if n eq 0 then
                
                return <d1[1],d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],n>;
            elif n eq 1 then
                return Deg03ADDDWN(d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],ccs);
            elif n eq -1 then
                return Deg03ADDUP(d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],ccs);
            else // n = -2
                return Deg03ADDUP2(d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],ccs);
            end if;
        end if;
    
    elif IsOne(d1[2]) then
        if IsOne(d2[1]) then
            if d1[8] + d2[8] - 2 eq -1 then
                return Deg23ADD(d2[2],d2[3],d2[4],d2[5],d2[6],d2[7],d1[3],d1[4],d1[6],d1[7],ccs);
            else
                return Deg23ADDUP(d2[2],d2[3],d2[4],d2[5],d2[6],d2[7],d1[3],d1[4],d1[6],d1[7],ccs);
            end if;
        elif IsOne(d2[2]) then
            n := d1[8] + d2[8] - 2;
            if n eq 0 then
                return Deg22ADD(d1[3],d1[4],d1[6],d1[7],d2[3],d2[4],d2[6],d2[7],ccs);
            elif n eq -1 then
                return Deg22ADDUP(d1[3],d1[4],d1[6],d1[7],d2[3],d2[4],d2[6],d2[7],ccs);
            else //n = -2
                return Deg22ADDUP2(d1[3],d1[4],d1[6],d1[7],d2[3],d2[4],d2[6],d2[7],ccs);
            end if;
        elif IsOne(d2[3]) then
            n := d1[8] + d2[8] - 2;
            if n eq 0 then
                return Deg12ADD(d1[3],d1[4],d1[6],d1[7],d2[4],d2[7],ccs);
            elif n eq 1 then
                return Deg12ADDDWN(d1[3],d1[4],d1[6],d1[7],d2[4],d2[7],ccs);
            elif n eq -1 then
                return Deg12ADDUP(d1[3],d1[4],d1[6],d1[7],d2[4],d2[7],ccs);
            else //n = -2
                return Deg12ADDUP2(d1[3],d1[4],d1[6],d1[7],d2[4],d2[7],ccs);
            end if;
        else
            n := d1[8] + d2[8] - 2;
            if n ge 0 and n le 1 then
                
                return < d1[1],d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],n>;
            elif n eq 2 then
                return Deg02ADDDWN(d1[3],d1[4],d1[6],d1[7],ccs);
            elif n eq -1 then
                return Deg02ADDUP(d1[3],d1[4],d1[6],d1[7],ccs);
            else // n = -2
                return Deg02ADDUP2(d1[3],d1[4],d1[6],d1[7],ccs);
            end if;
        end if;
    
    elif IsOne(d1[3]) then
        if IsOne(d2[1]) then
            n := d1[8] + d2[8] - 2;
            if n eq 0 then
                return Deg13ADD(d2[2],d2[3],d2[4],d2[5],d2[6],d2[7],d1[4],d1[7],ccs);
            elif n eq -1 then
                return Deg13ADDUP(d2[2],d2[3],d2[4],d2[5],d2[6],d2[7],d1[4],d1[7],ccs);
            else //n = -2
                return Deg13ADDUP2(d2[2],d2[3],d2[4],d2[5],d2[6],d2[7],d1[4],d1[7],ccs);
            end if;
        elif IsOne(d2[2]) then
            n := d1[8] + d2[8] - 2;
            if n eq 0 then
                return Deg12ADD(d2[3],d2[4],d2[6],d2[7],d1[4],d1[7],ccs);
            elif n eq 1 then
                return Deg12ADDDWN(d2[3],d2[4],d2[6],d2[7],d1[4],d1[7],ccs);
            elif n eq -1 then
                return Deg12ADDUP(d2[3],d2[4],d2[6],d2[7],d1[4],d1[7],ccs);
            else //n = -2
                return Deg12ADDUP2(d2[3],d2[4],d2[6],d2[7],d1[4],d1[7],ccs);
            end if;
        elif IsOne(d2[3]) then
            n := d1[8] + d2[8] - 2;
            if n ge 0 and n le 1 then
                return Deg1ADD(d1[4],d1[7],d2[4],d2[7],n,ccs);
            elif n eq 2 then
                return Deg1ADDDWN(d1[4],d1[7],d2[4],d2[7],ccs);
            elif n eq -1 then
                return Deg1ADDUP(d1[4],d1[7],d2[4],d2[7],ccs);
            else // n = -2
                return Deg1ADDUP2(d1[4],d1[7],d2[4],d2[7],ccs);
            end if;
        else
            n := d1[8] + d2[8] - 2;
            if n ge 0 and n le 2 then
                
                return < d1[1],d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],n>;
            elif n eq 3 then
                return Deg01ADDDWN(d1[4],d1[7],ccs);
            elif n eq -1 then
                return Deg01ADDUP(d1[4],d1[7],ccs);
            else // n = -2
                return Deg01ADDUP2(d1[4],d1[7],ccs);
            end if;
        end if;
    else
        n := d1[8] + d2[8] - 2;
        if IsOne(d2[1]) then
            if n eq 0 then
                return < d2[1],d2[2],d2[3],d2[4],d2[5],d2[6],d2[7],n>;
            elif n eq 1 then
                return Deg03ADDDWN(d2[2],d2[3],d2[4],d2[5],d2[6],d2[7],ccs);
            elif n eq -1 then
                return Deg03ADDUP(d2[2],d2[3],d2[4],d2[5],d2[6],d2[7],ccs);
            else // n = -2
                return Deg03ADDUP2(d2[2],d2[3],d2[4],d2[5],d2[6],d2[7],ccs);
            end if;
        elif IsOne(d2[2]) then
            if n ge 0 and n le 1 then
                return < d2[1],d2[2],d2[3],d2[4],d2[5],d2[6],d2[7],n>;
            elif n eq 2 then
                return Deg02ADDDWN(d2[3],d2[4],d2[6],d2[7],ccs);
            elif n eq -1 then
                return Deg02ADDUP(d2[3],d2[4],d2[6],d2[7],ccs);
            else // n = -2
                return Deg02ADDUP2(d2[3],d2[4],d2[6],d2[7],ccs);
            end if;
        elif IsOne(d2[3]) then
            if n ge 0 and n le 2 then
                return < d2[1],d2[2],d2[3],d2[4],d2[5],d2[6],d2[7],n>;
            elif n eq 3 then
                return Deg01ADDDWN(d2[4],d2[7],ccs);
            elif n eq -1 then
                return Deg01ADDUP(d2[4],d2[7],ccs);
            else // n = -2
                return Deg01ADDUP2(d2[4],d2[7],ccs);
            end if;
        else
            if n ge 0 and n le 3 then
                return < 0,0,0,1,ccs[1][2][3],ccs[1][2][2],ccs[1][2][1],n>;
            else
                return < ccs[2][1][4],ccs[2][1][3],ccs[2][1][2],ccs[2][1][1],ccs[2][1][8],ccs[2][1][7],ccs[2][1][6],ccs[2][1][5]>;
            end if;
        end if;
    end if;

end function;//endIGNORE