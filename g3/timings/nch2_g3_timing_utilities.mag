///////////////////////////////////////////////////////////////////////////////
////////////////////// Char neq 2 g2 TIMING UTILITIES. ////////////////////////
///////////////////////////////////////////////////////////////////////////////
//  
//-----------------------------------------------------------------------------
// OVERVIEW
//-----------------------------------------------------------------------------
// This file contains functions for timing ramified and split model divisor 
// arithmetic in genus 2 over fields with characteristic not 2.
//
///////////////////////////////////////////////////////////////////////////////



//-----------------------------------------------------------------------------
// RandomCurve_nch2_g3_SPL(q)
//-----------------------------------------------------------------------------
// Input:       q: field parameter.
//              
// Return: Random(ish) hyperelliptic polynomials of curve with two points at
//         infinity f in GF(q)[x] where f is seperable of degree 2g+2,  
//         polynomial and f8=y4=1.
//-----------------------------------------------------------------------------
RandomCurve_nch2_g3_SPLIT:= function(q)
    assert IsPrimePower(q);
    F:=GF(q);
    R<x>:=PolynomialRing(F);
    while true do
        //Randomly generate f 
        f:= x^8 + Random(F)*x^6 + Random(F)*x^5 + Random(F)*x^4 + Random(F)*x^3 + 
            Random(F)*x^2 + Random(F)*x + Random(F);

        //Check if f is hyperelliptic polynomial
        try
            C:=HyperellipticCurve(f);
            isHC:= true;
        catch e
            isHC:= false;
        end try;

        //If f is a hyperelliptic polynomial, check to see if
        //the curve has two points at infinity and is genus is 2
        if isHC then
            pointsAtInf:= PointsAtInfinity(C);
            if (# pointsAtInf eq 2) and (Degree(f) eq 8) then
                return f;
            end if;
        end if;
        
    end while;
end function;


//SPLIT

//-----------------------------------------------------------------------------
// Explicit_to_poly_SPLIT(D,f,Vpl)
//-----------------------------------------------------------------------------
// Input:   D: D is (u2,u1,u0,v1,v0,n) where u,v are Mumford polynomials and n is 
//             balancing weight.
//        f,Vpl: hyperelliptic polynomials corresponding to curve.
//
// Return: Divisor D'hat' = (u,v,w,n) using polynomials in extended Mumford.
//-----------------------------------------------------------------------------
Explicit_to_poly_SPLIT := function(D,f,Vn)
    R<x>:= Parent(f);
    u := R![D[4],D[3],D[2],D[1]];
    v := Coefficient(Vn,4)*x^4 + R![D[7],D[6],D[5]];
    w := ExactQuotient(f - v^2,u);
    return <u,v,w,D[8]>;
end function;


//-----------------------------------------------------------------------------
// ExplicitAdapted_to_poly_SPLIT(D,f,Vpl)
//-----------------------------------------------------------------------------
// Input:   D: D is (u2,u1,u0,v1,v0,n) where u,v are Mumford polynomials and n is 
//             balancing weight.
//        f,Vpl: hyperelliptic polynomials corresponding to curve.
//
// Return: Divisor D'hat' = (u,v,w,n) using polynomials in extended Mumford.
//-----------------------------------------------------------------------------
ExplicitAdapted_to_poly_SPLIT := function(D,f,Vn)
    R<x>:= Parent(f);
    u := R![D[4],D[3],D[2],D[1]];
    v := R![D[7],D[6],D[5]];
    v := Vn - (Vn - v) mod u;
    w := ExactQuotient(f - v^2,u);
    return <u,v,w,D[8]>;
end function;

//-----------------------------------------------------------------------------
// ExplicitPOS_to_poly_SPLIT(D,f,Vpl)
//-----------------------------------------------------------------------------
// Input:   D: D is (u2,u1,u0,v1,v0,n) where u,v are Mumford polynomials and n is 
//             balancing weight.
//        f,Vpl: hyperelliptic polynomials corresponding to curve.
//
// Return: Divisor D'hat' = (u,v,w,n) using polynomials in extended Mumford.
//-----------------------------------------------------------------------------
ExplicitPOS_to_poly_SPLIT := function(D,f,Vn)
    R<x>:= Parent(f);
    u := R![D[4],D[3],D[2],D[1]];
    v := x^4 + R![D[7],D[6],D[5]] mod u;
    v := Vn - (Vn - v) mod u;
    w := ExactQuotient(f - v^2,u);
    return <u,v,w,D[8]>;
end function;


//-----------------------------------------------------------------------------
// Magma_to_poly_SPLIT(D,f)
//-----------------------------------------------------------------------------
// Input:   D: D is (u,v,d) where u,v are Mumford polynomials.
//        f: hyperelliptic polynomial corresponding for computing extended 
//           Mumford representation.
//
// Return: Divisor D' = (u,v,w,n) using polynomials in extended Mumford.
//-----------------------------------------------------------------------------
Magma_to_poly_SPLIT := function(D,f,Vn)
    u := D[1];
    vt := D[2];
    v := vt mod u;
    v := Vn - ((Vn - v) mod u);

    w := ExactQuotient(f - v^2,u);
    return <u,v,w,Random([0..3-Degree(u)])>;
end function;



//-----------------------------------------------------------------------------
// Fibonacci_expl_SPLIT(D1,D2,ccs,len)
//-----------------------------------------------------------------------------
// Input: D1,D2: D1=(u12,u11,u10,v11,v10,n1) and D2=(u22,u21,u20,v21,v20,n2)  
//               divisors over HyperellipticCurve(f), to be composed together.
//          ccs: Precomputed values corresponding to C genus 2 curve.
//          len: Chain length.        
// 
// Return: Divisor D at end of fibonacci style addition sequence using explicit
//         formulas.
//-----------------------------------------------------------------------------
Fibonacci_expl_SPLIT := function(D1,D2,ccs,len)
    if D1 eq D2 then
        D := DBL(D1,ccs);
    else
        D := ADD(D1,D2,ccs);
    end if;
    i := 1;
    while i lt len do
        i   := i + 1;
        D1  := D2;
        D2  := D;
        if D1 eq D2 then
            D := DBL(D1,ccs);
        else
            D := ADD(D1,D2,ccs);
        end if;
    end while;
    return D;
end function;


//-----------------------------------------------------------------------------
// Fibonacci_onlyFreq_SPLIT(D1,D2,ccs,len)
//-----------------------------------------------------------------------------
// Input: D1,D2: D1=(u12,u11,u10,v11,v10,n1) and D2=(u22,u21,u20,v21,v20,n2)  
//               divisors over HyperellipticCurve(f), to be composed together.
//          ccs: Precomputed values corresponding to C genus 2 curve.
//          len: Chain length.        
// 
// Return: Divisor D at end of fibonacci style addition sequence using explicit
//         formulas.
//-----------------------------------------------------------------------------
Fibonacci_onlyFreq_SPLIT := function(D1,D2,ccs,len)
    if D1 eq D2 then
        D := DBL_onlyFreq(D1,ccs);
    else
        D := ADD_onlyFreq(D1,D2,ccs);
    end if;
    i := 1;
    while i lt len do
        i   := i + 1;
        D1  := D2;
        D2  := D;
        if D1 eq D2 then
            D := DBL_onlyFreq(D1,ccs);
        else
            D := ADD_onlyFreq(D1,D2,ccs);
        end if;
    end while;
    return D;
end function;


//-----------------------------------------------------------------------------
// Fibonacci_Sutherland_SPLIT(D1,D2,ccs,len)
//-----------------------------------------------------------------------------
// Input: D1,D2: D1=(u12,u11,u10,v11,v10,n1) and D2=(u22,u21,u20,v21,v20,n2)  
//               divisors over HyperellipticCurve(f), to be composed together.
//          ccs: Precomputed values corresponding to C genus 2 curve.
//          len: Chain length.        
// 
// Return: Divisor D at end of fibonacci style addition sequence using explicit
//         formulas.
//-----------------------------------------------------------------------------
Fibonacci_Sutherland_SPLIT := function(D1,D2,f,len)
    if D1 eq D2 then
        D := DBL_Sutherland_SPLIT(D1,f);
    else
        D := ADD_Sutherland_SPLIT(D1,D2,f);
    end if;
    i := 1;
    while i lt len do
        i   := i + 1;
        D1  := D2;
        D2  := D;
        if D1 eq D2 then
            D := DBL_Sutherland_SPLIT(D1,f);
        else
            D := ADD_Sutherland_SPLIT(D1,D2,f);
        end if;
    end while;
    return D;
end function;

//-----------------------------------------------------------------------------
// Fibonacci_Rad_SPLIT(D1,D2,ccs,len)
//-----------------------------------------------------------------------------
// Input: D1,D2: D1=(u12,u11,u10,v11,v10,n1) and D2=(u22,u21,u20,v21,v20,n2)  
//               divisors over HyperellipticCurve(f), to be composed together.
//          ccs: Precomputed values corresponding to C genus 2 curve.
//          len: Chain length.        
// 
// Return: Divisor D at end of fibonacci style addition sequence using explicit
//         formulas.
//-----------------------------------------------------------------------------
Fibonacci_Rad_SPLIT := function(D1,D2,ccs,len)
    if D1 eq D2 then
        D := DBL_Rad_SPLIT(D1,ccs);
    else
        D := ADD_Rad_SPLIT(D1,D2,ccs);
    end if;
    i := 1;
    while i lt len do
        i   := i + 1;
        D1  := D2;
        D2  := D;
        if D1 eq D2 then
            D := DBL_Rad_SPLIT(D1,ccs);
        else
            D := ADD_Rad_SPLIT(D1,D2,ccs);
        end if;
    end while;
    return D;
end function;

//-----------------------------------------------------------------------------
// Fibonacci_Add_SPLIT_POS(D1,D2,f,V,len)
//-----------------------------------------------------------------------------
// Input: D1,D2: D1=(u1,v1,n1) and D2=(u2,v2,n2) divisors over 
//               HyperellipticCurve(f), to be composed together.
//          f,V: hyperelliptic polynomials corresponding to genus 2 curve.
//          len: Chain length.        
// 
// Return: Divisor D at end of fibonacci style addition sequence using Cantor.
//-----------------------------------------------------------------------------
Fibonacci_polyCantor_SPLIT := function(D1,D2,f,V,len)
    if D1 eq D2 then
        D := Double_SPLIT_NEG(D1,f,V,3);
    else
        D := Add_SPLIT_NEG(D1,D2,f,V,3);
    end if;
    i := 1;
    while i lt len do
        i  := i + 1;
        D1 := D2;
        D2 := D;
        if D1 eq D2 then
            D := Double_SPLIT_NEG(D1,f,V,3);
        else
            D := Add_SPLIT_NEG(D1,D2,f,V,3);
        end if;
    end while;
    return D;
end function;




//-----------------------------------------------------------------------------
// Fibonacci_magma_SPLIT(D1,D2,len)
//-----------------------------------------------------------------------------
// Input: D1,D2: D1=(u1,v1,d) and D2=(u2,v2,d) divisors over 
//               HyperellipticCurve(f), to be composed together.
//          len: Chain length.        
// 
// Return: Divisor D at end of fibonacci style addition sequence using magma
//         built in.
//-----------------------------------------------------------------------------
Fibonacci_magma_SPLIT := function(D1,D2,len)
    if D1 eq D2 then
        D := D1 + D1;
    else
        D := D1 + D2;
    end if;
    i := 1;
    while i lt len do
        i   := i + 1;
        D1  := D2;
        D2  := D;
        if D1 eq D2 then
            D := D1 + D1;
        else
            D := D1 + D2;
        end if;
    end while;
    return D;
end function;


//-----------------------------------------------------------------------------
// DoubleChain_expl_SPLIT(D,ccs,len)
//-----------------------------------------------------------------------------
// Input: D1: D1=(u2, u1, u0, v1, v0, n) divisor over 
//               HyperellipticCurve(f,h), to be composed together.
//          ccs: Precomputed values corresponding to C genus 2 curve.
//          len: Chain length.        
// 
// Return: Divisor D at end of douobling chain using explicit formulas.
//-----------------------------------------------------------------------------
DoubleChain_expl_SPLIT := function(D,ccs,len)
    i := 0;
    while i lt len do
        i := i + 1;
        D  := DBL(D,ccs);
    end while;
    return D;
end function;

//-----------------------------------------------------------------------------
// DoubleChain_onlyFreq_SPLIT(D,ccs,len)
//-----------------------------------------------------------------------------
// Input: D1: D1=(u2, u1, u0, v1, v0, n) divisor over 
//               HyperellipticCurve(f,h), to be composed together.
//          ccs: Precomputed values corresponding to C genus 2 curve.
//          len: Chain length.        
// 
// Return: Divisor D at end of douobling chain using explicit formulas.
//-----------------------------------------------------------------------------
DoubleChain_onlyFreq_SPLIT := function(D,ccs,len)
    i := 0;
    while i lt len do
        i := i + 1;
        D  := DBL_onlyFreq(D,ccs);
    end while;
    return D;
end function;

//-----------------------------------------------------------------------------
// DoubleChain_Sutherland_SPLIT(D,ccs,len)
//-----------------------------------------------------------------------------
// Input: D1: D1=(u2, u1, u0, v1, v0, n) divisor over 
//               HyperellipticCurve(f,h), to be composed together.
//          ccs: Precomputed values corresponding to C genus 2 curve.
//          len: Chain length.        
// 
// Return: Divisor D at end of douobling chain using explicit formulas.
//-----------------------------------------------------------------------------
DoubleChain_Sutherland_SPLIT := function(D,f,len)
    i := 0;
    while i lt len do
        i := i + 1;
        D  := DBL_Sutherland_SPLIT(D,f);
    end while;
    return D;
end function;

//-----------------------------------------------------------------------------
// DoubleChain_Rad_SPLIT(D,ccs,len)
//-----------------------------------------------------------------------------
// Input: D1: D1=(u2, u1, u0, v1, v0, n) divisor over 
//               HyperellipticCurve(f,h), to be composed together.
//          ccs: Precomputed values corresponding to C genus 2 curve.
//          len: Chain length.        
// 
// Return: Divisor D at end of douobling chain using explicit formulas.
//-----------------------------------------------------------------------------
DoubleChain_Rad_SPLIT := function(D,ccs,len)
    i := 0;
    while i lt len do
        i := i + 1;
        D  := DBL_Rad_SPLIT(D,ccs);
    end while;
    return D;
end function;



//-----------------------------------------------------------------------------
// DoubleChain_polyCantor_SPLIT(D1,f,V,len)
//-----------------------------------------------------------------------------
// Input: D1: D1=(u1,v1,n1) divisor over 
//               HyperellipticCurve(f), to be composed together.
//          f,V: hyperelliptic polynomials corresponding to genus g curve.
//          len: Chain length.        
// 
// Return: Divisor D at end of doubling chain using Cantor.
//-----------------------------------------------------------------------------
DoubleChain_polyCantor_SPLIT := function(D,f,V,len)
    i := 0;
    while i lt len do
        i := i + 1;
        D  := Double_SPLIT_NEG(D,f,V,3);
    end while;
    return D;
end function;


//-----------------------------------------------------------------------------
// DoubleChain_Magma_SPLIT_POS(D1,len)
//-----------------------------------------------------------------------------
// Input: D1: D1=(u1,v1,n1) divisor over 
//               HyperellipticCurve(f,h), to be composed together.
//          len: Chain length.        
// 
// Return: Divisor D at end of doubling chain using Cantor.
//-----------------------------------------------------------------------------
DoubleChain_magma_SPLIT := function(D,len)
    i := 0;
    while i lt len do
        i := i + 1;
        D := D + D;
    end while;
    return D;
end function;
